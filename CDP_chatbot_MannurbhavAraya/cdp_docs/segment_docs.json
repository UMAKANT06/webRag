[
  {
    "url": "https://segment.com/docs/",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/spec/",
    "title": " Spec Overview | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Spec Overview Spec Overview The Segment Spec provides guidance on meaningful data to capture, and the best format for it, across all of Segment’s libraries and APIs. If you implement Segment using these formats, it’s simple to translate your data to downstream tools. Segment University: The Segment Methods Check out our high-level overview of these APIs in Segment University. (Must be logged in to access.) Event and Product Limits Events ingested by Segment are subject to defined Product Limits . The Segment Spec has three components. First, it outlines the semantic definition of the customer data Segment captures across all libraries and APIs .  There are six API calls in the Spec. They each represent a distinct type of semantic information about a customer. Every call shares the same common fields . APIs Identify : who is the customer? Track : what are they doing? Page : what web page are they on? Screen : what app screen are they on? Group : what account or organization are they part of? Alias : what was their past identity? Second, it details the event data Segment captures across some cloud sources and destinations . Cloud Sources and Destinations Email Live Chat A/B Testing Third, it shares the events Segment recommends you track for a particular industry based on experience working with thousands of customers . When you respect these specs, Segment maps these events to particular features within end destinations like Google Analytics and Facebook Ads. Industry Specs Mobile E-Commerce Video B2B SaaS AI Copilot This page was last modified: 18 Apr 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "conceptual",
    "keywords": [
      "defined",
      "working",
      "formats",
      "access",
      "visit",
      "group",
      "check",
      "provides",
      "specs",
      "features",
      "fields",
      "methods",
      "based",
      "analytics",
      "there",
      "change",
      "customer",
      "organization",
      "cloud",
      "about",
      "easiest",
      "identity",
      "growth",
      "customers",
      "problems",
      "three",
      "documentation",
      "within",
      "guidance",
      "captures",
      "integrate",
      "using",
      "screen",
      "sources",
      "testing",
      "websites",
      "subject",
      "improve",
      "simple",
      "experience",
      "request",
      "overview",
      "modified",
      "alias",
      "respect",
      "product",
      "copilot",
      "segment",
      "information",
      "second",
      "events",
      "components",
      "capture",
      "data",
      "libraries",
      "contact",
      "common",
      "shares",
      "implement",
      "university",
      "these",
      "assistance",
      "every",
      "started",
      "helpful",
      "downstream",
      "destinations",
      "third",
      "account",
      "distinct",
      "email",
      "recommends",
      "calls",
      "doing",
      "their",
      "translate",
      "represent",
      "industry",
      "definition",
      "outlines",
      "support",
      "track",
      "identify",
      "thousands",
      "google",
      "facebook",
      "thanks",
      "format",
      "mobile",
      "commerce",
      "logged",
      "semantic",
      "level",
      "across",
      "api",
      "meaningful",
      "connections",
      "first",
      "video",
      "questions",
      "create",
      "ingested",
      "feedback",
      "tools",
      "limits",
      "event",
      "particular",
      "details"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/spec/common/",
    "title": " Spec: Common Fields | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Spec / Spec: Common Fields Spec: Common Fields On this page Structure Context Context fields automatically collected Integrations Timestamps FAQ In the Segment Spec all the API calls have a common structure, and a few common fields. However, not all destinations accept all fields included in the Spec. Not sure which fields a destination accepts? Refer to the destination’s documentation page, or check out the open-source destination code on GitHub . Segment University: The Segment Methods Check out our high-level overview of these APIs in Segment University. (Must be logged in to access.) Structure Every API call has the same core structure and fields. These fields describe user identity, timestamping, and mechanical aides like API version. Here’s an example of these common fields in raw JSON: { \"anonymousId\" : \"507f191e810c19729de860ea\" , \"context\" : { \"active\" : true , \"app\" : { \"name\" : \"InitechGlobal\" , \"version\" : \"545\" , \"build\" : \"3.0.1.545\" , \"namespace\" : \"com.production.segment\" }, \"campaign\" : { \"name\" : \"TPS Innovation Newsletter\" , \"source\" : \"Newsletter\" , \"medium\" : \"email\" , \"term\" : \"tps reports\" , \"content\" : \"image link\" }, \"device\" : { \"id\" : \"B5372DB0-C21E-11E4-8DFC-AA07A5B093DB\" , \"advertisingId\" : \"7A3CBEA0-BDF5-11E4-8DFC-AA07A5B093DB\" , \"adTrackingEnabled\" : true , \"manufacturer\" : \"Apple\" , \"model\" : \"iPhone7,2\" , \"name\" : \"maguro\" , \"type\" : \"ios\" , \"token\" : \"ff15bc0c20c4aa6cd50854ff165fd265c838e5405bfeb9571066395b8c9da449\" }, \"ip\" : \"8.8.8.8\" , \"library\" : { \"name\" : \"analytics.js\" , \"version\" : \"2.11.1\" }, \"locale\" : \"en-US\" , \"network\" : { \"bluetooth\" : false , \"carrier\" : \"T-Mobile US\" , \"cellular\" : true , \"wifi\" : false }, \"os\" : { \"name\" : \"iPhone OS\" , \"version\" : \"8.1.3\" }, \"page\" : { \"path\" : \"/academy/\" , \"referrer\" : \"\" , \"search\" : \"\" , \"title\" : \"Analytics Academy\" , \"url\" : \"https://segment.com/academy/\" }, \"referrer\" : { \"id\" : \"ABCD582CDEFFFF01919\" , \"type\" : \"dataxu\" }, \"screen\" : { \"width\" : 320 , \"height\" : 568 , \"density\" : 2 }, \"groupId\" : \"12345\" , \"timezone\" : \"Europe/Amsterdam\" , \"userAgent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36\" , \"userAgentData\" : { \"brands\" : [ { \"brand\" : \"Google Chrome\" , \"version\" : \"113\" }, { \"brand\" : \"Chromium\" , \"version\" : \"113\" }, { \"brand\" : \"Not-A.Brand\" , \"version\" : \"24\" } ], \"mobile\" : false , \"platform\" : \"macOS\" } }, \"integrations\" : { \"All\" : true , \"Mixpanel\" : false , \"Salesforce\" : false }, \"event\" : \"Report Submitted\" , \"messageId\" : \"022bb90c-bbac-11e4-8dfc-aa07a5b093db\" , \"receivedAt\" : \"2015-12-10T04:08:31.909Z\" , \"sentAt\" : \"2015-12-10T04:08:31.581Z\" , \"timestamp\" : \"2015-12-10T04:08:31.905Z\" , \"type\" : \"track\" , \"userId\" : \"97980cfea0067\" , \"version\" : 2 } In more detail these common fields for every API call are: Field Type Description anonymousId required; optional if userID is set instead String A pseudo-unique substitute for a User ID, for cases when you don’t have an absolutely unique identifier. A userId or an anonymousId is required.\n\n  See the Identities docs for more details. context optional Object Dictionary of extra information that provides useful context about a message, but is not directly related to the API call like ip address or locale See the Context field docs for more details. integrations optional Object Dictionary of destinations to either enable or disable\n\n  See the Destinations field docs for more details. messageId implicit String Automatically collected by Segment, a unique identifier for each message that lets you find an individual message across the API. This field is limited to 100 characters. receivedAt implicit Date Automatically set by Segment, the timestamp of when a message is received by Segment\n\n  It is an ISO-8601 date string.  See the Timestamps fields docs for more detail. sentAt optional Date Timestamp of when a message is sent to Segment, used for clock skew correction\n\n    It is set automatically by the Segment tracking libraries. It is an ISO-8601 date string. See the Timestamps fields docs for more detail. timestamp optional Date Timestamp when the message itself took place, defaulted to the current time by the Segment Tracking API, as a ISO-8601 format date string.\n\n  If the event just happened, leave it out and we’ll use the server’s time. If you’re importing data from the past, make sure you to provide a timestamp .See the Timestamps fields docs for more detail. type implicit String Type of message, corresponding to the API method: 'identify' , 'group' , 'track' , 'page' , 'screen' or 'alias' . userId required; optional if anonymousID is set instead String Unique identifier for the user in your database.\n\n  A userId or an anonymousId is required.\n\n  See the Identities docs for more details. version implicit Number Version of the Tracking API that received the message, automatically set by Segment. Beyond this common structure, each API call adds a few specialized top-level fields. Context Context is a dictionary of extra information that provides useful context about a datapoint, for example the user’s ip address or locale . You should only use Context fields for their intended meaning. Field Type Description active Boolean Whether a user is active. This is usually used to flag an .identify() call to just update the traits but not “last seen.” app Object dictionary of information about the current application, containing name , version , and build . This is collected automatically from the mobile libraries when possible. campaign Object Dictionary of information about the campaign that resulted in the API call, containing name , source , medium , term , content , and any other custom UTM parameter. This maps directly to the common UTM campaign parameters. device Object Dictionary of information about the device, containing id , advertisingId , manufacturer , model , name , type , and version . Note: If you collect information about iOS devices, note that the model value set by Apple might not exactly correspond to an iPhone model number. For example, an iPhone 15 Pro Max has a model value of iPhone16,2 . ip String Current user’s IP address. library Object Dictionary of information about the library making the requests to the API, containing name and version . locale String Locale string for the current user, for example en-US . network Object Dictionary of information about the current network connection, containing bluetooth , carrier , cellular , and wifi . If the context.network.cellular and context.network.wifi fields are empty, then the user is offline. os Object Dictionary of information about the operating system, containing name and version . page Object Dictionary of information about the current page in the browser, containing path , referrer , search , title and url . This is automatically collected by Analytics.js . referrer Object Dictionary of information about the way the user was referred to the website or app, containing type , name , url , and link . screen Object Dictionary of information about the device’s screen, containing density , height , and width . timezone String Timezones are sent as tzdata strings to add user timezone information which might be stripped from the timestamp, for example America/New_York . groupId String Group / Account ID. This is useful in B2B use cases where you need to attribute your non-group calls to a company or account. It is relied on by several Customer Success and CRM tools. traits Object Dictionary of traits of the current user. This is useful in cases where you need to track an event, but also associate information from a previous Identify call. You should fill this object the same way you would fill traits in an identify call . userAgent String User agent of the device making the request. userAgentData Object The user agent data of the device making the request. This always contains brands , mobile , platform , and may contain bitness , model , platformVersion , uaFullVersion , fullVersionList , wow64 , if requested and available. This populates if the Client Hints API is available on the browser. This may contain more information than is available in the userAgent in some cases. channel String where the request originated from: server, browser or mobile Context fields automatically collected Below is a chart that shows you which context variables are populated automatically by the iOS, Android, and analytics.js libraries. Other libraries only collect context.library , any other context variables must be sent manually. Context Field Analytics.js Analytics-ios Analytics-android app.name ✅ ✅ app.version ✅ ✅ app.build ✅ ✅ campaign.name ✅ campaign.source ✅ campaign.medium ✅ campaign.term ✅ campaign.content ✅ device.type ✅ ✅ device.id ✅ ✅ device.advertisingId ✅ ✅ device.adTrackingEnabled ✅ ✅ device.manufacturer ✅ ✅ device.model ✅ ✅ device.name ✅ ✅ library.name ✅ ✅ ✅ library.version ✅ ✅ ✅ ip* ✅ ✅ ✅ locale ✅ ✅ ✅ network.bluetooth ✅ network.carrier ✅ ✅ network.cellular ✅ ✅ network.wifi ✅ ✅ os.name ✅ ✅ os.version ✅ ✅ page.path ✅ page.referrer ✅ page.search ✅ page.title ✅ page.url ✅ screen.density ✅ screen.height ✅ ✅ screen.width ✅ ✅ traits ✅ ✅ userAgent ✅ ✅ userAgentData* ✅ timezone ✅ ✅ ✅ IP Address isn’t collected by Segment’s libraries, but is instead filled in by Segment’s servers when it receives a message for client side events only . IPv6 Segment doesn’t support automatically collecting IPv6 addresses. The Android library collects screen.density with this method . userAgentData is only collected if the Client Hints API is available on the browser. Segment doesn’t collect or append to the context of subsequent calls in the new mobile libraries (Swift, Kotlin, and React Native). To pass the context variables which are not automatically collected by Segment’s libraries, you must manually include them in the event payload. The following code shows how to pass groupId as the context field of Analytics.js’s .track() event: analytics . track ( \" Report Submitted \" , {}, { context : { groupId : \" 1234 \" } }); To add fields to the context object in the new mobile libraries, you must utilize a custom plugin. Documentation for creating plugins for each library can be found here: React Native Swift Kotlin Integrations A dictionary of destination names that the message should be sent to. 'All' is a special key that applies when no key for a specific destination is found. Integrations defaults to the following: { All : true , Salesforce : false , } This is because Salesforce has strict limits on API calls. Sending data to the rest of Segment’s destinations is opt-out so if you don’t specify the destination as false in this object, it will be sent to rest of the destinations that can accept it. Timestamps Every API call has four timestamps, originalTimestamp , timestamp , sentAt , and receivedAt. They’re used for very different purposes. All timestamps are ISO-8601 date strings, and are in the UTC timezone. To see the user’s timezone information, check the timezone field that’s automatically collected by client-side libraries . You must use ISO-8601 date strings that include timezones when you use timestamps with Engage . If you send custom traits without a timezone, Segment doesn’t save the timestamp value. Timestamp overview Timestamp Calculated Description originalTimestamp Time on the client device when call was invoked OR The timestamp value manually passed in through server-side libraries. Used by Segment to calculate timestamp . Note: originalTimestamp is not useful for analysis since it’s not always trustworthy as it can be easily adjusted and affected by clock skew. sentAt Time on client device when call was sent. OR sentAt value manually passed in. Used by Segment to calculate timestamp . Note: sentAt is not useful for analysis since it’s not always trustworthy as it can be easily adjusted and affected by clock skew. receivedAt Time on Segment server clock when call was received Used by Segment to calculate timestamp , and used as sort key in Warehouses. Note: For max query speed, receivedAt is the recommended timestamp for analysis when chronology does not matter as chronology is not ensured. timestamp Calculated by Segment to correct client-device clock skew using the following formula: receivedAt - ( sentAt - originalTimestamp ) Used by Segment to send to downstream destinations, and used for historical replays. Note: Recommended timestamp for analysis when chronology does matter. originalTimestamp The originalTimestamp tells you when call was invoked on the client device or the value of timestamp that you manually passed in. Note: The originalTimestamp timestamp is not useful for any analysis since it’s not always trustworthy as it can be easily adjusted and affected by clock skew. sentAt The sentAt timestamp specifies the clock time for the client’s device when the network request was made to the Segment API. For libraries and systems that send batched requests, there can be a long gap between a datapoint’s timestamp and sentAt . Combined with receivedAt , Segment uses sentAt to correct the original timestamp in situations where a user’s device clock cannot be trusted (mobile phones and browsers). The sentAt and receivedAt timestamps are assumed to occur at the same time (maximum a few hundred milliseconds), and therefore the difference is the user’s device clock skew, which can be applied back to correct the timestamp . Note: The sentAt timestamp is not useful for any analysis since it’s tainted by user’s clock skew. Segment now adds `sentAt` to a payload when the batch is complete and initially tried to the Segment API for the Swift, Kotlin, and C# mobile libraries This update changes the value of the Segment-calculated timestamp to align closer with the receivedAt value rather than the originalTimestamp value. For most users who are online when events are sent, this does not significantly impact their data. However, if your application utilizes an offline mode where events are queued up for any period of time, the timestamp value for those users now more closely reflects when Segment received the events rather than the time they occurred on the users’ devices. receivedAt The receivedAt timestamp is added to incoming messages as soon as they hit the API. It’s used in combination with sentAt to correct clock skew, and also to aid with debugging libraries and systems that deliver events in batches. The receivedAt timestamp is most important as the sort key in Segment’s Warehouses product. Use this for max query speed when retrieving data from your Warehouse. Note: Chronological order of events is not ensured with receivedAt . timestamp The timestamp timestamp specifies when the data point occurred, corrected for client-device clock skew. This is the timestamp that is passed to downstream destinations and used for historical replays. It is important to use this timestamp for importing historical data to the API. If you are using the Segment server Source libraries, or passing calls directly to the HTTP API endpoint, you can manually set the timestamp field. This change updates the originalTimestamp field of the Segment event. If you use a Segment Source in device mode, the library generates timestamp and you cannot manually set one directly in the call payload. Segment calculates timestamp as timestamp = receivedAt - (sentAt - originalTimeStamp) . For client-side tracking it’s possible for the client to spoof the originalTimeStamp , which may result in a calculated timestamp value set in the future. FAQ Why Are Events Received with Timestamps Set in the Past or Future? If you’re using one of Segment’s client-side libraries, please note that several factors can cause timestamp discrepancies in your event data. Overriding Timestamp Value: When a manual timestamp is set in the payload with a date in the past, it can cause events to appear as if they were sent earlier than they actually were. Analytics.js Source with Retries Enabled: The Retries feature supports offline traffic by queuing events in Analytics.js. These events are sent or retried later when an internet connection is available, keeping the original timestamp intact. Mobile App Backgrounded or Closed: If a user closes the app, events may be queued within the app. These queued events won’t be sent until the app is re-opened, potentially in the future, leading to timestamp discrepancies. Inaccurate Browser/Device Clock Settings: Timestamps can be incorrect if the client’s device time is inaccurate, as the originalTimestamp relies on the client device’s clock, which can be manually adjusted. Traffic from Internet Bots: Internet Bots can sometimes send requests with unusual timestamps, either intentionally or due to incorrect settings, leading to discrepancies. This page was last modified: 30 Oct 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Structure Context Context fields automatically collected Integrations Timestamps FAQ Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "model",
      "website",
      "group",
      "retrieving",
      "applied",
      "significantly",
      "meaning",
      "custom",
      "source",
      "database",
      "keeping",
      "filled",
      "pseudo",
      "ff15bc0c20c4aa6cd50854ff165fd265c838e5405bfeb9571066395b8c9da449",
      "title",
      "507f191e810c19729de860ea",
      "easiest",
      "closes",
      "identity",
      "adjusted",
      "absolutely",
      "between",
      "closed",
      "sometimes",
      "fullversionlist",
      "closer",
      "until",
      "adtrackingenabled",
      "historical",
      "documentation",
      "server",
      "timezones",
      "originaltimestamp",
      "calculate",
      "iphone7",
      "new_york",
      "which",
      "improve",
      "specifies",
      "alias",
      "correct",
      "sentat",
      "happened",
      "warehouses",
      "contains",
      "macos",
      "spoof",
      "subsequent",
      "platformversion",
      "include",
      "potentially",
      "7a3cbea0",
      "intended",
      "maguro",
      "content",
      "collects",
      "backgrounded",
      "cannot",
      "useragent",
      "submitted",
      "channel",
      "carrier",
      "individual",
      "correction",
      "every",
      "helpful",
      "collected",
      "warehouse",
      "where",
      "destinations",
      "swift",
      "substitute",
      "creating",
      "batched",
      "email",
      "khtml",
      "online",
      "locale",
      "batches",
      "ensured",
      "trusted",
      "receives",
      "field",
      "calculates",
      "making",
      "cause",
      "track",
      "context",
      "chart",
      "automatically",
      "format",
      "incoming",
      "should",
      "appear",
      "disable",
      "10t04",
      "newsletter",
      "create",
      "mixpanel",
      "clock",
      "apple",
      "value",
      "feedback",
      "corresponding",
      "queued",
      "limits",
      "event",
      "datapoint",
      "assumed",
      "actually",
      "calculated",
      "directly",
      "iphone",
      "traits",
      "specify",
      "provides",
      "query",
      "situations",
      "might",
      "names",
      "analytics",
      "change",
      "customer",
      "useful",
      "97980cfea0067",
      "false",
      "react",
      "bluetooth",
      "accepts",
      "system",
      "mozilla",
      "passing",
      "contain",
      "populated",
      "iphone16",
      "intel",
      "application",
      "provide",
      "traffic",
      "recommended",
      "integrate",
      "screen",
      "using",
      "websites",
      "wow64",
      "europe",
      "related",
      "modified",
      "combination",
      "purposes",
      "utilizes",
      "information",
      "servers",
      "browsers",
      "added",
      "referrer",
      "associate",
      "medium",
      "data",
      "applies",
      "empty",
      "libraries",
      "later",
      "timestamps",
      "common",
      "github",
      "string",
      "complete",
      "token",
      "12345",
      "assistance",
      "matter",
      "difference",
      "network",
      "build",
      "account",
      "endpoint",
      "object",
      "tried",
      "overriding",
      "implicit",
      "extra",
      "america",
      "brand",
      "method",
      "usually",
      "place",
      "initechglobal",
      "invoked",
      "refer",
      "please",
      "trustworthy",
      "period",
      "identify",
      "containing",
      "since",
      "aides",
      "timezone",
      "required",
      "defaulted",
      "academy",
      "logged",
      "either",
      "leading",
      "aa07a5b093db",
      "level",
      "retried",
      "across",
      "api",
      "kotlin",
      "parameter",
      "tools",
      "manually",
      "innovation",
      "analysis",
      "supports",
      "addresses",
      "uafullversion",
      "applewebkit",
      "visit",
      "strict",
      "reports",
      "order",
      "methods",
      "leave",
      "messageid",
      "identifier",
      "following",
      "there",
      "milliseconds",
      "exactly",
      "about",
      "integrations",
      "problems",
      "agent",
      "hints",
      "possible",
      "correspond",
      "within",
      "variables",
      "rather",
      "affected",
      "feature",
      "speed",
      "initially",
      "tzdata",
      "number",
      "however",
      "gecko",
      "specific",
      "tainted",
      "macintosh",
      "messages",
      "product",
      "below",
      "different",
      "replays",
      "batch",
      "events",
      "relies",
      "without",
      "platform",
      "populates",
      "native",
      "message",
      "itself",
      "receivedat",
      "therefore",
      "android",
      "update",
      "phones",
      "earlier",
      "formula",
      "destination",
      "importing",
      "included",
      "append",
      "factors",
      "whether",
      "originated",
      "width",
      "attribute",
      "address",
      "bitness",
      "browser",
      "would",
      "detail",
      "downstream",
      "optional",
      "point",
      "intact",
      "timestamp",
      "operating",
      "enable",
      "connection",
      "chronological",
      "density",
      "company",
      "beyond",
      "debugging",
      "enabled",
      "sending",
      "mechanical",
      "device",
      "internet",
      "accept",
      "special",
      "unique",
      "dataxu",
      "salesforce",
      "https",
      "manual",
      "google",
      "thanks",
      "anonymousid",
      "amsterdam",
      "mobile",
      "chronology",
      "retries",
      "align",
      "engage",
      "changes",
      "intentionally",
      "result",
      "doesn",
      "stripped",
      "brands",
      "utilize",
      "manufacturer",
      "userid",
      "referred",
      "offline",
      "received",
      "access",
      "updates",
      "10_15_7",
      "specialized",
      "check",
      "plugin",
      "incorrect",
      "fields",
      "chrome",
      "boolean",
      "because",
      "opened",
      "other",
      "library",
      "growth",
      "limited",
      "defaults",
      "previous",
      "generates",
      "devices",
      "available",
      "search",
      "campaign",
      "systems",
      "client",
      "through",
      "example",
      "unusual",
      "resulted",
      "request",
      "requests",
      "overview",
      "segment",
      "groupid",
      "combined",
      "b5372db0",
      "advertisingid",
      "success",
      "timestamping",
      "maximum",
      "contact",
      "hundred",
      "corrected",
      "report",
      "identities",
      "important",
      "payload",
      "structure",
      "university",
      "describe",
      "those",
      "current",
      "these",
      "chromium",
      "occur",
      "occurred",
      "started",
      "namespace",
      "settings",
      "useragentdata",
      "instead",
      "cases",
      "original",
      "always",
      "reflects",
      "description",
      "calls",
      "their",
      "passed",
      "impact",
      "discrepancies",
      "strings",
      "characters",
      "image",
      "version",
      "collecting",
      "support",
      "dictionary",
      "plugins",
      "tracking",
      "shows",
      "safari",
      "active",
      "abcd582cdeffff01919",
      "deliver",
      "requested",
      "inaccurate",
      "found",
      "connections",
      "cellular",
      "relied",
      "tells",
      "closely",
      "questions",
      "easily",
      "height",
      "parameters",
      "collect",
      "users",
      "several",
      "future",
      "queuing",
      "production",
      "022bb90c",
      "details"
    ],
    "howto_steps": [
      "✅ ✅ ✅ locale ✅ ✅ ✅ network.bluetooth ✅ network.carrier ✅ ✅ network.cellular ✅ ✅ network.wifi ✅ ✅ os.name ✅ ✅ os.version ✅ ✅ page.path ✅ page.referrer ✅ page.search ✅ page.title ✅ page.url ✅ screen.density ✅ screen.height ✅ ✅ screen.width ✅ ✅ traits ✅ ✅ userAgent ✅ ✅ userAgentData",
      "✅ timezone ✅ ✅ ✅ IP Address isn’t collected by Segment’s libraries, but is instead filled in by Segment’s servers when it receives a message for client side events only . IPv6 Segment doesn’t support automatically collecting IPv6 addresses. The Android library collects screen.density with this method . userAgentData is only collected if the Client Hints API is available on the browser. Segment doesn’t collect or append to the context of subsequent calls in the new mobile libraries (Swift, Kotlin, and React Native). To pass the context variables which are not automatically collected by Segment’s libraries, you must manually include them in the event payload. The following code shows how to pass groupId as the context field of Analytics.js’s .track() event: analytics . track ( \" Report Submitted \" , {}, { context : { groupId : \" 1234 \" } }); To add fields to the context object in the new mobile libraries, you must utilize a custom plugin. Documentation for creating plugins for each library can be found here: React Native Swift Kotlin Integrations A dictionary of destination names that the message should be sent to. 'All' is a special key that applies when no key for a specific destination is found. Integrations defaults to the following: { All : true , Salesforce : false , } This is because Salesforce has strict limits on API calls. Sending data to the rest of Segment’s destinations is opt",
      "( sentAt",
      "originalTimestamp ) Used by Segment to send to downstream destinations, and used for historical replays. Note: Recommended timestamp for analysis when chronology does matter. originalTimestamp The originalTimestamp tells you when call was invoked on the client device or the value of timestamp that you manually passed in. Note: The originalTimestamp timestamp is not useful for any analysis since it’s not always trustworthy as it can be easily adjusted and affected by clock skew. sentAt The sentAt timestamp specifies the clock time for the client’s device when the network request was made to the Segment API. For libraries and systems that send batched requests, there can be a long gap between a datapoint’s timestamp and sentAt . Combined with receivedAt , Segment uses sentAt to correct the original timestamp in situations where a user’s device clock cannot be trusted (mobile phones and browsers). The sentAt and receivedAt timestamps are assumed to occur at the same time (maximum a few hundred milliseconds), and therefore the difference is the user’s device clock skew, which can be applied back to correct the timestamp . Note: The sentAt timestamp is not useful for any analysis since it’s tainted by user’s clock skew. Segment now adds `sentAt` to a payload when the batch is complete and initially tried to the Segment API for the Swift, Kotlin, and C# mobile libraries This update changes the value of the Segment",
      "(sentAt",
      "originalTimeStamp) . For client"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/",
    "title": " Analytics.js Source | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Libraries / Website / Analytics.js Source Analytics.js Source Community x Maintenance x Flagship ✓ ? Flagship libraries offer the most up-to-date functionality on Segment’s most popular platforms. Segment actively maintains flagship libraries, which benefit from new feature releases and ongoing development and support. On this page Getting started Benefits of Analytics.js Basic tracking methods Utility methods Managing data flow with the Integrations object Retries Batching Plugins and source middleware Video player plugins Cross-subdomain analytics UTM Tracking Analytics.js performance Tracking Blockers and Browser Privacy Settings Installing the library under a custom global namespace Add destinations from npm Segment Inspector Example uses External dependencies Analytics.js enables you to send your data to hundreds of destination tools without having to learn, test, or use a new API every time. Segment’s Analytics.js library is fully open-source and can be viewed on GitHub . Getting started Use the Analytics.js QuickStart Guide to learn how to add Analytics.js to your site. Once you’ve installed the library, read on for the detailed API reference. Benefits of Analytics.js Analytics.js provides two key benefits over the previous version. Performance Analytics.js reduces page load time and improves site performance. Its package size is ~70% smaller than its predecessor, the classic version of Analytics.js. Many factors impact page load time, including network conditions, hosting locations, and page weight. Page weight for each customer integration varies based on the number of device-mode destinations that are enabled for each source. The more device-mode destinations that are enabled, the more data gets added to the library, which will impact the weight of the library. Developer experience Analytics.js improves developer experience by introducing new ways for developers to augment events throughout the event timeline. For example, developers can augment events either before or after an event occurs, or while the event is in-flight. For example, you can use Analytics.js to build features that: Ensure you have user consent to track before an event fires Enrich events with customer or page context while in-flight with middleware Check an event for errors after the event is sent to Segment Basic tracking methods The basic tracking methods below serve as the building blocks of your Segment tracking. They include Identify , Track , Page , Group , and Alias . These methods correspond with those used in the Segment Spec . The documentation on this page explains how to use these methods in Analytics.js. Good to know For any of the methods described in this page, you can replace the properties in the code samples with variables that represent the data collected. Identify Use the identify method to link your users and their actions, to a recognizable userId and traits . You can see an identify example in the Quickstart guide or find details on the identify method payload . `identify` and anonymous visitors Segment recommends against using identify for anonymous visitors to your site. Analytics.js automatically retrieves an anonymousId from localStorage or assigns one for new visitors, and then attaches it to all page and track events both before and after an identify . The Identify method follows the format below: analytics . identify ([ userId ], [ traits ], [ options ], [ callback ]); The Identify call has the following fields: Field Type Description userId optional String The database ID for the user. If you don’t know who the user is yet, you can omit the userId and just record traits . You can read more about identities in the identify reference . traits optional Object A dictionary of traits you know about the user, like email or name . You can read more about traits in the identify reference . options optional Object A dictionary of options. For example, enable or disable specific destinations for the call. Note: If you do not pass a traits object, pass an empty object (as an ‘{}’) before options . callback optional Function A function executed after a timeout of 300 ms, giving the browser time to make outbound requests first. By default, Analytics.js caches traits in the browser’s localStorage and attaches them to each Identify call. For example, you might call Identify when someone signs up for a newsletter but hasn’t yet created an account on your site. The example below shows an Identify call (using hard-coded traits) that you might send in this case. analytics . identify ({ nickname : ' Amazing Grace ' , favoriteCompiler : ' A-0 ' , industry : ' Computer Science ' }); Then, when the user completes the sign up process, you might see the following: analytics . identify ( ' 12091906-01011992 ' , { name : ' Grace Hopper ' , email : ' grace@usnavy.gov ' }); The traits object for the second call also includes nickname , favoriteCompiler , and industry . You may omit both traits and options, and pass the callback as the second argument. analytics . identify ( ' 12091906-01011992 ' , function (){ // Do something after the identify request has been sent // Note: site-critical functionality should not depend on your analytics provider }); Track The Track method lets you record actions your users perform. You can see a track example in the Quickstart guide or find details on the track method payload . The Track method follows the format below: analytics . track ( event , [ properties ], [ options ], [ callback ]); The track call has the following fields: Field Type Description event String The name of the event you’re tracking. You can read more about the track method and recommended event names. properties Object Optional. A dictionary of properties for the event. If the event was 'Added to Cart' , it might have properties like price and productType . options Object Optional. A dictionary of options. For example, enable or disable specific destinations for the call. Note: If you do not pass a properties object, pass an empty object (like ‘{}’) before options . callback Function Optional. A function that runs after a timeout of 300 ms, giving the browser time to make outbound requests first. The only required argument in Analytics.js is an event name string . You can read more about how Segment recommends you name events . Example Track call: analytics . track ( ' Article Completed ' , { title : ' How to Create a Tracking Plan ' , course : ' Intro to Analytics ' , }); For more information about choosing which events to track, event naming, and more, check out Analytics Academy . The only required argument on Track calls in Analytics.js is an event name string. Read more about how Segment recommends naming your events . Track link trackLink is a helper method that attaches the track call as a handler to a link.\nWith trackLink , Analytics.js inserts a timeout of 300 ms to give the track call more time. This is useful when a page would redirect before the track method could complete all requests. The trackLink method follows the format below. analytics . trackLink ( element , event , [ properties ]) Field Type Description element(s) Element or Array DOM element to bind with track method. You may pass an array of elements or jQuery objects. Note: This must be an element, not a CSS selector. event String or Function The name of the event, passed to the track method. Or a function that returns a string to use as the name of the track event. properties optional Object or Function A dictionary of properties to pass with the track method or a function that returns an object to use as the properties of the event. Example: var link = document . getElementById ( ' free-trial-link ' ); analytics . trackLink ( link , ' Clicked Free-Trial Link ' , { plan : ' Enterprise ' }); Track form trackForm is a helper method that binds a track call to a form submission.\nThe trackForm method inserts a timeout of 300 ms to give the track call more time to complete. This is useful to prevent a page from redirecting before the track method could complete all requests. The trackForm method follows the format below. analytics . trackForm ( form , event , [ properties ]) Field Type Description form(s) Element or Array The form element to track or an array of form elements or jQuery objects. Note: trackForm takes an element, not a CSS selector. Segment recommends that you wait until the DOM loads before passing the form element. event String or Function The name of the event, passed to the track method. Or a function that returns a string to use as the name of the track event. properties optional Object or Function A dictionary of properties to pass with the track method. Or a function that returns an object to use as the properties of the event. Example: var form = document . getElementById ( ' signup-form ' ); analytics . trackForm ( form , ' Signed Up ' , { plan : ' Premium ' , revenue : 99.00 }); Page The Page method lets you record page views on your website, along with optional extra information about the page viewed by the user. Because some Destinations require a page call to instantiate their libraries, you must call page at least once per page load. You can call it more than once if needed, for example, on virtual page changes in a single page app. See the implementation guide for more information about calling the Page method . Analytics.js includes a Page call by default as the final line in the Analytics.js snippet . You can update this page call within the guidelines below. The page method follows the format below. analytics . page ([ category ], [ name ], [ properties ], [ options ], [ callback ]); The page call has the following fields: Field Type Description category optional String The category of the page. Useful for cases like ecommerce where many pages might live under a single category. Note: if you pass only one string to page it is assumed to be name . You must include a name to send a category . name optional String The name of the page. properties optional Object A dictionary of properties of the page. Note: Analytics.js collects url , title , referrer and path are automatically. This defaults to a canonical url , if available, and falls back to document.location.href . options optional Object A dictionary of options. For example, enable or disable specific destinations for the call. Note: If you do not pass a properties object, pass an empty object (like ‘{}’) before options . callback optional Function A function that runs after a timeout of 300 ms, giving the browser time to make outbound requests first. However, this function might not execute if one of the device-mode libraries has been blocked from loading. Default page properties Analytics.js adds properties to each page call. analytics . page ( ' Pricing ' ); Segment adds the following information: analytics . page ( ' Pricing ' , { title : ' Segment Pricing ' , url : ' https://segment.com/pricing ' , path : ' /pricing ' , referrer : ' https://segment.com/warehouses ' }); You can override these values by explicitly setting them in your calls. For example: analytics . page ( ' Pricing ' , { title : ' My Overridden Title ' , path : ' /pricing/view ' }); Translates to: analytics . page ( ' Pricing ' , { title : ' My Overridden Title ' , url : ' https://segment.com/pricing ' , path : ' /pricing/view ' , referrer : ' https://segment.com/warehouses ' }); Segment sets the path and url property to the value of the canonical element on your page. If a canonical element is not set, the values will be set from the browser. Group The Group method associates an identified user with a company, organization, project, workspace, team, tribe, platoon, assemblage, cluster, troop, gang, party, society or any other collective noun you come up with for the same concept. This is useful for tools like Intercom , Preact , and Totango , as it ties the user to a group of other users. The Group method follows the format below. analytics . group ( groupId , [ traits ], [ options ], [ callback ]); The Group call has the following fields: Field Type Description groupId String The Group ID to associate with the current user. traits optional Object A dictionary of traits for the group. Example traits for a group include address , website , and employees . options optional Object A dictionary of options. For example, enable or disable specific destinations for the call. Note: If you do not pass a properties object, pass an empty object (like ‘{}’) before options . callback optional Function A function that runs after a timeout of 300 ms, giving the browser time to make outbound requests first. Example group call: analytics . group ( ' UNIVAC Working Group ' , { principles : [ ' Eckert ' , ' Mauchly ' ], site : ' Eckert–Mauchly Computer Corporation ' , statedGoals : ' Develop the first commercial computer ' , industry : ' Technology ' }); By default, Analytics.js caches group traits in the browser’s local storage and attaches them to each group call, similar to how the identify method works. Find more details about group , including the group payload, in the Group Spec . Alias The Alias method combines two unassociated user identities. Segment usually handles aliasing automatically when you call identify on a user, however some tools require an explicit alias call. This is an advanced method, but it’s required to manage user identities successfully in some Segment destinations like Kissmetrics and Mixpanel . The Alias method follows the format below: analytics . alias ( userId , [ previousId ], [ options ], [ callback ]); The Alias call has the following fields: Field Type Description userId String The new user ID you want to associate with the user. previousId optional String The previous ID that the user was recognized by. This defaults to the currently identified user’s ID. options optional Object A dictionary of options. For example, enable or disable specific destinations for the call. callback optional Function A function that is executed after a timeout of 300 ms, giving the browser time to make outbound requests first. For more details about Alias, including the alias call payload , check out the Segment Spec . Utility methods The Analytics.js utility methods help you change how Segment loads on your page. They include: Load Ready Debug On (Emitter) Timeout Reset (Logout) Keepalive Load The load method is also available when you load analytics.js through the NPM package . You can load a buffered version of analytics.js that requires you to call load explicitly before analytics.js initiates any network activity. This is useful if you want to, for example, wait for user consent before you fetch tracking destinations or send buffered events to Segment. Call load one time only. export const analytics = new AnalyticsBrowser () analytics . identify ( \" hello world \" ) if ( userConsentsToBeingTracked ) { analytics . load ({ writeKey : ' <YOUR_WRITE_KEY> ' }) // destinations loaded, enqueued events are flushed } You can also use load if you fetch some settings asynchronously. const analytics = new AnalyticsBrowser () fetchWriteKey (). then ( writeKey => analytics . load ({ writeKey })) analytics . identify ( \" hello world \" ) Ready The ready method lets you pass in a method that gets called after Analytics.js finishes initializing and after all enabled device-mode destinations load. It’s like jQuery’s ready method , except for Destinations. Because it doesn’t fire until all enabled device-mode destinations are loaded, it can’t be used to change configuration options for downstream SDKs. That can only be done if the SDK is loaded natively. The ready method isn’t invoked if any Destination throws an error (for example, for an expired API key, incorrect settings configuration, or when a Destination is blocked by the browser) during initialization. If you want to check when Analytics.js has loaded, you can look at the value of window.analytics.initialized . When it’s true, the library has successfully initialized, even if some destinations are blocked. Note : window.analytics.initialized is a simple boolean, not an event or a pub/sub system. This means you can’t subscribe to changes in its value. If you need to detect when it changes from false to true , you must set up a polling mechanism to monitor the value. The code in the ready function only executes after ready is emitted. If you want to access end-tool library methods that do not match any Analytics.js methods, like adding an extra setting to Mixpanel, you can use a ready callback so that you’re guaranteed to have access to the Mixpanel object, like so: analytics . ready ( function () { window . mixpanel . set_config ({ verbose : true }); }); The ready method uses the following format: analytics . ready ( callback ); The ready method has the following fields: Field Type Description callback Function A function to be executed after all enabled destinations have loaded. Debug Calling the debug method turns on debug mode, which logs helpful messages to the console. Subsequent Segment events generate messages in the developer console after you invoke debug . Enable: analytics . debug ( true ); Disable: analytics . debug ( false ); Emitter The global analytics object emits events whenever you call alias , group , identify , track , or page . Use the on method to set listeners for these events and run your own custom code. This can be useful if you want to send data to a service for which Segment doesn’t have a destination. analytics . on ( method , callback ); Field Type Description method String Name of the method to listen for. callback Function A function to execute after each emitted method, taking three arguments: event , properties , options . Example: analytics . on ( ' track ' , function ( event , properties , options ) { bigdataTool . push ([ ' recordEvent ' , event ]); }); This method emits events before they are processed by the Segment integration, and may not include some of the normalization Segment performs on the client before sending the data to the Segment servers. Note Page event properties are stored in the options object. Extending timeout The timeout method sets the length (in milliseconds) of callbacks and helper functions. This is useful if you have multiple scripts that need to fire in your callback or trackLink , trackForm helper function. The example below sets the timeout to 500 ms. analytics . timeout ( 500 ); If you’re triggering ad network conversion pixels, Segment recommends extending timeout to 500 ms to account for slow load times. Reset or log out Calling reset resets the id , including anonymousId , and clears traits for the currently identified user and group. analytics . reset (); The reset method only clears the cookies and localStorage created by Segment. It doesn’t clear data from other integrated tools, as those native libraries might set their own cookies to manage user tracking, sessions, and manage state. To completely clear out the user session, see the documentation provided by those tools. Segment doesn’t share localStorage across subdomains. If you use Segment tracking on multiple subdomains, you must call analytics.reset() for each subdomain to completely clear out the user session. Keepalive You can utilize this in instances where an API call fires on a hard redirect, and are missed from getting captured in Segment. If you set this flag to true, it enables firing the event before the redirect. This is available for all events. You can read more about this in the Github PR . Managing data flow with the Integrations object Tip : You can change how your data flows in several different ways without having to change your code. See Filtering Data to learn more. You can pass an integrations object in the options of Alias, Group, Identify, Page, and Track methods to send data to only the selected destinations. By default, all Destinations are enabled. The example below sends a message only to Intercom and Google Analytics. analytics . identify ( ' user_123 ' , { email : ' jane.kim@example.com ' , name : ' Jane Kim ' }, { integrations : { ' All ' : false , ' Intercom ' : true , ' Google Analytics ' : true } }); 'All': false tells Segment not to send data to any Destinations by default, unless they’re explicitly listed as true in the next lines. As an opposite example, the snippet below sends a message to all integrations except Intercom and Google Analytics. analytics . identify ( ' user_123 ' , { email : ' jane.kim@example.com ' , name : ' Jane Kim ' }, { integrations : { ' Intercom ' : false , ' Google Analytics ' : false } }); You don’t need to include 'All': true in this call because it’s implied as the default behavior. Instead, only list the destinations that you want to exclude, with a false flag for each. Destination flags are case sensitive and match the destination’s name in the docs (for example, “AdLearn Open Platform”, “awe.sm”, “Mailchimp”, etc). If a Destination has more than one acceptable name, this appears in the documentation for that destination. Business tier customers can filter Track calls from the Source Schema page in the Segment UI. Segment recommends that you use the UI to simplify filter management and make updates without changing your site’s code. Load options Note: To use this feature, you must be on snippet version 4.1.0 or later. You can get the latest version of the snippet from the Analytics.js Quickstart . You can modify the .load method in Analytics.js (the second line of the snippet) to take a second argument. If you pass an object with an integrations dictionary, then Segment only loads the integrations in that dictionary that are marked as enabled with the boolean value true . You can only call .load on page load, or reload (refresh). If you modify the .load method between page loads, it doesn’t have any effect until the page is reloaded. For example: analytics . load ( ' writekey ' , { integrations : { All : false , ' Google Analytics ' : true , ' Segment.io ' : true } }) This way, you can conditionally load integrations based on what customers opt into on your site. The example below shows how you might load only the tools that the user agreed to use. onConsentDialogClosed ( function ( consentedTools ){ analytics . load ( ' writekey ' , { integrations : consentedTools }) }) Bundle obfuscation You can also add an obfuscate property to the object in the second parameter, which obscures the URL from which your integrations and destination actions are loaded. This helps prevent words that are flagged by ad blockers to not be detected in your URL, enabling the integration to properly load. For example: analytics . load ( ' writekey ' , { obfuscate : true }) The obfuscate value is false by default. ISO string conversion By default, the Analytics.js library will convert ISO8061 strings to a Date object before passing it to downstream device-mode integrations. If you would like to disable this functionality and send those strings as they are passed to the event, you can use the load method to pass in the disableAutoISOConversion option. For example: analytics . load ( ' writekey ' , { disableAutoISOConversion : true }) Client hints Some userAgent strings are frozen and contain less information. If you would like to request more information when it’s available, you can pass an array of strings with fields you would like to request to the highEntropyValuesClientHints option. The example array below contains all possible values. For example: analytics . load ( ' writekey ' , { highEntropyValuesClientHints : [ ' architecture ' , ' bitness ' , ' model ' , ' platformVersion ' , ' uaFullVersion ' , ' fullVersionList ' , ' wow64 ' ] }) Disabling For testing or staging environments, it can be useful to disable your SDK to ensure no events send. If disable: true is passed, all analytics method calls will be a no-op, and no network calls will be initiated. analytics . load ( ' writekey ' , { disable : true }) For wrapper/plugin authors: if you have a use case where you need special access to the CDN Settings (for example, consent management), you can also pass a function. This API waits for cdnSettings to be fetched. Keep in mind that cdnSettings is an unstable object. analytics . load ( ' writekey ' , { disable : ( cdnSettings ) => true }) Retries When enabled, Analytics.js automatically retries network and server errors. With persistent retries, Analytics.js can: Support offline tracking . Analytics.js queues your events and delivers them when the user comes back online. Better handle network issues . When your application can’t connect to the Segment API, Segment continues to store the events on the browser to prevent data loss. Analytics.js stores events in localStorage and falls back to in-memory storage when localStorage is unavailable. It retries up to 10 times with an incrementally increasing back-off time between each retry. Analytics.js queues up to 100 events at a time to avoid using too much of the device’s local storage. See the destination Retries documentation to learn more. Batching Batching is the ability to group multiple requests or calls into one request or API call. All requests sent within the same batch have the same receivedAt time. With Analytics.js, you can send events to Segment in batches. Sending events in batches enables you to have: Delivery of multiple events with fewer API calls Fewer errors if a connection is lost because an entire batch will retry at once rather than multiple calls retrying at random times. Setup You can start batching by changing the strategy to \"batching\" and the parameters for size and timeout within the load method in the analytics object. Batching requires both parameters. analytics . load ( \" <write_key> \" , { integrations : { \" Segment.io \" : { deliveryStrategy : { strategy : \" batching \" , config : { size : 10 , timeout : 5000 } } } } }); You can check to see if batching works by checking your source’s debugger in Sources > Debugger . When you select an event and view the Raw code, the receivedAt time of all the events in the batch should be the same. Batch size The batch size is the threshold that forces all batched events to be sent once it’s reached. For example, size: 10 means that after triggering 10 events, Analytics.js sends those 10 events together as a batch to Segment. Your total batched events can’t exceed the maximum payload size of 500 KB, with a limit of 32 KB for each event in the batch. If the 500 KB limit is reached, the batch will be split. Timeout timeout is the number of milliseconds that forces all events queued for batching to be sent, regardless of the batch size, once it’s reached. For example, timeout: 5000 sends every event in the batch to Segment once 5 seconds passes. Batching FAQs Will Analytics.js deliver events that are in the queue when a user closes the browser? Analytics.js does its best to deliver the queued events before the browser closes, but the delivery isn’t guaranteed. Upon receiving the beforeunload browser event, Analytics.js attempts to flush the queue using fetch requests with keepalive set to true. Since the max size of keepalive payloads is limited to 64 KB, if the queue size is bigger than 64 KB at the time the browser closes, then there is a chance of losing a subset of the queued events. Reducing the batch size or timeout will alleviate this issue, but that will be a trade-off decision. Can other destinations receive batched events? No, this batching only impacts events sent to Segment. Once the batch reaches Segment, it’s split up and follows the normal path of an event. Will batching impact billing or throughput? No, batching won’t impact billing or throughput. Can I use batching with partner integrations? Partner integrations don’t support batching as all other partner integrations run one event at a time. Only Segment.io events support batched delivery. Does batching work on all browsers? Batching won’t work on Internet Explorer. If a source has retry enabled, does the retry behavior change when using batching? Batching delays retries, as events that are queued for batching aren’t retried until a batch delivery fails. When using Middlewares as a source and destination, is there a change in behavior when using batching? No, there is no change in behavior to Middlewares. When using Segment features (Schema filtering, integrations object, Protocols) to filter events from going to destinations (device and cloud-mode), will batching impact the filtering of events? No, there is no impact to how events filter. Plugins and source middleware When you develop against Analytics 2.0, the plugins you write can augment functionality, enrich data, and control the flow and delivery of events. From modifying event payloads to changing analytics functionality, plugins and middleware help to speed up the process of getting things done. Plugins and source middleware accomplish the same thing, but plugins are significantly more powerful (but more verbose to implement). For basic use cases like adding event fields or dropping specific events, use source middleware . If you need more granular control of the lifecycle, or want to be able to abort the Segment initialization, you should use plugins . Source Middleware Source middleware runs before any other plugins. You can use this to enrich or drop an event. Example usage of addSourceMiddleware Here are some examples of using addSourceMiddleware for enrichment and validation. Enrichment analytics . addSourceMiddleware (({ payload , next }) => { const { event } = payload . obj . context if ( event . type === ' track ' ) { event . event . toLowerCase () } next ( payload ) }); Validation analytics . addSourceMiddleware (({ payload , next }) => { const { event } = payload . obj . context if ( ! isValid ( event )) { return null // event is dropped } next ( payload ) }); Advanced Plugin API For advanced modification to the event pipeline. Type Details before Executes before event processing begins. These are plugins that run before any other plugins run. Thrown errors here can block the event pipeline. Source middleware added via addSourceMiddleware is treated as a before plugin. enrichment Executes as the first level of event processing. These plugins modify an event. Thrown errors here can block the event pipeline. destination Executes as events begin to pass off to destinations. Segment.io is implemented as a destination plugin. Thrown errors here will not block the event pipeline. after Executes after all event processing completes. You can use this to perform cleanup operations. utility Executes only once during the analytics.js bootstrap. Gives you access to the analytics instance via the plugin’s load() method. This doesn’t allow you to modify events. Example plugins Here’s an example of a plugin that converts all track event names to lowercase before the event goes through the rest of the pipeline: export const lowercase : Plugin = { name : ' Lowercase events ' , type : ' enrichment ' , version : ' 1.0.0 ' , isLoaded : () => true , load : () => Promise . resolve (), track : ( ctx ) => { ctx . updateEvent ( ' event ' , ctx . event . event . toLowerCase ()) return ctx } } const identityStitching = () => { let user const identity = { // Identifies your plugin in the Plugins stack. // Access `window.analytics.queue.plugins` to see the full list of plugins name : ' Identity Stitching ' , // Defines where in the event timeline a plugin should run type : ' enrichment ' , version : ' 0.1.0 ' , // use the `load` hook to bootstrap your plugin // The load hook will receive a context object as its first argument // followed by a reference to the analytics.js instance from the page load : async ( _ctx , ajs ) => { user = ajs . user () }, // Used to signal that a plugin has been property loaded isLoaded : () => user !== undefined , // Applies the plugin code to every `identify` call in Analytics.js // You can override any of the existing types in the Segment Spec. async identify ( ctx ) { // Request some extra info to enrich your `identify` events from // an external API. const req = await fetch ( `https://jsonplaceholder.typicode.com/users/ ${ ctx . event . userId } ` ) const userReq = await req . json () // ctx.updateEvent can be used to update deeply nested properties // in your events. It's a safe way to change events as it'll //  create any missing objects and properties you may require. ctx . updateEvent ( ' traits.custom ' , userReq ) user . traits ( userReq ) // Every plugin must return a `ctx` object, so that the event // timeline can continue processing. return ctx }, } return identity } // Registers Segment's new plugin into Analytics.js await window . analytics . register ( identityStitching ()) Here’s an example of a utility plugin that allows you to change the format of the anonymous_id cookie: window . analytics . ready (() => { window . analytics . register ({ name : ' Cookie Compatibility ' , version : ' 0.1.0 ' , type : ' utility ' , load : ( _ctx , ajs ) => { const user = ajs . user () const cookieJar = user . cookies const cookieSetter = cookieJar . set . bind ( cookieJar ) // blindly convert any values into JSON strings cookieJar . set = ( key , value , opts ) => cookieSetter ( key , JSON . stringify ( value ), opts ) // stringify any existing IDs user . anonymousId ( user . anonymousId ()) user . id ( user . id ()) }, isLoaded : () => true }) }) You can view Segment’s existing plugins to see more examples. Register a plugin Registering plugins enable you to modify your analytics implementation to best fit your needs. You can register a plugin using this: // A promise will resolve once the plugins have been successfully loaded into Analytics.js // You can register multiple plugins at once by using the variable args interface in Analytics.js await window . analytics . register ( pluginA , pluginB , pluginN ) Video player plugins Segment offers video player ‘plugins’ so you can quickly collect video events using Analytics.js. See the specific documentation below to learn more: YouTube Vimeo Cross-subdomain analytics Analytics.js tracks across subdomains out of the box. All Segment destinations fully support this feature. To track activity on your subdomains, include the Segment Analytics.js snippet on each subdomain. Segment sets users’ anonymousId on the top-level domain, so that users are tracked across any subdomain. Because Segment tracks across subdomains, you can either use the same Segment source, or use separate sources for each subdomain. What you decide depends on your team’s goals for tracking each subdomain. Segment doesn’t offer tracking across top-level domains out of the box. If you want to track across top-level domains, you can utilize Segment’s Querystring API to pass the anonymousId from Website A to Website B in the query string. When a user moves from Website A to Website B with the anonymousId in the query string, Analytics.js reads that value and sets the anonymousId to it, rather than generating a new one. UTM Tracking UTM parameters are only used when linking to your site from outside your domain. When a visitor arrives using a link containing UTM parameters, Segment’s analytics.js library will parse the URL query string and add the information to the event payload. For more information about UTM tracking, see the Tracking Customers Across Channels and Devices documentation. UTM parameters contain three essential components (utm_source, utm_medium, utm_campaign) and two optional (utm_content, utm_term). For example, if you include the following three parameters in your URL: ?utm_source=mysource&utm_medium=email&utm_campaign=mytestcampaign , once a visitor arrives using a link containing the above, Segment automatically grabs the UTM parameters and subsequent events will contain these parameters within the ‘context’ object (visible in the raw view of your Source Debugger.) So, for example, if somebody follows the link with above query string to your site, the subsequent ‘page’ call in your Debugger should contain the below and will be passed to any enabled destinations: \" context \" : { \" campaign \" : { \" medium \" : \" email \" , \" name \" : \" mytestcampaign \" , \" source \" : \" mysource \" , }, Whenever the UTM parameters are no longer a part of the URL, Segment no longer includes them. For example, if the user goes to a new page within your website which does not contain these parameters, they will not be included in subsequent events. UTM parameters are non-persistent by default as they could potentially cause data accuracy problems. Here’s an example of why: Say a user clicks on an ad and lands on your site. He navigates around and bookmarks an internal page - or maybe shares a link with a friend, who shares it with another friend. All those links would then point back to the same test utm_source as the initial referrer for any purchase. Segment doesn’t validate UTM parameter names. This design supports the flexibility to track both standard parameters (for example, utm_source, utm_medium) and custom parameters defined by users. As a result, all parameters present in the URL collected as is, and are added to the context field without checks for naming conventions or validity. If you want to ensure that only standard UTM parameters (such as, utm_source, utm_medium, utm_campaign, utm_content, utm_term) are included in the context.campaign object, you can implement Source middleware in your Analytics.js setup. For example: window . analytics . addSourceMiddleware (({ payload , next }) => { if ( payload . obj . context ?. campaign ) { const allowedFields = [ \" source \" , \" medium \" , \" term \" , \" campaign \" , \" content \" ]; const campaign = payload . obj . context . campaign ; Object . keys ( campaign ). forEach ( key => { if ( ! allowedFields . includes ( key )) { delete campaign [ key ]; } }); } next ( payload ); }); This middleware filters out any non-standard parameters from the context.campaign object before they’re sent to Segment or forwarded to your enabled destinations. Analytics.js performance The Analytics.js library and all Destination libraries are loaded with the HTML script async tag . This also means that Segment fires methods asynchronously, so you should adjust your code accordingly if you require that events be sent from the browser in a specific order. While many tools require access to the DOM or cookies, for the Zendesk, Salesforce, and Mailchimp destinations, Segment doesn’t need to load a native JavaScript library. Instead, Segment’s servers send data to the end-tools. Segment loads the libraries required for your enabled Destinations. When you disable a destination, the custom version of Analytics.js loaded on your site stops requesting that library. Using Analytics.js doesn’t offer a large performance benefit, but is more performant than installing each of the destinations individually. And as more destinations move to accept data directly from Segment, you’ll receive more performance benefits automatically. One option, if you don’t want to use any bundled third-party tools, is to use the Analytics-Node package. Analytics.js doesn’t set third-party cookies and only sets first-party cookies. Bundle size Segment’s Analytics.js JavaScript snippet increases the page size by about 1.1KB. The snippet asynchronously requests and loads a customized JavaScript bundle ( analytics.min.js ), which contains the code and settings needed to load your device-mode destinations . The size of this file changes depending on the number of and which destinations you enable. Without any destinations enabled, the analytics.min.js file is about 62KB. Each time you enable a destination, the file’s size may increase slightly. Cookies set by Analytics.js Segment sets three cookies in general: Cookie Description ajs_anonymous_id An anonymous ID generated by Analytics.js, used for Segment calls. ajs_group_id A group ID that can be specified by making a group() call with Analytics.js. ajs_user_id A user ID that can be specified by making an identify() call with Analytics.js. For Google Chrome, these cookies expire by default one year after the date created. Other supported browsers might have a different expiration time. Some user/group traits are also stored in localStorage : Cookie Description ajs_user_traits The traits that are passed in an identify() call. ajs_group_properties The properties that are passed in a group() call. Note that localStorage variables don’t expire because the browser defines that functionality. Local storage cookies used by Analytics.js Analytics.js uses localstorage cookies if you have retries enabled, to keep track of retry timing. The ack cookie is a timer used to see if another tab should claim the retry queue. The reclaimStart and reclaimEnd cookies determine if a tab takes over the queue from another tab. The inProgress and queue cookies track events in progress, and events queued for retry. For more information, visit the Segment localstorage-retry library . You can set the debug cookie to analytics.js to log debug messages from Analytics.js to the console. Tracking Blockers and Browser Privacy Settings Segment does not endorse bypassing tracking blockers or browser privacy settings for client-side tracking. Your users have control over what gets loaded on their pages and can use plugins or browser settings to block third-party scripts, including Segment. To minimize client-side data loss, Segment recommends you choose from the following routes: Respect the user’s decision to implement tracking blockers or use privacy settings, knowing that, unfortunately, some data will be lost. Ask the customer to disable the tracking blockers or adjust their privacy settings (for example, in the case of large, corporate customers). Move as many events and tracking actions as possible to a server-side library, which won’t encounter the same limitations. To minimize client-side data loss, Segment provides a few workarounds. However, it’s important to note that Segment cannot guarantee their effectiveness. Use the bundle obfuscation feature. You can add an obfuscate property to the object in the second parameter, which obscures the URL from which your integrations and destination actions are loaded. This helps prevent words that are flagged by ad blockers to not be detected in your URL, enabling the integration to properly load. Create a custom proxy . This changes the URL that Segment loads from (cdn.segment.com) and the outgoing requests generated when events are triggered (api.segment.io). Consider implementing the Segment Edge SDK . The Segment Edge SDK leverages Cloudflare Workers to facilitate first-party data collection and real-time user profiling for app personalization. It integrates Segment’s library into web apps, manages user identity via HttpOnly cookies, and employs an internal router for efficient data processing and user experience customization. This innovative approach simplifies tracking and personalization for Segment customers. More information is available in the Edge SDK README . Consider using one of Segment’s server-side libraries . Using a server-side library eliminates concerns about tracking blockers and privacy browsers that can prevent Segment from loading. This option may require additional code to track actions like a Page call, as you now need to manually pass contextual information that would have been automatically collected by Analytics.js, like url , path , and referrer . Note that some destinations are device-mode only. Installing the library under a custom global namespace When you load Analytics.js through snippet code, by default, the SDK installs on window.analytics global variable. If this causes a conflict with another library on your page, you can change the global variable used by Analytics.js if you use snippet version 5.2.1 or later. Change the global variable in the beginning of your snippet code as shown below. In this case, Analytics.js uses window.custom_key to load instead of window.analytics . - !function(){var i=\"analytics\", ...\n  + !function(){var i=\"custom_key\", ... Add destinations from npm Bundle the destinations you want loaded from npm instead of having them loaded from a remote CDN. This enables you to have fewer network requests when adding destinations. To add actions-based destinations from npm: import vwo from ' @segment/analytics-browser-actions-vwo ' import braze from ' @segment/analytics-browser-actions-braze ' const analytics = AnalyticsBrowser . load ({ writeKey : ' <WRITE_KEY> ' , plugins : [ vwo , braze ], }) Pass in the destination plugin to the added config option called plugins .  A list of all action destination packages can be found on GitHub in the @segmentio/action-destinations repository. To add classic destinations from npm: import { AnalyticsBrowser } from ' @segment/analytics-next ' import GoogleAnalyticsIntegration from ' @segment/analytics.js-integration-google-analytics ' // The following example assumes configuration for Google Analytics will be available in the fetched settings const analytics = AnalyticsBrowser . load ({ writeKey : ' <WRITE_KEY> ' , classicIntegrations : [ GoogleAnalyticsIntegration ] }), Segment Inspector The Segment Inspector is a Chrome web extension that enables you to debug your Segment integration on web applications instrumented with Analytics.js. Analytics.js sends data to the extension so that you can see how events change before they’re sent to your destinations and so that you can verify that the event details are correct. The Segment Inspector also lets you analyze and confirm that API calls made from your website arrive to your Analytics.js source. For the Segment inspector to work, you must enable the Analytics.js source. To add the Segment Inspector as a Chrome extension: Go to the Segment Inspector in the Chrome web store . Click Add to Chrome . Click Add Extension in the pop-up window. Once installed, use the Inspect Elements developer tool in Chrome to use the Segment Inspector. To access the Inspector, go to the top menu bar of Chrome and navigate to View > Developer > Developer Tools and go to the Segment tab. On the Segment tab, you can: Filter the different calls by type Search based off of the content in the calls Identify users Components of the Segment Inspector The Segment Inspector is composed of these three components: The Diagnostics tab This tab shows the library versions and the list of active integrations that are running. When you select an integration, you can see the options that passed while the integration loads. If you made any local overrides within the integration or on the page itself, they appear highlighted in the code. The Events tab This tab enables you to select an event and see the specific details of the event. You can view the time the event occurred, the status of the event (whether it sent or failed), what plugins were added, and how the context object changed. Any changes made to the payload appear highlighted. Select the double-checked icon to see the payload at the delivery stage. Select the fx icon to see the payloads after plugins ran. Select the single-checked icon to see the payload as it was when the event triggered. The Identity tab This tab enables you to see the information of a user if you’re using the identify feature. You can associate the data to an individual and measure their activity across multiple sessions and devices. This tab only shows the user’s traits that are on the client. If you’re not using the identify feature, the user remains anonymous. Example uses Here are some examples of using Analytics.js. Note that the examples assume Analytics.js is installed through npm . Next.js with-segment-analytics with-segment-analytics-pages-router Vanilla React, Vue See Usage in Common Frameworks & SPAs External dependencies Analytics.js production dependencies are listed under the dependencies key . This page was last modified: 17 Dec 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting started Benefits of Analytics.js Basic tracking methods Utility methods Managing data flow with the Integrations object Retries Batching Plugins and source middleware Video player plugins Cross-subdomain analytics UTM Tracking Analytics.js performance Tracking Blockers and Browser Privacy Settings Installing the library under a custom global namespace Add destinations from npm Segment Inspector Example uses External dependencies Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "classic",
      "working",
      "website",
      "model",
      "canonical",
      "firing",
      "group",
      "javascript",
      "concerns",
      "block",
      "significantly",
      "supported",
      "forwarded",
      "custom",
      "previousid",
      "source",
      "packages",
      "interface",
      "error",
      "database",
      "generating",
      "appears",
      "project",
      "reads",
      "array",
      "dropping",
      "community",
      "title",
      "easiest",
      "closes",
      "addsourcemiddleware",
      "options",
      "utility",
      "identity",
      "between",
      "pluginb",
      "customers",
      "fullversionlist",
      "normal",
      "triggered",
      "wrapper",
      "analyze",
      "until",
      "failed",
      "flagged",
      "implied",
      "router",
      "utm_medium",
      "anonymous",
      "benefits",
      "begins",
      "external",
      "quickstart",
      "documentation",
      "integrated",
      "server",
      "arrive",
      "translates",
      "recordevent",
      "powerful",
      "redirect",
      "category",
      "scripts",
      "which",
      "maybe",
      "state",
      "buffered",
      "entire",
      "remote",
      "onconsentdialogclosed",
      "improve",
      "simple",
      "installing",
      "variable",
      "delays",
      "separate",
      "alias",
      "correct",
      "execute",
      "processed",
      "latest",
      "lifecycle",
      "calling",
      "clears",
      "except",
      "pages",
      "warehouses",
      "getelementbyid",
      "contains",
      "increasing",
      "improves",
      "finishes",
      "subsequent",
      "option",
      "platformversion",
      "implementation",
      "include",
      "potentially",
      "set_config",
      "actively",
      "guarantee",
      "youtube",
      "function",
      "obfuscation",
      "predecessor",
      "errors",
      "const",
      "handles",
      "ongoing",
      "somebody",
      "tracks",
      "collects",
      "content",
      "against",
      "completely",
      "debugger",
      "missing",
      "cookiesetter",
      "increase",
      "takes",
      "useragent",
      "user_123",
      "defines",
      "cannot",
      "cross",
      "causes",
      "identified",
      "individual",
      "goals",
      "beforeunload",
      "every",
      "blocked",
      "authors",
      "impacts",
      "linking",
      "platforms",
      "explicit",
      "helpful",
      "collected",
      "ajs_user_traits",
      "choose",
      "where",
      "activity",
      "destinations",
      "forces",
      "implementing",
      "marked",
      "frozen",
      "manages",
      "eliminates",
      "batched",
      "while",
      "email",
      "moves",
      "collection",
      "recommends",
      "giving",
      "reducing",
      "refresh",
      "article",
      "01011992",
      "online",
      "window",
      "passes",
      "inspect",
      "installs",
      "batches",
      "httponly",
      "dropped",
      "waits",
      "maintains",
      "works",
      "followed",
      "field",
      "making",
      "during",
      "attaches",
      "cause",
      "track",
      "emitted",
      "configuration",
      "grace",
      "pricing",
      "reloaded",
      "queues",
      "context",
      "document",
      "automatically",
      "initialized",
      "hundreds",
      "format",
      "cluster",
      "continue",
      "successfully",
      "development",
      "inspector",
      "agreed",
      "persistent",
      "treated",
      "fires",
      "package",
      "isvalid",
      "should",
      "appear",
      "unassociated",
      "advanced",
      "disable",
      "diagnostics",
      "first",
      "newsletter",
      "video",
      "create",
      "taking",
      "mixpanel",
      "existing",
      "retrieves",
      "value",
      "feedback",
      "write",
      "queued",
      "event",
      "subscribe",
      "total",
      "assumed",
      "reached",
      "pipeline",
      "initiates",
      "threshold",
      "associates",
      "control",
      "12091906",
      "payloads",
      "generated",
      "offers",
      "samples",
      "getting",
      "defined",
      "userreq",
      "directly",
      "objects",
      "record",
      "words",
      "commercial",
      "partner",
      "traits",
      "explorer",
      "provides",
      "query",
      "progress",
      "knowing",
      "determine",
      "troop",
      "keepalive",
      "might",
      "names",
      "ajs_anonymous_id",
      "middlewares",
      "flushed",
      "analytics",
      "change",
      "customer",
      "cloud",
      "useful",
      "natively",
      "false",
      "unavailable",
      "around",
      "clear",
      "react",
      "detected",
      "selected",
      "websites",
      "system",
      "session",
      "properly",
      "standard",
      "ajs_group_id",
      "passing",
      "signed",
      "player",
      "contain",
      "clicks",
      "depend",
      "lowercase",
      "exceed",
      "utm_content",
      "emitter",
      "together",
      "things",
      "bigger",
      "flags",
      "ajs_user_id",
      "decide",
      "compatibility",
      "application",
      "navigates",
      "writekey",
      "someone",
      "instantiate",
      "loaded",
      "retry",
      "retrying",
      "typicode",
      "leverages",
      "profiling",
      "approach",
      "recommended",
      "integrate",
      "using",
      "testing",
      "sources",
      "basic",
      "stringify",
      "wow64",
      "benefit",
      "helper",
      "property",
      "bigdatatool",
      "another",
      "encounter",
      "additional",
      "storage",
      "modified",
      "whenever",
      "share",
      "information",
      "tribe",
      "servers",
      "fetchwritekey",
      "performance",
      "binds",
      "override",
      "browsers",
      "domain",
      "consentedtools",
      "verbose",
      "added",
      "flexibility",
      "components",
      "referrer",
      "store",
      "arguments",
      "explicitly",
      "associate",
      "updateevent",
      "returns",
      "flight",
      "medium",
      "checked",
      "data",
      "favoritecompiler",
      "applies",
      "service",
      "subdomain",
      "localstorage",
      "dependencies",
      "empty",
      "libraries",
      "element",
      "assigns",
      "later",
      "validate",
      "visitor",
      "common",
      "behavior",
      "github",
      "grabs",
      "string",
      "augment",
      "complete",
      "limit",
      "flagship",
      "employees",
      "custom_key",
      "import",
      "single",
      "braze",
      "reclaimend",
      "privacy",
      "trade",
      "identifies",
      "assistance",
      "initializing",
      "proxy",
      "avoid",
      "snippet",
      "popular",
      "depends",
      "network",
      "build",
      "account",
      "computer",
      "better",
      "guaranteed",
      "object",
      "varies",
      "signup",
      "checks",
      "customized",
      "univac",
      "provided",
      "debug",
      "exclude",
      "acceptable",
      "disableautoisoconversion",
      "extra",
      "inserts",
      "consent",
      "method",
      "usually",
      "completed",
      "society",
      "depending",
      "reaches",
      "virtual",
      "executes",
      "workers",
      "nickname",
      "seconds",
      "guide",
      "resolve",
      "stores",
      "invoked",
      "opposite",
      "vanilla",
      "running",
      "multiple",
      "endorse",
      "analyticsbrowser",
      "repository",
      "collective",
      "effect",
      "identify",
      "architecture",
      "conventions",
      "eckert",
      "since",
      "containing",
      "conflict",
      "allows",
      "adlearn",
      "facilitate",
      "vimeo",
      "applications",
      "filters",
      "required",
      "provider",
      "academy",
      "critical",
      "either",
      "cleanup",
      "needs",
      "anonymous_id",
      "properties",
      "retried",
      "level",
      "across",
      "api",
      "strategy",
      "integration",
      "views",
      "cookiejar",
      "going",
      "listed",
      "parameter",
      "tools",
      "manually",
      "fewer",
      "essential",
      "expiration",
      "protocols",
      "bundled",
      "business",
      "register",
      "changed",
      "replace",
      "follows",
      "mailchimp",
      "modifying",
      "specified",
      "prevent",
      "supports",
      "integrates",
      "unless",
      "uafullversion",
      "regardless",
      "issues",
      "async",
      "monitor",
      "expired",
      "incrementally",
      "visit",
      "click",
      "viewed",
      "kissmetrics",
      "mytestcampaign",
      "memory",
      "foreach",
      "emits",
      "lines",
      "order",
      "caches",
      "methods",
      "resets",
      "following",
      "smaller",
      "filter",
      "there",
      "personalization",
      "milliseconds",
      "validity",
      "weight",
      "about",
      "times",
      "stops",
      "integrations",
      "disabling",
      "querystring",
      "mysource",
      "requesting",
      "checking",
      "contextual",
      "under",
      "environments",
      "signs",
      "develop",
      "problems",
      "middleware",
      "three",
      "iso8061",
      "hints",
      "preact",
      "consider",
      "hopper",
      "setting",
      "correspond",
      "tracklink",
      "possible",
      "bundle",
      "extending",
      "requires",
      "within",
      "navigate",
      "measure",
      "reload",
      "variables",
      "flows",
      "introducing",
      "rather",
      "types",
      "feature",
      "loading",
      "speed",
      "assume",
      "number",
      "specific",
      "however",
      "cookies",
      "reclaimstart",
      "tracked",
      "messages",
      "issue",
      "missed",
      "trial",
      "implemented",
      "respect",
      "select",
      "delivery",
      "below",
      "extension",
      "convert",
      "pluginn",
      "friend",
      "completes",
      "functionality",
      "billing",
      "coded",
      "promise",
      "different",
      "batch",
      "least",
      "events",
      "listen",
      "highentropyvaluesclienthints",
      "bypassing",
      "without",
      "platform",
      "channels",
      "accordingly",
      "native",
      "cookie",
      "classicintegrations",
      "premium",
      "flush",
      "registering",
      "building",
      "message",
      "itself",
      "fetch",
      "receivedat",
      "enabling",
      "thing",
      "currently",
      "falls",
      "limitations",
      "similar",
      "batching",
      "update",
      "obscures",
      "routes",
      "losing",
      "modification",
      "stage",
      "thrown",
      "initiated",
      "installed",
      "destination",
      "validation",
      "redirecting",
      "allow",
      "listeners",
      "enrichment",
      "included",
      "shares",
      "connect",
      "factors",
      "allowedfields",
      "hosting",
      "shown",
      "whether",
      "lands",
      "address",
      "bitness",
      "present",
      "random",
      "browser",
      "operations",
      "would",
      "downstream",
      "employs",
      "throughput",
      "third",
      "simplifies",
      "optional",
      "isloaded",
      "point",
      "gives",
      "sessions",
      "enable",
      "increases",
      "bookmarks",
      "registers",
      "trackform",
      "mechanism",
      "pixels",
      "filtering",
      "connection",
      "performant",
      "company",
      "enabled",
      "turns",
      "stitching",
      "minimize",
      "sending",
      "arrives",
      "setup",
      "ensure",
      "simplify",
      "timer",
      "efficient",
      "local",
      "device",
      "internet",
      "individually",
      "includes",
      "party",
      "accept",
      "subdomains",
      "receiving",
      "special",
      "occurs",
      "jsonplaceholder",
      "releases",
      "guidelines",
      "maintenance",
      "course",
      "status",
      "quickly",
      "workspace",
      "salesforce",
      "after",
      "changing",
      "recognized",
      "claim",
      "modify",
      "submission",
      "https",
      "google",
      "thanks",
      "anonymousid",
      "producttype",
      "split",
      "utm_term",
      "timing",
      "mobile",
      "retries",
      "stored",
      "conditionally",
      "expire",
      "adding",
      "needed",
      "changes",
      "concept",
      "ecommerce",
      "blindly",
      "along",
      "normalization",
      "cdnsettings",
      "means",
      "result",
      "schema",
      "doesn",
      "locations",
      "inprogress",
      "readme",
      "argument",
      "mauchly",
      "world",
      "write_key",
      "accomplish",
      "enrich",
      "utilize",
      "beginning",
      "timeout",
      "detailed",
      "performs",
      "perform",
      "fetched",
      "enables",
      "serve",
      "userid",
      "offline",
      "timeline",
      "start",
      "composed",
      "callback",
      "examples",
      "assumes",
      "management",
      "triggering",
      "match",
      "instance",
      "access",
      "amazing",
      "updates",
      "script",
      "versions",
      "generate",
      "check",
      "plugin",
      "obfuscate",
      "converts",
      "features",
      "longer",
      "captured",
      "visible",
      "incorrect",
      "fields",
      "design",
      "double",
      "tolowercase",
      "before",
      "developers",
      "totango",
      "detect",
      "initialization",
      "recognizable",
      "bootstrap",
      "based",
      "statedgoals",
      "chrome",
      "organization",
      "because",
      "boolean",
      "alleviate",
      "identitystitching",
      "initial",
      "outgoing",
      "plugina",
      "fully",
      "library",
      "other",
      "called",
      "growth",
      "limited",
      "googleanalyticsintegration",
      "assemblage",
      "naming",
      "defaults",
      "chance",
      "previous",
      "final",
      "enterprise",
      "require",
      "innovative",
      "devices",
      "available",
      "usnavy",
      "search",
      "aliasing",
      "deliverystrategy",
      "campaign",
      "could",
      "through",
      "client",
      "customization",
      "blocks",
      "sensitive",
      "example",
      "ready",
      "decision",
      "return",
      "handler",
      "catalog",
      "offer",
      "deeply",
      "experience",
      "request",
      "requests",
      "process",
      "helps",
      "links",
      "sends",
      "config",
      "delete",
      "export",
      "segment",
      "cloudflare",
      "hello",
      "effectiveness",
      "platoon",
      "conditions",
      "groupid",
      "second",
      "confirm",
      "reset",
      "unstable",
      "loads",
      "undefined",
      "remains",
      "functions",
      "receive",
      "technology",
      "parse",
      "queue",
      "maximum",
      "invoke",
      "contact",
      "continues",
      "managing",
      "identities",
      "important",
      "console",
      "abort",
      "learn",
      "combines",
      "price",
      "ajs_group_properties",
      "blockers",
      "including",
      "payload",
      "those",
      "executed",
      "userconsentstobeingtracked",
      "implement",
      "highlighted",
      "clicked",
      "elements",
      "these",
      "something",
      "choosing",
      "location",
      "current",
      "started",
      "handle",
      "attempts",
      "outside",
      "unfortunately",
      "namespace",
      "occurred",
      "large",
      "slightly",
      "selector",
      "throughout",
      "processing",
      "corporate",
      "workarounds",
      "settings",
      "revenue",
      "length",
      "utm_source",
      "having",
      "zendesk",
      "instead",
      "cases",
      "visitors",
      "logout",
      "enqueued",
      "description",
      "values",
      "accuracy",
      "calls",
      "signal",
      "segmentio",
      "utm_campaign",
      "their",
      "passed",
      "impact",
      "jquery",
      "strings",
      "ability",
      "throws",
      "created",
      "await",
      "represent",
      "version",
      "industry",
      "support",
      "manage",
      "dictionary",
      "staging",
      "domains",
      "plugins",
      "tracking",
      "purchase",
      "begin",
      "action",
      "instrumented",
      "outbound",
      "conversion",
      "corporation",
      "usage",
      "default",
      "instances",
      "shows",
      "asynchronously",
      "subset",
      "science",
      "reference",
      "described",
      "polling",
      "actions",
      "above",
      "general",
      "active",
      "intro",
      "deliver",
      "delivers",
      "callbacks",
      "comes",
      "internal",
      "found",
      "global",
      "verify",
      "frameworks",
      "connections",
      "principles",
      "reduces",
      "tells",
      "intercom",
      "questions",
      "adjust",
      "explains",
      "parameters",
      "collect",
      "users",
      "overridden",
      "developer",
      "several",
      "granular",
      "your_write_key",
      "stack",
      "nested",
      "fails",
      "production",
      "overrides",
      "details"
    ],
    "howto_steps": [
      "or maybe shares a link with a friend, who shares it with another friend. All those links would then point back to the same test utm_source as the initial referrer for any purchase. Segment doesn’t validate UTM parameter names. This design supports the flexibility to track both standard parameters (for example, utm_source, utm_medium) and custom parameters defined by users. As a result, all parameters present in the URL collected as is, and are added to the context field without checks for naming conventions or validity. If you want to ensure that only standard UTM parameters (such as, utm_source, utm_medium, utm_campaign, utm_content, utm_term) are included in the context.campaign object, you can implement Source middleware in your Analytics.js setup. For example: window . analytics . addSourceMiddleware (({ payload , next }) => { if ( payload . obj . context ?. campaign ) { const allowedFields = [ \" source \" , \" medium \" , \" term \" , \" campaign \" , \" content \" ]; const campaign = payload . obj . context . campaign ; Object . keys ( campaign ). forEach ( key => { if ( ! allowedFields . includes ( key )) { delete campaign [ key ]; } }); } next ( payload ); }); This middleware filters out any non",
      "!function(){var i=\"analytics\", ...\n  + !function(){var i=\"custom_key\", ... Add destinations from npm Bundle the destinations you want loaded from npm instead of having them loaded from a remote CDN. This enables you to have fewer network requests when adding destinations. To add actions"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/privacy/",
    "title": " Privacy Tools Overview | Segment Documentation",
    "platform": "segment",
    "content": "Home / Privacy Tools Overview Privacy Tools Overview On this page Proactively identify PII with the Privacy Portal Prepare for GDPR & CCPA Segment includes a suite of Privacy tools to help your organization comply with regulations like HIPAA, the GDPR, and the CCPA. Proactively identify PII with the Privacy Portal Detect and classify customer data The Privacy Portal helps automate preparing for new privacy regulations. Control what data you collect Take control over whether specific data is allowed to enter Segment Prepare for GDPR & CCPA Understand and Comply with regulations Segment is committed to making it easier for you to comply with the GDPR. Delete and suppress data about end-users Easily remove your company's end-users from Segment and supported connections. This page was last modified: 14 Nov 2022 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Proactively identify PII with the Privacy Portal Prepare for GDPR & CCPA Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "conceptual",
    "keywords": [
      "visit",
      "identify",
      "suite",
      "privacy",
      "whether",
      "easier",
      "these",
      "integrate",
      "assistance",
      "specific",
      "thanks",
      "supported",
      "started",
      "websites",
      "improve",
      "regulations",
      "request",
      "helps",
      "helpful",
      "mobile",
      "comply",
      "detect",
      "overview",
      "modified",
      "portal",
      "account",
      "prepare",
      "analytics",
      "delete",
      "suppress",
      "segment",
      "understand",
      "customer",
      "change",
      "organization",
      "about",
      "hipaa",
      "connections",
      "easiest",
      "company",
      "questions",
      "create",
      "allowed",
      "growth",
      "feedback",
      "tools",
      "data",
      "classify",
      "collect",
      "enter",
      "users",
      "easily",
      "problems",
      "committed",
      "contact",
      "automate",
      "includes",
      "preparing",
      "control",
      "making",
      "proactively",
      "remove",
      "documentation",
      "support"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#tracking-blockers-and-browser-privacy-settings",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/destinations/catalog/salesforce/",
    "title": " Salesforce Destination | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Destinations / Catalog / Salesforce Destination Salesforce Destination On this page Identify Group Trait Validation Custom Actions Troubleshooting Destination Info Accepts Group , and Identify calls Refer to it as Salesforce in the Integrations object Components Server Connection Modes Device-mode Cloud-mode Web Web Mobile Mobile Server Server Deprecation Notice Due to Salesforce retiring certain APIs in the summer of 2025, Segment is deprecating this destination. During the week of April 24, 2023, Segment created an instance of the Salesforce (Actions) destination for each version of the Salesforce classic destination in your workspace. Settings will be migrated automatically, but you must take additional action to ensure the destination is properly enabled.For more information, see Migrating from Salesforce Classic For questions or issues, or to opt out of the automatic upgrade, contact friends@segment.com . For more information about Salesforce’s deprecation, see their deprecation notice Segment’s Salesforce destination allows you to create and store leads and records for other objects in Salesforce Sales Cloud. API Access Segment uses the Salesforce SOAP API to connect. This API requires the following credentials of a registered Salesforce user: email password security token Segment recommends that you create a separate user account specifically for this destination, if possible. If you decide to create a new user account for the Segment API, create this user by going to Setup > Administration set up > Users > New User , and creating a new user with a System Administrator profile. This profile is required to give Segment enough permissions to access the API. Also make sure that IP Security is disabled in this Salesforce user account. This is because Segment’s servers often change and its hard to predict their IPs. Identify This destination supports the most important pain point for Salesforce users: getting your prospective customers into Salesforce as Leads from your website or mobile app. Creating/updating Leads is the default behavior of identify events. If you would like to customize this you can do so using Actions . Identifying a Lead The example below demonstrates identifying a lead: analytics . identify ( ' YOUR_USERS_ID ' , { name : ' Peter Gibbons ' , title : ' VP of Derp ' , email : ' peter.gibbons@example.com ' , company : ' Initech ' , phone : ' 570-690-4150 ' , state : ' California ' , rating : ' Hot ' , city : ' east greenwich ' , postalCode : ' 94115 ' , country : ' USA ' , street : ' 19123 forest lane ' , state : ' RI ' }, { ' integrations ' : { ' Salesforce ' : true } }); Additionally, if you’re using another destination, like Intercom, that requires the company trait to be an object, you can pass the name of the company as follows and the destination still maps it as expected. Also, you can send the address data in a object as well. analytics . identify ( ' YOUR_USERS_ID ' , { name : ' Peter Gibbons ' , title : ' VP of Derp ' , email : ' peter.gibbons@example.com ' , company : { id : 666 , name : ' Initech ' }, phone : ' 570-690-4150 ' , state : ' California ' , rating : ' Hot ' , address : { city : ' east greenwich ' , postalCode : ' 94115 ' , country : ' USA ' , street : ' 19123 forest lane ' , state : ' RI ' } }, { ' integrations ' :{ ' Salesforce ' : true } }); When you call identify , Segment checks to see if this Lead exists based on the email trait. If it does, Segment updates the Lead with the traits you’ve passed in your identify call, otherwise Segment creates a Salesforce Lead. If you’re planning to update custom fields in Salesforce with Segment, you need to make sure you create the custom Lead Field inside Salesforce prior to sending the data. The Salesforce API for Leads requires lastName and company . If either of this fields are not present in a server-side request Segment appends the string 'n/a' to each of those fields even if you have provided those fields in a previous request. For example, if you want to collect a custom trait in Segment called testProp , you can create a Field Label called testProp which will generate an API Name as testProp__c . Segment appends the __c to any custom traits so you don’t need to worry about that. Make sure to stay consistent with your casing. If you create custom fields in camelCase, make sure you send traits to Segment in camelCase. If you are creating custom fields in SFDC as snake_case , then be sure to send your traits in the same format. The Salesforce destination requires every event to include a ‘Salesforce’: true in an integrations object . Segment will not attempt to send any events to Salesforce that do not include this in their payload. The Salesforce SOAP API has very strict API limits so to prevent users from unintentionally hitting their limits, Segment requires this in all events. By default Segment does not send identify calls to Salesforce, given their strict API limits. Group .group() calls create or update Account Objects inside Salesforce. When Segment receives a group call, similar to the .identify() call, it first checks using the groupId to see if the Account Object already exists in your Salesforce account. Depending on the response, Segment updates that object or create a new one. Creating/updating Accounts is the default behavior of group events. Take this sample .group() call that you might send to Segment: (analytics.js) analytics . group ( ' 813 ' , { name : ' Teemo Industries ' , address : { city : ' East Greenwich ' , state : ' RI ' , country : ' US ' , postalCode : ' 02818 ' , street : ' 9000 Forest Lane ' }, phone : ' 222-555-4444 ' , description : ' Makes great husky products ' , employees : 4 , website : ' https://example.com ' }, { ' integrations ' : { ' Salesforce ' : true } }); The above call will be sent like the following, in accordance with Salesforce’s API specs : { Name : ' Teemo Industries ' , AccountNumber : ' 813 ' , BillingCity : ' East Greenwich ' , BillingCountry : ' US ' , BillingPostalCode : ' 02818 ' , BillingState : ' RI ' , BillingStreet : ' 9000 Forest Lane ' , NumberOfEmployees : 4 , Phone : ' 222-555-4444 ' , Website : ' https://example.com ' , Description : ' Makes great husky products ' } By default Segment maps address to the Account’s billing address. To map the address to the Account’s shipping address, you can do so inside your Salesforce settings in Segment. You can also opt to map it to both billing and shipping. Required Steps You must be using V2 of this destination. You must pass in traits.name as this is a required field imposed by Salesforce for Account Objects. You must pass { 'Salesforce': true } in the options . You must include AccountNumber as part of your page layout for Segment to be able to look up for the Account Objects using groupId : Log into your Salesforce account and go to setup Go to Build > Customize > Accounts > Page Layout Drag the Account Number Field to the Account Detail Click Save Custom traits In order to send custom traits, you must do the same steps as you had done for the .identify() call. You have to predefine them inside Salesforce. Segment appends __c to any custom traits. Trait Validation Salesforce has documented strict validations on their semantic traits. Segment trims those traits if they go over the limit. Refer to their docs for Account Objects and Lead Objects to make sure you are sending the trait values under these limits if you do not want to see them trimmed off. Custom Actions If you need to manually configure how your Segment events interact with Salesforce resources, you can do so using the Actions setting. This setting allows you to trigger standard CRUD operation (Create, Read, Update/Upsert, Delete) on your internal SFDC resources in response to your Segment events. You can configure as many of these actions as you would like. Each action must be associated with either a specific track event or all identify events. Actions can be further configured to map event properties to SFDC fields. Here’s an example action configuration that will create a new Case in Salesforce in response to an Issue Submitted track event: Upsert Actions Upsert actions either create or update a resource in Salesforce. For these to work, you must provide Upsert Rules in your action configuration that Segment can use to determine if an object exists to update. If Segment does not find an object, it creates a new object in SFDC. For that reason, fields in the Upsert Rules cannot map to Salesforce autogenerated fields like Id . In addition to Upsert Rules, you can also map event properties to be set in Update or Create with Field Mapping entries. Here’s an example: In this example, creating or updating a Contact in Salesforce based on whether or not the userId property in identify events maps to a Contact with a custom UserId__c field value in SFDC. Additionally, the Salesforce Contact record field values Email and Phone are populated by the Segment event traits.email and traits.phone respectively. Troubleshooting Sandbox Mode To enable an integration with a Salesforce Sandbox instance: Toggle the Sandbox setting to true in the Salesforce Destination settings. Append the sandbox name to the account email, as shown below: name@work.com -> name@work.com.sandboxname where sandboxname is the name of your sandbox. API Call Limits Salesforce limits both the concurrent amount of requests and the total amount of daily requests Segment can make to their API on your behalf. Check these limits . They vary per edition and your number of bought user licenses. Segment makes two API requests per identify . The first request is a SQL query to determine whether this object already exists. The second is to either update or create that object. Also, every thirty minutes, Segment’s servers make two queries: one to renew the connection’s sessionId and another to describe your Salesforce object model so to determine which Salesforce objects are available. How can I check how many Salesforce API calls I have left today? Go to Setup > Administration set up > Company Profile > Company Information , and you’ll find a field labeled: API Requests, Last 24 Hours . What do I do if I ran out of calls? You can either decrease the amount of Salesforce calls Segment makes using context.integrations, or buy more Salesforce user licenses. Lookup Fields You can add whatever lookup fields you want to help Segment find the object you want to update. Custom Fields Aren’t Updating Make sure that the traits you’re passing through match the Custom Field’s API name and data type. Password Expiration By default, Salesforce user accounts are set to have their passwords expire after 90 days. When this happens, the Salesforce user account that’s making API calls on your behalf will no longer be able to make API calls. You’ll need to set a new password, get a new security token, and then set both of these in your Segment Salesforce destination settings. If you want to set your passwords to never expire, you can do so in Salesforce set up > Administration set up > Security Controls > Password Policies . Updating Lead Status Currently Segment does not support updating the Salesforce Lead Status field due to constraints of the Salesforce API. This page was last modified: 27 Oct 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Identify Group Trait Validation Custom Actions Troubleshooting Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "classic",
      "website",
      "model",
      "group",
      "troubleshooting",
      "custom",
      "title",
      "easiest",
      "options",
      "accounts",
      "customers",
      "billingcountry",
      "documentation",
      "server",
      "makes",
      "identifying",
      "disabled",
      "attempt",
      "which",
      "state",
      "postalcode",
      "improve",
      "separate",
      "prospective",
      "include",
      "layout",
      "19123",
      "certain",
      "cannot",
      "submitted",
      "every",
      "additionally",
      "migrated",
      "helpful",
      "lookup",
      "where",
      "destinations",
      "entries",
      "creating",
      "accordance",
      "email",
      "recommends",
      "summer",
      "toggle",
      "whatever",
      "receives",
      "field",
      "making",
      "during",
      "phone",
      "numberofemployees",
      "track",
      "licenses",
      "configuration",
      "edition",
      "enough",
      "context",
      "automatically",
      "format",
      "minutes",
      "deprecating",
      "semantic",
      "upgrade",
      "first",
      "testprop",
      "create",
      "value",
      "feedback",
      "limits",
      "predict",
      "event",
      "total",
      "still",
      "sample",
      "testprop__c",
      "country",
      "getting",
      "objects",
      "specifically",
      "record",
      "traits",
      "permissions",
      "specs",
      "query",
      "determine",
      "might",
      "configured",
      "configure",
      "analytics",
      "change",
      "cloud",
      "planning",
      "accepts",
      "properly",
      "system",
      "standard",
      "passing",
      "administration",
      "populated",
      "documented",
      "respectively",
      "decide",
      "sandbox",
      "migrating",
      "provide",
      "decrease",
      "integrate",
      "credentials",
      "using",
      "passwords",
      "websites",
      "another",
      "hours",
      "property",
      "additional",
      "modified",
      "imposed",
      "steps",
      "already",
      "information",
      "servers",
      "components",
      "store",
      "data",
      "deprecation",
      "interact",
      "behavior",
      "string",
      "limit",
      "employees",
      "token",
      "assistance",
      "otherwise",
      "sales",
      "casing",
      "account",
      "initech",
      "rating",
      "build",
      "great",
      "object",
      "checks",
      "provided",
      "depending",
      "products",
      "refer",
      "identify",
      "allows",
      "mapping",
      "bought",
      "required",
      "lastname",
      "either",
      "properties",
      "api",
      "integration",
      "autogenerated",
      "going",
      "manually",
      "tools",
      "amount",
      "expiration",
      "expected",
      "concurrent",
      "follows",
      "prevent",
      "supports",
      "industries",
      "issues",
      "click",
      "visit",
      "strict",
      "trimmed",
      "billingstreet",
      "unintentionally",
      "notice",
      "order",
      "following",
      "about",
      "integrations",
      "under",
      "leads",
      "problems",
      "sandboxname",
      "possible",
      "setting",
      "requires",
      "creates",
      "modes",
      "number",
      "specific",
      "snake_case",
      "thirty",
      "issue",
      "label",
      "below",
      "billing",
      "trigger",
      "events",
      "response",
      "never",
      "currently",
      "similar",
      "update",
      "destination",
      "administrator",
      "validation",
      "today",
      "connect",
      "append",
      "shown",
      "reason",
      "your_users_id",
      "whether",
      "address",
      "present",
      "would",
      "detail",
      "point",
      "enable",
      "given",
      "exists",
      "connection",
      "company",
      "enabled",
      "retiring",
      "sending",
      "setup",
      "ensure",
      "daily",
      "device",
      "queries",
      "status",
      "policies",
      "workspace",
      "salesforce",
      "after",
      "behalf",
      "https",
      "thanks",
      "constraints",
      "mobile",
      "billingcity",
      "expire",
      "happens",
      "userid__c",
      "gibbons",
      "94115",
      "profile",
      "addition",
      "friends",
      "userid",
      "worry",
      "controls",
      "match",
      "instance",
      "access",
      "updates",
      "customize",
      "generate",
      "check",
      "longer",
      "fields",
      "trims",
      "based",
      "validations",
      "because",
      "labeled",
      "other",
      "called",
      "growth",
      "greenwich",
      "02818",
      "forest",
      "records",
      "associated",
      "previous",
      "available",
      "registered",
      "inside",
      "through",
      "example",
      "billingpostalcode",
      "catalog",
      "sessionid",
      "request",
      "trait",
      "accountnumber",
      "requests",
      "teemo",
      "delete",
      "segment",
      "california",
      "groupid",
      "second",
      "appends",
      "contact",
      "street",
      "predefine",
      "important",
      "hitting",
      "resource",
      "operation",
      "billingstate",
      "payload",
      "those",
      "describe",
      "these",
      "started",
      "resources",
      "upsert",
      "settings",
      "security",
      "rules",
      "description",
      "values",
      "calls",
      "camelcase",
      "their",
      "passed",
      "further",
      "april",
      "shipping",
      "created",
      "version",
      "password",
      "support",
      "automatic",
      "action",
      "peter",
      "renew",
      "default",
      "actions",
      "above",
      "internal",
      "connections",
      "prior",
      "often",
      "intercom",
      "questions",
      "updating",
      "demonstrates",
      "collect",
      "users",
      "consistent",
      "husky"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/#emitter",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/spec/common#context",
    "title": " Spec: Common Fields | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Spec / Spec: Common Fields Spec: Common Fields On this page Structure Context Context fields automatically collected Integrations Timestamps FAQ In the Segment Spec all the API calls have a common structure, and a few common fields. However, not all destinations accept all fields included in the Spec. Not sure which fields a destination accepts? Refer to the destination’s documentation page, or check out the open-source destination code on GitHub . Segment University: The Segment Methods Check out our high-level overview of these APIs in Segment University. (Must be logged in to access.) Structure Every API call has the same core structure and fields. These fields describe user identity, timestamping, and mechanical aides like API version. Here’s an example of these common fields in raw JSON: { \"anonymousId\" : \"507f191e810c19729de860ea\" , \"context\" : { \"active\" : true , \"app\" : { \"name\" : \"InitechGlobal\" , \"version\" : \"545\" , \"build\" : \"3.0.1.545\" , \"namespace\" : \"com.production.segment\" }, \"campaign\" : { \"name\" : \"TPS Innovation Newsletter\" , \"source\" : \"Newsletter\" , \"medium\" : \"email\" , \"term\" : \"tps reports\" , \"content\" : \"image link\" }, \"device\" : { \"id\" : \"B5372DB0-C21E-11E4-8DFC-AA07A5B093DB\" , \"advertisingId\" : \"7A3CBEA0-BDF5-11E4-8DFC-AA07A5B093DB\" , \"adTrackingEnabled\" : true , \"manufacturer\" : \"Apple\" , \"model\" : \"iPhone7,2\" , \"name\" : \"maguro\" , \"type\" : \"ios\" , \"token\" : \"ff15bc0c20c4aa6cd50854ff165fd265c838e5405bfeb9571066395b8c9da449\" }, \"ip\" : \"8.8.8.8\" , \"library\" : { \"name\" : \"analytics.js\" , \"version\" : \"2.11.1\" }, \"locale\" : \"en-US\" , \"network\" : { \"bluetooth\" : false , \"carrier\" : \"T-Mobile US\" , \"cellular\" : true , \"wifi\" : false }, \"os\" : { \"name\" : \"iPhone OS\" , \"version\" : \"8.1.3\" }, \"page\" : { \"path\" : \"/academy/\" , \"referrer\" : \"\" , \"search\" : \"\" , \"title\" : \"Analytics Academy\" , \"url\" : \"https://segment.com/academy/\" }, \"referrer\" : { \"id\" : \"ABCD582CDEFFFF01919\" , \"type\" : \"dataxu\" }, \"screen\" : { \"width\" : 320 , \"height\" : 568 , \"density\" : 2 }, \"groupId\" : \"12345\" , \"timezone\" : \"Europe/Amsterdam\" , \"userAgent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36\" , \"userAgentData\" : { \"brands\" : [ { \"brand\" : \"Google Chrome\" , \"version\" : \"113\" }, { \"brand\" : \"Chromium\" , \"version\" : \"113\" }, { \"brand\" : \"Not-A.Brand\" , \"version\" : \"24\" } ], \"mobile\" : false , \"platform\" : \"macOS\" } }, \"integrations\" : { \"All\" : true , \"Mixpanel\" : false , \"Salesforce\" : false }, \"event\" : \"Report Submitted\" , \"messageId\" : \"022bb90c-bbac-11e4-8dfc-aa07a5b093db\" , \"receivedAt\" : \"2015-12-10T04:08:31.909Z\" , \"sentAt\" : \"2015-12-10T04:08:31.581Z\" , \"timestamp\" : \"2015-12-10T04:08:31.905Z\" , \"type\" : \"track\" , \"userId\" : \"97980cfea0067\" , \"version\" : 2 } In more detail these common fields for every API call are: Field Type Description anonymousId required; optional if userID is set instead String A pseudo-unique substitute for a User ID, for cases when you don’t have an absolutely unique identifier. A userId or an anonymousId is required.\n\n  See the Identities docs for more details. context optional Object Dictionary of extra information that provides useful context about a message, but is not directly related to the API call like ip address or locale See the Context field docs for more details. integrations optional Object Dictionary of destinations to either enable or disable\n\n  See the Destinations field docs for more details. messageId implicit String Automatically collected by Segment, a unique identifier for each message that lets you find an individual message across the API. This field is limited to 100 characters. receivedAt implicit Date Automatically set by Segment, the timestamp of when a message is received by Segment\n\n  It is an ISO-8601 date string.  See the Timestamps fields docs for more detail. sentAt optional Date Timestamp of when a message is sent to Segment, used for clock skew correction\n\n    It is set automatically by the Segment tracking libraries. It is an ISO-8601 date string. See the Timestamps fields docs for more detail. timestamp optional Date Timestamp when the message itself took place, defaulted to the current time by the Segment Tracking API, as a ISO-8601 format date string.\n\n  If the event just happened, leave it out and we’ll use the server’s time. If you’re importing data from the past, make sure you to provide a timestamp .See the Timestamps fields docs for more detail. type implicit String Type of message, corresponding to the API method: 'identify' , 'group' , 'track' , 'page' , 'screen' or 'alias' . userId required; optional if anonymousID is set instead String Unique identifier for the user in your database.\n\n  A userId or an anonymousId is required.\n\n  See the Identities docs for more details. version implicit Number Version of the Tracking API that received the message, automatically set by Segment. Beyond this common structure, each API call adds a few specialized top-level fields. Context Context is a dictionary of extra information that provides useful context about a datapoint, for example the user’s ip address or locale . You should only use Context fields for their intended meaning. Field Type Description active Boolean Whether a user is active. This is usually used to flag an .identify() call to just update the traits but not “last seen.” app Object dictionary of information about the current application, containing name , version , and build . This is collected automatically from the mobile libraries when possible. campaign Object Dictionary of information about the campaign that resulted in the API call, containing name , source , medium , term , content , and any other custom UTM parameter. This maps directly to the common UTM campaign parameters. device Object Dictionary of information about the device, containing id , advertisingId , manufacturer , model , name , type , and version . Note: If you collect information about iOS devices, note that the model value set by Apple might not exactly correspond to an iPhone model number. For example, an iPhone 15 Pro Max has a model value of iPhone16,2 . ip String Current user’s IP address. library Object Dictionary of information about the library making the requests to the API, containing name and version . locale String Locale string for the current user, for example en-US . network Object Dictionary of information about the current network connection, containing bluetooth , carrier , cellular , and wifi . If the context.network.cellular and context.network.wifi fields are empty, then the user is offline. os Object Dictionary of information about the operating system, containing name and version . page Object Dictionary of information about the current page in the browser, containing path , referrer , search , title and url . This is automatically collected by Analytics.js . referrer Object Dictionary of information about the way the user was referred to the website or app, containing type , name , url , and link . screen Object Dictionary of information about the device’s screen, containing density , height , and width . timezone String Timezones are sent as tzdata strings to add user timezone information which might be stripped from the timestamp, for example America/New_York . groupId String Group / Account ID. This is useful in B2B use cases where you need to attribute your non-group calls to a company or account. It is relied on by several Customer Success and CRM tools. traits Object Dictionary of traits of the current user. This is useful in cases where you need to track an event, but also associate information from a previous Identify call. You should fill this object the same way you would fill traits in an identify call . userAgent String User agent of the device making the request. userAgentData Object The user agent data of the device making the request. This always contains brands , mobile , platform , and may contain bitness , model , platformVersion , uaFullVersion , fullVersionList , wow64 , if requested and available. This populates if the Client Hints API is available on the browser. This may contain more information than is available in the userAgent in some cases. channel String where the request originated from: server, browser or mobile Context fields automatically collected Below is a chart that shows you which context variables are populated automatically by the iOS, Android, and analytics.js libraries. Other libraries only collect context.library , any other context variables must be sent manually. Context Field Analytics.js Analytics-ios Analytics-android app.name ✅ ✅ app.version ✅ ✅ app.build ✅ ✅ campaign.name ✅ campaign.source ✅ campaign.medium ✅ campaign.term ✅ campaign.content ✅ device.type ✅ ✅ device.id ✅ ✅ device.advertisingId ✅ ✅ device.adTrackingEnabled ✅ ✅ device.manufacturer ✅ ✅ device.model ✅ ✅ device.name ✅ ✅ library.name ✅ ✅ ✅ library.version ✅ ✅ ✅ ip* ✅ ✅ ✅ locale ✅ ✅ ✅ network.bluetooth ✅ network.carrier ✅ ✅ network.cellular ✅ ✅ network.wifi ✅ ✅ os.name ✅ ✅ os.version ✅ ✅ page.path ✅ page.referrer ✅ page.search ✅ page.title ✅ page.url ✅ screen.density ✅ screen.height ✅ ✅ screen.width ✅ ✅ traits ✅ ✅ userAgent ✅ ✅ userAgentData* ✅ timezone ✅ ✅ ✅ IP Address isn’t collected by Segment’s libraries, but is instead filled in by Segment’s servers when it receives a message for client side events only . IPv6 Segment doesn’t support automatically collecting IPv6 addresses. The Android library collects screen.density with this method . userAgentData is only collected if the Client Hints API is available on the browser. Segment doesn’t collect or append to the context of subsequent calls in the new mobile libraries (Swift, Kotlin, and React Native). To pass the context variables which are not automatically collected by Segment’s libraries, you must manually include them in the event payload. The following code shows how to pass groupId as the context field of Analytics.js’s .track() event: analytics . track ( \" Report Submitted \" , {}, { context : { groupId : \" 1234 \" } }); To add fields to the context object in the new mobile libraries, you must utilize a custom plugin. Documentation for creating plugins for each library can be found here: React Native Swift Kotlin Integrations A dictionary of destination names that the message should be sent to. 'All' is a special key that applies when no key for a specific destination is found. Integrations defaults to the following: { All : true , Salesforce : false , } This is because Salesforce has strict limits on API calls. Sending data to the rest of Segment’s destinations is opt-out so if you don’t specify the destination as false in this object, it will be sent to rest of the destinations that can accept it. Timestamps Every API call has four timestamps, originalTimestamp , timestamp , sentAt , and receivedAt. They’re used for very different purposes. All timestamps are ISO-8601 date strings, and are in the UTC timezone. To see the user’s timezone information, check the timezone field that’s automatically collected by client-side libraries . You must use ISO-8601 date strings that include timezones when you use timestamps with Engage . If you send custom traits without a timezone, Segment doesn’t save the timestamp value. Timestamp overview Timestamp Calculated Description originalTimestamp Time on the client device when call was invoked OR The timestamp value manually passed in through server-side libraries. Used by Segment to calculate timestamp . Note: originalTimestamp is not useful for analysis since it’s not always trustworthy as it can be easily adjusted and affected by clock skew. sentAt Time on client device when call was sent. OR sentAt value manually passed in. Used by Segment to calculate timestamp . Note: sentAt is not useful for analysis since it’s not always trustworthy as it can be easily adjusted and affected by clock skew. receivedAt Time on Segment server clock when call was received Used by Segment to calculate timestamp , and used as sort key in Warehouses. Note: For max query speed, receivedAt is the recommended timestamp for analysis when chronology does not matter as chronology is not ensured. timestamp Calculated by Segment to correct client-device clock skew using the following formula: receivedAt - ( sentAt - originalTimestamp ) Used by Segment to send to downstream destinations, and used for historical replays. Note: Recommended timestamp for analysis when chronology does matter. originalTimestamp The originalTimestamp tells you when call was invoked on the client device or the value of timestamp that you manually passed in. Note: The originalTimestamp timestamp is not useful for any analysis since it’s not always trustworthy as it can be easily adjusted and affected by clock skew. sentAt The sentAt timestamp specifies the clock time for the client’s device when the network request was made to the Segment API. For libraries and systems that send batched requests, there can be a long gap between a datapoint’s timestamp and sentAt . Combined with receivedAt , Segment uses sentAt to correct the original timestamp in situations where a user’s device clock cannot be trusted (mobile phones and browsers). The sentAt and receivedAt timestamps are assumed to occur at the same time (maximum a few hundred milliseconds), and therefore the difference is the user’s device clock skew, which can be applied back to correct the timestamp . Note: The sentAt timestamp is not useful for any analysis since it’s tainted by user’s clock skew. Segment now adds `sentAt` to a payload when the batch is complete and initially tried to the Segment API for the Swift, Kotlin, and C# mobile libraries This update changes the value of the Segment-calculated timestamp to align closer with the receivedAt value rather than the originalTimestamp value. For most users who are online when events are sent, this does not significantly impact their data. However, if your application utilizes an offline mode where events are queued up for any period of time, the timestamp value for those users now more closely reflects when Segment received the events rather than the time they occurred on the users’ devices. receivedAt The receivedAt timestamp is added to incoming messages as soon as they hit the API. It’s used in combination with sentAt to correct clock skew, and also to aid with debugging libraries and systems that deliver events in batches. The receivedAt timestamp is most important as the sort key in Segment’s Warehouses product. Use this for max query speed when retrieving data from your Warehouse. Note: Chronological order of events is not ensured with receivedAt . timestamp The timestamp timestamp specifies when the data point occurred, corrected for client-device clock skew. This is the timestamp that is passed to downstream destinations and used for historical replays. It is important to use this timestamp for importing historical data to the API. If you are using the Segment server Source libraries, or passing calls directly to the HTTP API endpoint, you can manually set the timestamp field. This change updates the originalTimestamp field of the Segment event. If you use a Segment Source in device mode, the library generates timestamp and you cannot manually set one directly in the call payload. Segment calculates timestamp as timestamp = receivedAt - (sentAt - originalTimeStamp) . For client-side tracking it’s possible for the client to spoof the originalTimeStamp , which may result in a calculated timestamp value set in the future. FAQ Why Are Events Received with Timestamps Set in the Past or Future? If you’re using one of Segment’s client-side libraries, please note that several factors can cause timestamp discrepancies in your event data. Overriding Timestamp Value: When a manual timestamp is set in the payload with a date in the past, it can cause events to appear as if they were sent earlier than they actually were. Analytics.js Source with Retries Enabled: The Retries feature supports offline traffic by queuing events in Analytics.js. These events are sent or retried later when an internet connection is available, keeping the original timestamp intact. Mobile App Backgrounded or Closed: If a user closes the app, events may be queued within the app. These queued events won’t be sent until the app is re-opened, potentially in the future, leading to timestamp discrepancies. Inaccurate Browser/Device Clock Settings: Timestamps can be incorrect if the client’s device time is inaccurate, as the originalTimestamp relies on the client device’s clock, which can be manually adjusted. Traffic from Internet Bots: Internet Bots can sometimes send requests with unusual timestamps, either intentionally or due to incorrect settings, leading to discrepancies. This page was last modified: 30 Oct 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Structure Context Context fields automatically collected Integrations Timestamps FAQ Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "model",
      "website",
      "group",
      "retrieving",
      "applied",
      "significantly",
      "meaning",
      "custom",
      "source",
      "database",
      "keeping",
      "filled",
      "pseudo",
      "ff15bc0c20c4aa6cd50854ff165fd265c838e5405bfeb9571066395b8c9da449",
      "title",
      "507f191e810c19729de860ea",
      "easiest",
      "closes",
      "identity",
      "adjusted",
      "absolutely",
      "between",
      "closed",
      "sometimes",
      "fullversionlist",
      "closer",
      "until",
      "adtrackingenabled",
      "historical",
      "documentation",
      "server",
      "timezones",
      "originaltimestamp",
      "calculate",
      "iphone7",
      "new_york",
      "which",
      "improve",
      "specifies",
      "alias",
      "correct",
      "sentat",
      "happened",
      "warehouses",
      "contains",
      "macos",
      "spoof",
      "subsequent",
      "platformversion",
      "include",
      "potentially",
      "7a3cbea0",
      "intended",
      "maguro",
      "content",
      "collects",
      "backgrounded",
      "cannot",
      "useragent",
      "submitted",
      "channel",
      "carrier",
      "individual",
      "correction",
      "every",
      "helpful",
      "collected",
      "warehouse",
      "where",
      "destinations",
      "swift",
      "substitute",
      "creating",
      "batched",
      "email",
      "khtml",
      "online",
      "locale",
      "batches",
      "ensured",
      "trusted",
      "receives",
      "field",
      "calculates",
      "making",
      "cause",
      "track",
      "context",
      "chart",
      "automatically",
      "format",
      "incoming",
      "should",
      "appear",
      "disable",
      "10t04",
      "newsletter",
      "create",
      "mixpanel",
      "clock",
      "apple",
      "value",
      "feedback",
      "corresponding",
      "queued",
      "limits",
      "event",
      "datapoint",
      "assumed",
      "actually",
      "calculated",
      "directly",
      "iphone",
      "traits",
      "specify",
      "provides",
      "query",
      "situations",
      "might",
      "names",
      "analytics",
      "change",
      "customer",
      "useful",
      "97980cfea0067",
      "false",
      "react",
      "bluetooth",
      "accepts",
      "system",
      "mozilla",
      "passing",
      "contain",
      "populated",
      "iphone16",
      "intel",
      "application",
      "provide",
      "traffic",
      "recommended",
      "integrate",
      "screen",
      "using",
      "websites",
      "wow64",
      "europe",
      "related",
      "modified",
      "combination",
      "purposes",
      "utilizes",
      "information",
      "servers",
      "browsers",
      "added",
      "referrer",
      "associate",
      "medium",
      "data",
      "applies",
      "empty",
      "libraries",
      "later",
      "timestamps",
      "common",
      "github",
      "string",
      "complete",
      "token",
      "12345",
      "assistance",
      "matter",
      "difference",
      "network",
      "build",
      "account",
      "endpoint",
      "object",
      "tried",
      "overriding",
      "implicit",
      "extra",
      "america",
      "brand",
      "method",
      "usually",
      "place",
      "initechglobal",
      "invoked",
      "refer",
      "please",
      "trustworthy",
      "period",
      "identify",
      "containing",
      "since",
      "aides",
      "timezone",
      "required",
      "defaulted",
      "academy",
      "logged",
      "either",
      "leading",
      "aa07a5b093db",
      "level",
      "retried",
      "across",
      "api",
      "kotlin",
      "parameter",
      "tools",
      "manually",
      "innovation",
      "analysis",
      "supports",
      "addresses",
      "uafullversion",
      "applewebkit",
      "visit",
      "strict",
      "reports",
      "order",
      "methods",
      "leave",
      "messageid",
      "identifier",
      "following",
      "there",
      "milliseconds",
      "exactly",
      "about",
      "integrations",
      "problems",
      "agent",
      "hints",
      "possible",
      "correspond",
      "within",
      "variables",
      "rather",
      "affected",
      "feature",
      "speed",
      "initially",
      "tzdata",
      "number",
      "however",
      "gecko",
      "specific",
      "tainted",
      "macintosh",
      "messages",
      "product",
      "below",
      "different",
      "replays",
      "batch",
      "events",
      "relies",
      "without",
      "platform",
      "populates",
      "native",
      "message",
      "itself",
      "receivedat",
      "therefore",
      "android",
      "update",
      "phones",
      "earlier",
      "formula",
      "destination",
      "importing",
      "included",
      "append",
      "factors",
      "whether",
      "originated",
      "width",
      "attribute",
      "address",
      "bitness",
      "browser",
      "would",
      "detail",
      "downstream",
      "optional",
      "point",
      "intact",
      "timestamp",
      "operating",
      "enable",
      "connection",
      "chronological",
      "density",
      "company",
      "beyond",
      "debugging",
      "enabled",
      "sending",
      "mechanical",
      "device",
      "internet",
      "accept",
      "special",
      "unique",
      "dataxu",
      "salesforce",
      "https",
      "manual",
      "google",
      "thanks",
      "anonymousid",
      "amsterdam",
      "mobile",
      "chronology",
      "retries",
      "align",
      "engage",
      "changes",
      "intentionally",
      "result",
      "doesn",
      "stripped",
      "brands",
      "utilize",
      "manufacturer",
      "userid",
      "referred",
      "offline",
      "received",
      "access",
      "updates",
      "10_15_7",
      "specialized",
      "check",
      "plugin",
      "incorrect",
      "fields",
      "chrome",
      "boolean",
      "because",
      "opened",
      "other",
      "library",
      "growth",
      "limited",
      "defaults",
      "previous",
      "generates",
      "devices",
      "available",
      "search",
      "campaign",
      "systems",
      "client",
      "through",
      "example",
      "unusual",
      "resulted",
      "request",
      "requests",
      "overview",
      "segment",
      "groupid",
      "combined",
      "b5372db0",
      "advertisingid",
      "success",
      "timestamping",
      "maximum",
      "contact",
      "hundred",
      "corrected",
      "report",
      "identities",
      "important",
      "payload",
      "structure",
      "university",
      "describe",
      "those",
      "current",
      "these",
      "chromium",
      "occur",
      "occurred",
      "started",
      "namespace",
      "settings",
      "useragentdata",
      "instead",
      "cases",
      "original",
      "always",
      "reflects",
      "description",
      "calls",
      "their",
      "passed",
      "impact",
      "discrepancies",
      "strings",
      "characters",
      "image",
      "version",
      "collecting",
      "support",
      "dictionary",
      "plugins",
      "tracking",
      "shows",
      "safari",
      "active",
      "abcd582cdeffff01919",
      "deliver",
      "requested",
      "inaccurate",
      "found",
      "connections",
      "cellular",
      "relied",
      "tells",
      "closely",
      "questions",
      "easily",
      "height",
      "parameters",
      "collect",
      "users",
      "several",
      "future",
      "queuing",
      "production",
      "022bb90c",
      "details"
    ],
    "howto_steps": [
      "✅ ✅ ✅ locale ✅ ✅ ✅ network.bluetooth ✅ network.carrier ✅ ✅ network.cellular ✅ ✅ network.wifi ✅ ✅ os.name ✅ ✅ os.version ✅ ✅ page.path ✅ page.referrer ✅ page.search ✅ page.title ✅ page.url ✅ screen.density ✅ screen.height ✅ ✅ screen.width ✅ ✅ traits ✅ ✅ userAgent ✅ ✅ userAgentData",
      "✅ timezone ✅ ✅ ✅ IP Address isn’t collected by Segment’s libraries, but is instead filled in by Segment’s servers when it receives a message for client side events only . IPv6 Segment doesn’t support automatically collecting IPv6 addresses. The Android library collects screen.density with this method . userAgentData is only collected if the Client Hints API is available on the browser. Segment doesn’t collect or append to the context of subsequent calls in the new mobile libraries (Swift, Kotlin, and React Native). To pass the context variables which are not automatically collected by Segment’s libraries, you must manually include them in the event payload. The following code shows how to pass groupId as the context field of Analytics.js’s .track() event: analytics . track ( \" Report Submitted \" , {}, { context : { groupId : \" 1234 \" } }); To add fields to the context object in the new mobile libraries, you must utilize a custom plugin. Documentation for creating plugins for each library can be found here: React Native Swift Kotlin Integrations A dictionary of destination names that the message should be sent to. 'All' is a special key that applies when no key for a specific destination is found. Integrations defaults to the following: { All : true , Salesforce : false , } This is because Salesforce has strict limits on API calls. Sending data to the rest of Segment’s destinations is opt",
      "( sentAt",
      "originalTimestamp ) Used by Segment to send to downstream destinations, and used for historical replays. Note: Recommended timestamp for analysis when chronology does matter. originalTimestamp The originalTimestamp tells you when call was invoked on the client device or the value of timestamp that you manually passed in. Note: The originalTimestamp timestamp is not useful for any analysis since it’s not always trustworthy as it can be easily adjusted and affected by clock skew. sentAt The sentAt timestamp specifies the clock time for the client’s device when the network request was made to the Segment API. For libraries and systems that send batched requests, there can be a long gap between a datapoint’s timestamp and sentAt . Combined with receivedAt , Segment uses sentAt to correct the original timestamp in situations where a user’s device clock cannot be trusted (mobile phones and browsers). The sentAt and receivedAt timestamps are assumed to occur at the same time (maximum a few hundred milliseconds), and therefore the difference is the user’s device clock skew, which can be applied back to correct the timestamp . Note: The sentAt timestamp is not useful for any analysis since it’s tainted by user’s clock skew. Segment now adds `sentAt` to a payload when the batch is complete and initially tried to the Segment API for the Swift, Kotlin, and C# mobile libraries This update changes the value of the Segment",
      "(sentAt",
      "originalTimeStamp) . For client"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/libraries/mobile/kotlin-android/kotlin-android-plugin-architecture/",
    "title": " Analytics-Kotlin Plugin Architecture | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Libraries / Mobile / Kotlin android / Analytics-Kotlin Plugin Architecture Analytics-Kotlin Plugin Architecture On this page Plugin architecture Adding a plugin Build your own destination Plugin architecture Segment’s plugin architecture enables you to modify and augment how the analytics client works. From modifying event payloads to changing analytics functionality, plugins help to speed up the process of getting things done. Plugins are run through a timeline, which executes in order of insertion based on their types. Segment has these five types: Type Details before Executes before event processing begins. enrichment Executes as the first level of event processing. destination Executes as events begin to pass off to destinations. after Executes after all event processing completes. You can use this to perform cleanup operations. utility Executes only with manual calls such as Logging. Fundamentals There are three basic types of plugins that you can use as a foundation for modifying functionality. They are: Plugin , EventPlugin , and DestinationPlugin . Plugin Plugin acts on any event payload going through the timeline. For example, if you want to add something to the context object of any event payload as an enrichment: class SomePlugin : Plugin { override val type = Plugin . Type . Enrichment override lateinit var analytics: Analytics override fun execute ( event: BaseEvent ): BaseEvent ? { event . putInContext ( \"foo\" , \"bar\" ) return event } } EventPlugin EventPlugin is a plugin interface that acts on specific event types. You can choose the event types by only overriding the event functions you want. For example, if you only want to act on track & identify events: class SomePlugin : EventPlugin { override fun track ( event: TrackEvent ): BaseEvent ? { // code to modify track event return event } override fun identify ( event: TrackEvent ): BaseEvent ? { // code to modify identify event return event } } DestinationPlugin The DestinationPlugin interface is commonly used for device-mode destinations. This plugin contains an internal timeline that follows the same process as the analytics timeline, enabling you to modify and augment how events reach a particular destination. For example, if you want to implement a device-mode destination plugin for Amplitude, you can use this: class AmplitudePlugin : DestinationPlugin () { override val key = \"Amplitude\" // This is the name of the destination plugin, it is used to retrieve settings internally val amplitudeSDK: Amplitude // This is an instance of the partner SDK init { // Initializing the partner SDK and setting things up amplitudeSDK = Amplitude . instance amplitudeSDK . initialize ( applicationContext , \"API_KEY\" ); } /*\n    * Implementing this function allows this plugin to hook into any track events\n    * coming into the analytics timeline\n    */ override fun track ( event: TrackEvent ): BaseEvent ? { amplitudeSDK . logEvent ( event . name ) return event } } Advanced concepts setup(Analytics) : Use this function to setup your plugin. This implicitly calls once the plugin registers. update(Settings) : Use this function to react to any settings updates. This implicitly calls when settings update. You can force a settings update by calling analytics.checkSettings() . AndroidLifecycle hooks Plugins can also hook into AndroidLifecycle functions by implementing an interface. These functions call implicitly as the lifecycle events process. DestinationPlugin timeline: The destination plugin contains an internal timeline that follows the same process as the analytics timeline, enabling you to modify/augment how events reach the particular destination. For example if you only wanted to add a context key when sending an event to Amplitude : val amplitudePlugin = AmplitudePlugin () analytics . add ( amplitudePlugin ) // add amplitudePlugin to the analytics client val amplitudeEnrichment = object: Plugin { override val type = Plugin . Type . Enrichment override lateinit var analytics: Analytics override fun execute ( event: BaseEvent ): BaseEvent ? { event . putInContext ( \"foo\" , \"bar\" ) return event } } amplitudePlugin . add ( amplitudeEnrichment ) // add enrichment plugin to amplitude timeline Adding a plugin Adding plugins enable you to modify your analytics implementation to best fit your needs. You can add a plugin using this: val yourPlugin = SomePlugin () analytics . add ( yourPlugin ) Though you can add plugins anywhere in your code, it’s best to implement your plugin when you configure the client. Here’s an example of adding a plugin to the context object of any event payload as an enrichment: class SomePlugin : Plugin { override val type = Plugin . Type . Enrichment override lateinit var analytics: Analytics override fun execute ( event: BaseEvent ): BaseEvent ? { event . putInContext ( \"foo\" , \"bar\" ) return event } } val yourPlugin = SomePlugin () analytics . add ( yourPlugin ) Build your own destination If Segment doesn’t support your Kotlin destination, you can build your own with the template Segment provides. To build your own Kotlin destination using a plugin template: Go to the Kotlin Destination Plugin Template . Click Use this template . Enter a name for the repository. Click Create repository from template . Go to lib > src > main > java/dmn/your/pkg/destination in your repository. Click the MyDestination.kt . Complete the TODO sections in the sample code with the appropriate information for your destination. Segment recommends you to change the package name before you finalize your build. Commit your changes. You can unit test your destination to make sure it works. Segment recommends you to use the testing template as a starter and to build upon it to get test coverage of most scenarios. To test your destination: Go to lib > src > test > java/dmn/your/pkg/destination . Click MyDestinationTests.kt . Complete the TODO sections in the sample code with the appropriate information for your destination. Commit your changes. Segment recommends that you test your destination implementation end-to-end. Send some sample analytics events and ensure that they reach the destination. This page was last modified: 13 Aug 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Plugin architecture Adding a plugin Build your own destination Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "instance",
      "click",
      "visit",
      "partner",
      "updates",
      "plugin",
      "provides",
      "retrieve",
      "amplitudeenrichment",
      "interface",
      "order",
      "before",
      "configure",
      "based",
      "analytics",
      "there",
      "change",
      "baseevent",
      "react",
      "trackevent",
      "androidlifecycle",
      "easiest",
      "sections",
      "utility",
      "scenarios",
      "growth",
      "hooks",
      "problems",
      "three",
      "setting",
      "things",
      "begins",
      "documentation",
      "client",
      "through",
      "example",
      "types",
      "fundamentals",
      "speed",
      "return",
      "which",
      "integrate",
      "specific",
      "using",
      "catalog",
      "sources",
      "basic",
      "testing",
      "websites",
      "improve",
      "request",
      "process",
      "modified",
      "logging",
      "execute",
      "lifecycle",
      "mydestination",
      "calling",
      "segment",
      "completes",
      "functionality",
      "information",
      "wanted",
      "contains",
      "override",
      "finalize",
      "events",
      "implementation",
      "starter",
      "functions",
      "putincontext",
      "function",
      "data",
      "coming",
      "enabling",
      "android",
      "libraries",
      "contact",
      "update",
      "checksettings",
      "destination",
      "augment",
      "yourplugin",
      "complete",
      "enrichment",
      "implicitly",
      "payload",
      "implement",
      "these",
      "something",
      "assistance",
      "initializing",
      "started",
      "operations",
      "choose",
      "mydestinationtests",
      "implementing",
      "helpful",
      "destinations",
      "processing",
      "build",
      "account",
      "enable",
      "settings",
      "registers",
      "object",
      "amplitude",
      "recommends",
      "overriding",
      "calls",
      "applicationcontext",
      "lateinit",
      "logevent",
      "their",
      "sending",
      "setup",
      "ensure",
      "executes",
      "foundation",
      "amplitudeplugin",
      "concepts",
      "device",
      "works",
      "commonly",
      "api_key",
      "force",
      "support",
      "repository",
      "class",
      "plugins",
      "track",
      "identify",
      "architecture",
      "after",
      "begin",
      "changing",
      "modify",
      "manual",
      "allows",
      "thanks",
      "context",
      "insertion",
      "coverage",
      "mobile",
      "appropriate",
      "though",
      "initialize",
      "amplitudesdk",
      "cleanup",
      "needs",
      "adding",
      "package",
      "level",
      "changes",
      "internal",
      "advanced",
      "commit",
      "first",
      "connections",
      "destinationplugin",
      "doesn",
      "kotlin",
      "going",
      "create",
      "questions",
      "template",
      "feedback",
      "tools",
      "enter",
      "perform",
      "enables",
      "someplugin",
      "event",
      "timeline",
      "anywhere",
      "particular",
      "internally",
      "modifying",
      "follows",
      "sample",
      "payloads",
      "details",
      "reach",
      "eventplugin"
    ],
    "howto_steps": [
      "Implementing this function allows this plugin to hook into any track events",
      "coming into the analytics timeline"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/libraries/mobile/react-native/#plugin-architecture",
    "title": " Analytics for React Native | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Libraries / Mobile / Analytics for React Native Analytics for React Native Community x Maintenance x Flagship ✓ ? Flagship libraries offer the most up-to-date functionality on Segment’s most popular platforms. Segment actively maintains flagship libraries, which benefit from new feature releases and ongoing development and support. On this page Getting Started Adding Plugins to the Client Usage Destinations Tools and extensions Utility Methods Control upload with Flush Policies Automatic screen tracking Plugin Architecture Supported Destinations Device identifiers FAQs Changelog With Analytics for React Native, you can collect analytics in your React Native application and send data to any analytics or marketing tool without having to learn, test, or implement a new API every time. Analytics React Native enables you to process and track the history of a payload, while Segment controls the API and prevents unintended operations. All of Segment’s libraries are open-source, and you can view Analytics for React Native on GitHub. For more information, see the Analytics React Native GitHub repository . Using Analytics for React Native Classic? As of May 15, 2023, Segment ended support for Analytics React Native Classic , which includes versions 1.5.1 and older. Use the implementation guide to upgrade to the latest version. @segment/analytics-react-native is compatible with Expo’s Custom Dev Client and EAS builds without any additional configuration. Destination Plugins that require native modules may require custom Expo Config Plugins . @segment/analytics-react-native isn’t compatible with Expo Go. Getting Started To get started with the Analytics for React Native library: Create a React Native Source in Segment. Go to Connections > Sources > Add Source . Search for React Native and click Add source . Install @segment/analytics-react-native , @segment/sovran-react-native and react-native-get-random-values . You can install in one of two ways: yarn add @ segment /analytics-react-native @segment/ sovran - react - native react - native - get - random - values or npm install -- save @ segment /analytics-react-native @segment/ sovran - react - native react - native - get - random - values If you want to use the default persistor for the Segment Analytics client, you also have to install react-native-async-storage/async-storage. You can install in one of two ways: yarn add @ react - native - async - storage / async - storage or npm install -- save @ react - native - async - storage / async - storage To use your own persistence layer you can use the storePersistor option when initializing the client. Make sure you always have a persistor (either by having AsyncStorage package installed or by explicitly passing a value), else you might get unexpected side effects like multiple ‘Application Installed’ events If you’re using iOS, install native modules with: npx pod - install If you’re using Android, you need to add extra permissions to your AndroidManifest.xml . < uses - permission android : name = \" android.permission.ACCESS_NETWORK_STATE \" /> Initialize and configure the Analytics React Native client. The package exposes a method called createClient which you can use to create the Segment Analytics client. This central client manages all the tracking events. import { createClient , AnalyticsProvider } from ' @segment/analytics-react-native ' ; const segmentClient = createClient ({ writeKey : ' SEGMENT_API_KEY ' }); These are the options you can apply to configure the client: Name Default Description writeKey required ’’ Your Segment API key. collectDeviceId false Set to true to automatically collect the device Id.from the DRM API on Android devices. debug true* When set to false, it will not generate any logs. logger undefined Custom logger instance to expose internal Segment client logging. flushAt 20 How many events to accumulate before sending events to the backend. flushInterval 30 In seconds, how often to send events to the backend. flushPolicies undefined Add more granular control for when to flush, see Adding or removing policies maxBatchSize 1000 How many events to send to the API at once trackAppLifecycleEvents false Enable automatic tracking for app lifecycle events : application installed, opened, updated, backgrounded trackDeepLinks false Enable automatic tracking for when the user opens the app with a deep link. This requires additional setup on iOS, see instructions defaultSettings undefined Settings that will be used if the request to get the settings from Segment fails. Type: SegmentAPISettings autoAddSegmentDestination true Set to false to skip adding the SegmentDestination plugin storePersistor undefined A custom persistor for the store that analytics-react-native uses. Must match Persistor interface exported from sovran-react-native . proxy undefined proxy is a batch url to post to instead of ‘https://api.segment.io/v1/b’. errorHandler undefined Create custom actions when errors happen, see Handling errors Adding Plugins to the Client You can add a plugin at any time through the segmentClient.add() method. More information about plugins, including a detailed architecture overview and a guide to creating your own can be found in the Analytics React Native Plugin Architecture docs. import { createClient } from ' @segment/analytics-react-native ' ; import { AmplitudeSessionPlugin } from ' @segment/analytics-react-native-plugin-amplitude-session ' ; import { FirebasePlugin } from ' @segment/analytics-react-native-plugin-firebase ' ; import { IdfaPlugin } from ' @segment/analytics-react-native-plugin-idfa ' ; const segmentClient = createClient ({ writeKey : ' SEGMENT_KEY ' }); segmentClient . add ({ plugin : new AmplitudeSessionPlugin () }); segmentClient . add ({ plugin : new FirebasePlugin () }); segmentClient . add ({ plugin : new IdfaPlugin () }); Usage You can use Analytics React Native with or without hooks. Detailed overviews of both implementation options can be found below. Usage with hooks To use the useAnalytics hook within the application, wrap the application in an AnalyticsProvider. This uses the Context API which allows access to the analytics client anywhere in the application. import { createClient , AnalyticsProvider , } from ' @segment/analytics-react-native ' ; const segmentClient = createClient ({ writeKey : ' SEGMENT_API_KEY ' }); const App = () => ( < AnalyticsProvider client = { segmentClient } > < Content /> < /AnalyticsProvider > ); The useAnalytics() hook exposes the client methods: import React from ' react ' ; import { Text , TouchableOpacity } from ' react-native ' ; import { useAnalytics } from ' @segment/analytics-react-native ' ; const Button = () => { const { track } = useAnalytics (); return ( < TouchableOpacity style = { styles . button } onPress = {() => { track ( ' Awesome event ' ); }} > < Text style = { styles . text } > Press me !< /Text > < /TouchableOpacity > ); }; Usage without hooks To use the tracking events without hooks, call the methods directly on the client: import { createClient , AnalyticsProvider , } from ' @segment/analytics-react-native ' ; // create the client once when the app loads const segmentClient = createClient ({ writeKey : ' SEGMENT_API_KEY ' }); // track an event using the client instance segmentClient . track ( ' Awesome event ' ); Method signature Example use track : ( event : string , properties ?: JsonMap ) => void ; const { track } = useAnalytics (); track ( ' View Product ' , { productId : 123 , productName : ' Striped trousers ' , }); Core tracking methods Once you’ve installed the Analytics React Native library, you can start collecting data through Segment’s tracking methods: Track Identify Screen Group Alias Destinations Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time. Segment offers support for two different types of destination connection modes: Cloud-mode and Device-mode. learn more about the differences between the two in the Segment Destination docs . Cloud-mode Destinations Destinations that can be enabled from your Segment workspace and require no additional app setup. Device-mode Destinations Destinations that require additional app setup, and limit certain Segment functionality. Tools and extensions Method signature Example use group : ( groupId : string , groupTraits ?: JsonMap ) => void ; const { group } = useAnalytics (); group ( ' some-company ' , { name : ' Segment ' , }); Utility Methods The Analytics React Native 2.0 utility methods help you to manage your data. They include: Alias Reset Flush Cleanup Alias The alias method is used to merge two user identities by connecting two sets of user data as one. This method is required to manage user identities in some of Segment’s destinations. Method signature Example use alias : ( newUserId : string ) => void ; const { alias } = useAnalytics (); alias ( ' user-123 ' ); Reset The reset method clears the internal state of the library for the current user and group. This is useful for apps where users can log in and out with different identities over time. Note: Each time you call reset, a new AnonymousId is generated automatically. Method signature Example use reset : () => void ; const { reset } = useAnalytics (); reset (); The reset method doesn't clear the `userId` from connected client-side integrations. If you want to clear the `userId` from connected client-side destination plugins, you'll need to call the equivalent reset method for that library. Flush By default, the analytics client sends queued events to the API every 30 seconds or when 20 events accumulate, whichever occurs first. This also occurs whenever the app resumes if the user has closed the app with some events unsent. These values can be modified by the flushAt and flushInterval config options. You can also trigger a flush event manually. Method signature Example use flush : () => Promise < void > ; const { flush } = useAnalytics (); flush (); Cleanup In case you need to reinitialize the client, that is, you’ve called createClient more than once for the same client in your application lifecycle, use this method on the old client to clear any subscriptions and timers first. let client = createClient ({ writeKey : ' KEY ' }); client . cleanup (); client = createClient ({ writeKey : ' KEY ' }); If you don’t do this, the old client instance would still exist and retain the timers, making all your events fire twice. Ideally, you shouldn’t have to use this method, and the Segment client should be initialized only once in the application lifecycle. Control upload with Flush Policies To granularly control when Segment uploads events you can use FlushPolicies .\nA Flush Policy defines the strategy for deciding when to flush. This can be on an interval, time of day, after receiving a certain number of events, or after receiving a particular event. This gives you more flexibility on when to send event to Segment.\nSet Flush Policies in the configuration of the client: const client = createClient ({ // ... flushPolicies : [ new CountFlushPolicy ( 5 ), new TimerFlushPolicy ( 500 ), new StartupFlushPolicy (), ], }); You can set several policies at a time. When a flush occurs, it triggers an upload of the events, then resets the logic after every flush. \nAs a result, only the first policy to reach shouldFlush will trigger a flush. In the example above either the event count reaches 5 or the timer reaches 500ms, whatever comes first will trigger a flush.\nSegment has several standard Flush Policies: CountFlushPolicy triggers when you reach a certain number of events TimerFlushPolicy triggers on an interval of milliseconds StartupFlushPolicy triggers on client startup only If you implement custom flush policies, they replace Segment’s default Count and Timer policies. To incorporate custom policies, add your custom Timer and Count policies to the client’s Flush Policies configuration. Adding or removing policies One of the main advantages of Flush Policies is that you can add and remove policies on the fly. This is very powerful when you want to reduce or increase the amount of flushes. \nFor example you might want to disable flushes if you detect the user has no network: import NetInfo from \" @react-native-community/netinfo \" ; const policiesIfNetworkIsUp = [ new CountFlushPolicy ( 5 ), new TimerFlushPolicy ( 500 ), ]; // Create our client with our policies by default const client = createClient ({ // ... flushPolicies : [... policiesIfNetworkIsUp ], }); // If Segment detects the user disconnect from the network, Segment removes all flush policies. // That way the Segment client won't keep attempting to send events to Segment but will still // store them for future upload. // If the network comes back up, the Segment client adds the policies back. const unsubscribe = NetInfo . addEventListener (( state ) => { if ( state . isConnected ) { client . addFlushPolicy (... policiesIfNetworkIsUp ); } else { client . removeFlushPolicy (... policiesIfNetworkIsUp ) } }); Creating your own flush policies You can create a custom Flush Policy special for your application needs by implementing the FlushPolicy interface. You can also extend the FlushPolicyBase class that already creates and handles the shouldFlush value reset.\nA FlushPolicy only needs to implement two methods: start() : Executed when the flush policy is enabled and added to the client. This is a good place to start background operations, make async calls, configure things before execution onEvent(event: SegmentEvent) : Called on every event tracked by your client reset() : Called after a flush is triggered (either by your policy, by another policy, or manually)\nYour policies also have a shouldFlush observable boolean value. When this is set to true the client attempts to upload events. Each policy should reset this value to false according to its own logic, although it’s common to do it inside the reset method. export class FlushOnScreenEventsPolicy extends FlushPolicyBase { onEvent ( event : SegmentEvent ): void { // Only flush when a screen even happens if ( event . type === EventType . ScreenEvent ) { this . shouldFlush . value = true ; } } reset (): void { // Superclass will reset the shouldFlush value so that the next screen event triggers a flush again // But you can also reset the value whenever, say another event comes in or after a timeout super . reset (); } } Automatic screen tracking As sending a screen() event with each navigation action can get tiresome, it’s best to track navigation globally. The implementation is different depending on which library you use for navigation. The two main navigation libraries for React Native are React Navigation and React Native Navigation . React Navigation When setting up React Navigation, you’ll essentially find the root level navigation container and call screen() whenever the user navigates to a new screen. Segment’s example app is set up with screen tracking using React Navigation, so you can use it as a guide. To set up automatic screen tracking with React Navigation: Find the file where you used the NavigationContainer . This is the main top level container for React Navigation. In the component, create a new state variable to store the current route name: const [ routeName , setRouteName ] = useState ( ' Unknown ' ); Create a utility function for determining the name of the selected route outside of the component: const getActiveRouteName = ( state : NavigationState | PartialState < NavigationState > | undefined ): string => { if ( ! state || typeof state . index !== ' number ' ) { return ' Unknown ' ; } const route = state . routes [ state . index ]; if ( route . state ) { return getActiveRouteName ( route . state ); } return route . name ; }; Pass a function in the onStateChange prop of your NavigationContainer that checks for the active route name and calls client.screen() if the route has changes. You can pass in any additional screen parameters as the second argument for screen calls as needed. < NavigationContainer onStateChange = {( state ) => { const newRouteName = getActiveRouteName ( state ); if ( routeName !== newRouteName ) { segmentClient . screen ( newRouteName ); setRouteName ( newRouteName ); } }} > React Native Navigation In order to set up automatic screen tracking while using React Native Navigation : Use an event listener at the point where you set up the root of your application (for example, Navigation.setRoot ). Access your SegmentClient at the root of your application. // Register the event listener for *registerComponentDidAppearListener* Navigation . events (). registerComponentDidAppearListener (({ componentName }) => { segmentClient . screen ( componentName ); }); Plugin Architecture Segment’s plugin architecture enables you to modify and augment how the events are processed before they’re uploaded to the Segment API.  In order to customize what happens after an event is created, you can create and place various Plugins along the processing pipeline that an event goes through. This pipeline is referred to as a timeline. Plugin Types Plugin Type Description before Executes before event processing begins. enrichment Executes as the first level of event processing. destination Executes as events begin to pass off to destinations. after Executes after all event processing is completed. You can use this to perform cleanup operations. utility Executes only with manual calls such as Logging. Plugins can have their own native code (such as the iOS-only IdfaPlugin or wrap an underlying library (such as the FirebasePlugin which uses react-native-firebase under the hood). Destination Plugins Segment is an out-of-the-box DestinationPlugin . You can add as many other destination plugins as you like and upload events and data to them. If you don’t want the Segment destination plugin, you can pass autoAddSegmentDestination = false in the options when setting up your client. This prevents the SegmentDestination plugin from being added automatically for you. Adding Plugins You can add a plugin at any time through the segmentClient.add() method. import { createClient } from ' @segment/analytics-react-native ' ; import { AmplitudeSessionPlugin } from ' @segment/analytics-react-native-plugin-amplitude ' ; import { FirebasePlugin } from ' @segment/analytics-react-native-plugin-firebase ' ; import { IdfaPlugin } from ' @segment/analytics-react-native-plugin-idfa ' ; const segmentClient = createClient ({ writeKey : ' SEGMENT_KEY ' }); segmentClient . add ({ plugin : new AmplitudeSessionPlugin () }); segmentClient . add ({ plugin : new FirebasePlugin () }); segmentClient . add ({ plugin : new IdfaPlugin () }); Writing your own Plugins Plugins implement as ES6 Classes. To get started, familiarize yourself with the available classes in /packages/core/src/plugin.ts . The available plugin classes are: Plugin EventPlugin DestinationPlugin UtilityPlugin PlatformPlugin Any plugin must be an extension of one of these classes.\nYou can then customize the functionality by overriding different methods on the base class. For example, here is a simple Logger plugin: // logger.js import { Plugin , PluginType , SegmentEvent , } from ' @segment/analytics-react-native ' ; export class Logger extends Plugin { // Note that `type` is set as a class property // If you do not set a type your plugin will be a `utility` plugin (see Plugin Types above) type = PluginType . before ; execute ( event : SegmentEvent ) { console . log ( event ); return event ; } } // app.js import { Logger } from ' ./logger ' ; segmentClient . add ({ plugin : new Logger () }); As the plugin overrides the execute() method, this Logger calls console.log for every event going through the Timeline. Add a custom Destination Plugin You can add custom plugins to Destination Plugins. For example, you could implement the following logic to send events to Braze on weekends only: import { createClient } from ' @segment/analytics-react-native ' ; import { BrazePlugin } from ' @segment/analytics-react-native-plugin-braze ' ; import { BrazeEventPlugin } from ' ./BrazeEventPlugin ' ; const segmentClient = createClient ({ writeKey : ' SEGMENT_KEY ' }); const brazeplugin = new BrazePlugin (); const myBrazeEventPlugin = new BrazeEventPlugin (); brazeplugin . add ( myBrazeEventPlugin ); segmentClient . add ({ plugin : brazeplugin }); // Plugin code for BrazeEventPlugin.ts import { Plugin , PluginType , SegmentEvent , } from ' @segment/analytics-react-native ' ; export class BrazeEventPlugin extends Plugin { type = PluginType . before ; execute ( event : SegmentEvent ) { var today = new Date (); if ( today . getDay () === 6 || today . getDay () === 0 ) { return event ; } } } Segment would then send events to the Braze Destination Plugin on Saturdays and Sundays, based on device time. Example Plugins These are the example plugins you can use and alter to meet your tracking needs: Plugin Package Adjust @segment/analytics-react-native-plugin-adjust Amplitude Sessions @segment/analytics-react-native-plugin-amplitude-session AppsFlyer @segment/analytics-react-native-plugin-appsflyer Braze @segment/analytics-react-native-plugin-braze Consent Manager @segment/analytics-react-native-plugin-adjust Facebook App Events @segment/analytics-react-native-plugin-facebook-app-events Firebase @segment/analytics-react-native-plugin-consent-firebase IDFA @segment/analytics-react-native-plugin-idfa Supported Destinations Segment supports a large number of Cloud-mode destinations. Segment also supports the below destinations for Analytics React Native 2.0 in device-mode, with more to follow: Adjust Amplitude Session Appsflyer Braze CleverTap Facebook App Events Firebase Device identifiers On Android, Segment’s React Native library generates a unique ID by using the DRM API as context.device.id. Some destinations rely on this field being the Android ID, so be sure to double-check the destination’s vendor documentation. If you choose to override the default value using a plugin, make sure the identifier you choose complies with Google’s User Data Policy. For iOS the context.device.id is set the IDFV. To collect the Android Advertising ID provided by Play Services, Segment provides a plugin that can be used to collect that value. This value is set to context.device.advertisingId. For iOS, this plugin can be used to set the IDFA context.device.advertisingId property. FAQs Can I use the catalog of device-mode destinations from Segment’s 1.X.X React-Native release? No, only the plugins listed above are supported in device-mode for Analytics React Native 2.0. Will I still see device-mode integrations listed as false in the integrations object? When you successfully package a plugin in device-mode, you won’t see the integration listed as false in the integrations object for a Segment event. This logic is packaged in the event metadata, and isn’t surfaced in the Segment debugger. Why are my IDs not set in UUID format? Due to limitations with the React Native bridge, Segment doesn’t use UUID format for anonymousId and messageId values in local development. These IDs will be set in UUID format for your live app. How do I set a distinct writeKey for iOS and android? You can set different writeKeys for iOS and Android. This is helpful if you want to send data to different destinations based on the client side platform. To set different writeKeys, you can dynamically set the writeKey when you initialize the Segment client: import { Platform } from ' react-native ' ; import { createClient } from ' @segment/analytics-react-native ' ; const segmentWriteKey = Platform . iOS ? ' ios-writekey ' : ' android-writekey ' ; const segmentClient = createClient ({ writeKey : segmentWriteKey }); What is the instanceId set in context? The instanceId was introduced in V 2.10.1 and correlates events to a particular instance of the client in a scenario when you might have multiple instances on a single app. How do I interact with the integrations object? The integrations object is no longer part of the Segment events method signature. To access the integrations object and control what destinations the event reaches, you can use a Plugin: import { EventType , Plugin , PluginType , SegmentEvent , } from ' @segment/analytics-react-native ' ; export class Modify extends Plugin { type = PluginType . before ; async execute ( event : SegmentEvent ) { if ( event . type == EventType . TrackEvent ) { let integrations = event . integrations ; if ( integrations !== undefined ) { integrations [ ' Appboy ' ] = false ; } } //console.log(event); return event ; } } How do I add to the context Object? Like with the integrations object above, you’ll need to use a plugin to access and modify the context object. For example, if you’d like to add context.groupId to every Track call, you should create a plugin like this: //in AddToContextPlugin.js import { Plugin , PluginType , SegmentEvent , } from ' @segment/analytics-react-native ' ; export class AddToContextPlugin extends Plugin { // Note that `type` is set as a class property // If you do not set a type your plugin will be a `utility` plugin (see Plugin Types above) type = PluginType . enrichment ; async execute ( event : SegmentEvent ) { if ( event . type == EventType . TrackEvent ) { event . context [ ' groupId ' ] = ' test - 6/8 ' } return event ; } } // in App.js import { AddToContextPlugin } from ' ./AddToContextPlugin ' segmentClient . add ({ plugin : new AddToContextPlugin () }); I’ve upgraded to React Native 2.0, but I am still getting warnings in the Google Play Store that my app is not compliant. Why is this? The React Native 2.0 library is compliant with Google Play Store policies. However, Segment recommends that you check to see if there are any old and inactive tracks on the Google Play Store that are not updated to the latest build. If this is the case, we recommend updating those tracks to resolve the issue. Can I set inlineRequires to false in my metro.config.js file? Segment requires the inlineRequires value in your metro.config.js value to be set to true . To disable inlineRequires for certain modules, you can specify this by using a blockList . Can I clear user traits without calling the reset() method? The set method on userInfo can accept a function that receives the current state and returns a modified desired state. Using this method, you can return the current traits, delete any traits you no longer wish to track, and persist the new trait set. segmentClient . userInfo . set (( currentUserInfo ) => { return { ... currentUserInfo , traits : { // All the traits except the one you want to delete persistentTrait : currentUserInfo . persistentTrait } }); If I use a proxy, what Segment endpoint should I send to? If you proxy your events through the proxy config option, you must forward the batched events to https://api.segment.io/v1/b . The https://api.segment.io/v1/batch endpoint is reserved for events arriving from server side sending, and proxying to that endpoint for your mobile events may result in unexpected behavior. Changelog View the Analytics React Native changelog on GitHub . This page was last modified: 12 Aug 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Adding Plugins to the Client Usage Destinations Tools and extensions Utility Methods Control upload with Flush Policies Automatic screen tracking Plugin Architecture Supported Destinations Device identifiers FAQs Changelog Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "underlying",
      "classic",
      "plugintype",
      "alter",
      "connected",
      "productid",
      "trackapplifecycleevents",
      "segment_key",
      "group",
      "introduced",
      "supported",
      "super",
      "custom",
      "source",
      "packages",
      "interface",
      "whichever",
      "weekends",
      "countflushpolicy",
      "community",
      "styles",
      "easiest",
      "brazeeventplugin",
      "options",
      "utility",
      "closed",
      "between",
      "writing",
      "customers",
      "services",
      "triggered",
      "flushinterval",
      "forwards",
      "recommend",
      "permission",
      "platformplugin",
      "begins",
      "documentation",
      "amplitudesessionplugin",
      "server",
      "powerful",
      "triggers",
      "which",
      "state",
      "differences",
      "improve",
      "simple",
      "variable",
      "shouldn",
      "alias",
      "logging",
      "clevertap",
      "execute",
      "processed",
      "latest",
      "lifecycle",
      "clears",
      "calling",
      "utilityplugin",
      "manager",
      "except",
      "onevent",
      "yourself",
      "option",
      "implementation",
      "include",
      "actively",
      "shouldflush",
      "function",
      "addtocontextplugin",
      "errors",
      "const",
      "handles",
      "ongoing",
      "tracks",
      "backgrounded",
      "content",
      "debugger",
      "increase",
      "unintended",
      "certain",
      "defines",
      "grouptraits",
      "appboy",
      "storepersistor",
      "touchableopacity",
      "every",
      "platforms",
      "choose",
      "implementing",
      "helpful",
      "where",
      "newroutename",
      "destinations",
      "flushpolicybase",
      "removing",
      "creating",
      "central",
      "manages",
      "distinct",
      "warnings",
      "batched",
      "while",
      "complies",
      "recommends",
      "eventtype",
      "listener",
      "desired",
      "release",
      "segmentclient",
      "flushonscreeneventspolicy",
      "whatever",
      "sovran",
      "maintains",
      "although",
      "various",
      "receives",
      "field",
      "making",
      "track",
      "configuration",
      "facebook",
      "install",
      "writekeys",
      "context",
      "retain",
      "automatically",
      "initialized",
      "correlates",
      "format",
      "successfully",
      "development",
      "initialize",
      "onstatechange",
      "instanceid",
      "package",
      "upgrade",
      "exported",
      "awesome",
      "should",
      "timerflushpolicy",
      "disable",
      "first",
      "create",
      "value",
      "unsubscribe",
      "usestate",
      "marketing",
      "feedback",
      "queued",
      "builds",
      "event",
      "pipeline",
      "still",
      "control",
      "generated",
      "reach",
      "offers",
      "getting",
      "directly",
      "persistence",
      "apply",
      "incorporate",
      "traits",
      "uploaded",
      "specify",
      "permissions",
      "globally",
      "provides",
      "might",
      "configure",
      "analytics",
      "change",
      "cloud",
      "useful",
      "react",
      "false",
      "clear",
      "startup",
      "trackevent",
      "selected",
      "partialstate",
      "session",
      "standard",
      "passing",
      "sundays",
      "equivalent",
      "things",
      "tiresome",
      "ended",
      "navigates",
      "application",
      "writekey",
      "policiesifnetworkisup",
      "integrate",
      "disconnect",
      "using",
      "screen",
      "sources",
      "websites",
      "another",
      "benefit",
      "property",
      "additional",
      "getactiveroutename",
      "extends",
      "storage",
      "modified",
      "whenever",
      "already",
      "information",
      "override",
      "added",
      "flexibility",
      "store",
      "persistenttrait",
      "explicitly",
      "handling",
      "returns",
      "blocklist",
      "data",
      "firebaseplugin",
      "routename",
      "scenario",
      "libraries",
      "interact",
      "common",
      "persist",
      "github",
      "behavior",
      "string",
      "augment",
      "limit",
      "flagship",
      "import",
      "policy",
      "braze",
      "single",
      "componentname",
      "firebase",
      "assistance",
      "initializing",
      "proxy",
      "popular",
      "happen",
      "network",
      "appsflyer",
      "reserved",
      "build",
      "account",
      "packaged",
      "endpoint",
      "inactive",
      "amplitude",
      "checks",
      "classes",
      "changelog",
      "object",
      "provided",
      "debug",
      "overriding",
      "extra",
      "button",
      "consent",
      "method",
      "completed",
      "place",
      "depending",
      "jsonmap",
      "reaches",
      "component",
      "executes",
      "according",
      "screenevent",
      "seconds",
      "guide",
      "resolve",
      "multiple",
      "repository",
      "count",
      "identify",
      "architecture",
      "uploads",
      "segmentdestination",
      "allows",
      "createclient",
      "required",
      "setroot",
      "proxying",
      "removeflushpolicy",
      "either",
      "dynamically",
      "cleanup",
      "needs",
      "properties",
      "isconnected",
      "level",
      "api",
      "strategy",
      "integration",
      "registercomponentdidappearlistener",
      "going",
      "ideally",
      "listed",
      "tools",
      "manually",
      "vendor",
      "amount",
      "segment_api_key",
      "business",
      "register",
      "advertising",
      "replace",
      "resumes",
      "remove",
      "merge",
      "supports",
      "startupflushpolicy",
      "async",
      "autoaddsegmentdestination",
      "click",
      "visit",
      "reduce",
      "superclass",
      "order",
      "methods",
      "resets",
      "useanalytics",
      "messageid",
      "following",
      "identifier",
      "unsent",
      "updated",
      "500ms",
      "milliseconds",
      "there",
      "about",
      "segmentevent",
      "familiarize",
      "attempting",
      "integrations",
      "instructions",
      "persistor",
      "under",
      "hooks",
      "addeventlistener",
      "being",
      "brazeplugin",
      "problems",
      "setting",
      "saturdays",
      "requires",
      "within",
      "index",
      "compatible",
      "types",
      "creates",
      "feature",
      "modes",
      "netinfo",
      "number",
      "however",
      "tracked",
      "issue",
      "defaultsettings",
      "extension",
      "product",
      "below",
      "functionality",
      "trigger",
      "promise",
      "different",
      "batch",
      "events",
      "essentially",
      "without",
      "trousers",
      "platform",
      "native",
      "layer",
      "flush",
      "android",
      "limitations",
      "inlinerequires",
      "routes",
      "typeof",
      "installed",
      "logic",
      "striped",
      "destination",
      "effects",
      "allow",
      "enrichment",
      "analyticsprovider",
      "today",
      "random",
      "reinitialize",
      "operations",
      "older",
      "would",
      "twice",
      "point",
      "gives",
      "sessions",
      "enable",
      "connection",
      "modules",
      "company",
      "enabled",
      "errorhandler",
      "newuserid",
      "press",
      "sending",
      "setup",
      "timer",
      "local",
      "logger",
      "device",
      "removes",
      "determining",
      "includes",
      "navigation",
      "accept",
      "receiving",
      "special",
      "occurs",
      "flushpolicy",
      "unknown",
      "releases",
      "onpress",
      "maintenance",
      "unique",
      "policies",
      "class",
      "overviews",
      "workspace",
      "forward",
      "after",
      "segmentwritekey",
      "arriving",
      "modify",
      "https",
      "manual",
      "google",
      "thanks",
      "anonymousid",
      "mobile",
      "adding",
      "happens",
      "changes",
      "needed",
      "along",
      "result",
      "compliant",
      "doesn",
      "destinationplugin",
      "argument",
      "background",
      "timeout",
      "detailed",
      "observable",
      "perform",
      "enables",
      "flushpolicies",
      "userid",
      "referred",
      "start",
      "timeline",
      "particular",
      "asyncstorage",
      "opens",
      "detects",
      "extend",
      "idfaplugin",
      "controls",
      "match",
      "instance",
      "access",
      "customize",
      "versions",
      "currentuserinfo",
      "generate",
      "plugin",
      "unexpected",
      "productname",
      "navigationstate",
      "check",
      "longer",
      "upload",
      "upgraded",
      "double",
      "before",
      "interval",
      "detect",
      "based",
      "boolean",
      "opened",
      "other",
      "library",
      "called",
      "growth",
      "maxbatchsize",
      "route",
      "flushes",
      "generates",
      "require",
      "exposes",
      "devices",
      "available",
      "search",
      "addflushpolicy",
      "inside",
      "could",
      "client",
      "through",
      "example",
      "trackdeeplinks",
      "return",
      "catalog",
      "offer",
      "request",
      "follow",
      "process",
      "trait",
      "overview",
      "collectdeviceid",
      "config",
      "connecting",
      "sends",
      "export",
      "segment",
      "delete",
      "userinfo",
      "groupid",
      "second",
      "navigationcontainer",
      "reset",
      "loads",
      "undefined",
      "setroutename",
      "advertisingid",
      "extensions",
      "contact",
      "mybrazeeventplugin",
      "identities",
      "console",
      "learn",
      "deciding",
      "metadata",
      "including",
      "payload",
      "executed",
      "implement",
      "those",
      "identifiers",
      "current",
      "these",
      "outside",
      "attempts",
      "started",
      "large",
      "advantages",
      "processing",
      "container",
      "settings",
      "having",
      "instead",
      "history",
      "prevents",
      "exist",
      "metro",
      "always",
      "description",
      "values",
      "calls",
      "their",
      "access_network_state",
      "created",
      "version",
      "segmentapisettings",
      "collecting",
      "flushat",
      "support",
      "manage",
      "plugins",
      "automatic",
      "tracking",
      "getday",
      "surfaced",
      "backend",
      "begin",
      "action",
      "granularly",
      "signature",
      "androidmanifest",
      "again",
      "expose",
      "usage",
      "default",
      "bridge",
      "instances",
      "execution",
      "actions",
      "style",
      "above",
      "active",
      "comes",
      "internal",
      "found",
      "connections",
      "often",
      "questions",
      "updating",
      "timers",
      "adjust",
      "collect",
      "parameters",
      "users",
      "subscriptions",
      "anywhere",
      "several",
      "accumulate",
      "granular",
      "future",
      "fails",
      "overrides",
      "eventplugin"
    ],
    "howto_steps": [
      "Will I still see device-mode integrations listed as false in the integrations object? When you successfully package a plugin in device-mode, you won’t see the integration listed as false in the integrations object for a Segment event. This logic is packaged in the event metadata, and isn’t surfaced in the Segment debugger. Why are my IDs not set in UUID format? Due to limitations with the React Native bridge, Segment doesn’t use UUID format for anonymousId and messageId values in local development. These IDs will be set in UUID format for your live app. How do I set a distinct writeKey for iOS and android? You can set different writeKeys for iOS and Android. This is helpful if you want to send data to different destinations based on the client side platform. To set different writeKeys, you can dynamically set the writeKey when you initialize the Segment client: import { Platform } from ' react-native ' ; import { createClient } from ' @segment/analytics-react-native ' ; const segmentWriteKey = Platform . iOS ? ' ios-writekey ' : ' android-writekey ' ; const segmentClient = createClient ({ writeKey : segmentWriteKey }); What is the instanceId set in context? The instanceId was introduced in V",
      "react",
      "native react",
      "native",
      "get",
      "random",
      "values or npm install",
      "save @ segment /analytics",
      "react",
      "native react",
      "native",
      "get",
      "random",
      "values If you want to use the default persistor for the Segment Analytics client, you also have to install react",
      "native",
      "async",
      "storage / async",
      "storage or npm install",
      "save @ react",
      "native",
      "async",
      "storage / async",
      "storage To use your own persistence layer you can use the storePersistor option when initializing the client. Make sure you always have a persistor (either by having AsyncStorage package installed or by explicitly passing a value), else you might get unexpected side effects like multiple ‘Application Installed’ events If you’re using iOS, install native modules with: npx pod",
      "install If you’re using Android, you need to add extra permissions to your AndroidManifest.xml . < uses",
      "permission android : name = \" android.permission.ACCESS_NETWORK_STATE \" /> Initialize and configure the Analytics React Native client. The package exposes a method called createClient which you can use to create the Segment Analytics client. This central client manages all the tracking events. import { createClient , AnalyticsProvider } from ' @segment/analytics",
      "When set to false, it will not generate any logs. logger undefined Custom logger instance to expose internal Segment client logging. flushAt 20 How many events to accumulate before sending events to the backend. flushInterval 30 In seconds, how often to send events to the backend. flushPolicies undefined Add more granular control for when to flush, see Adding or removing policies maxBatchSize 1000 How many events to send to the API at once trackAppLifecycleEvents false Enable automatic tracking for app lifecycle events : application installed, opened, updated, backgrounded trackDeepLinks false Enable automatic tracking for when the user opens the app with a deep link. This requires additional setup on iOS, see instructions defaultSettings undefined Settings that will be used if the request to get the settings from Segment fails. Type: SegmentAPISettings autoAddSegmentDestination true Set to false to skip adding the SegmentDestination plugin storePersistor undefined A custom persistor for the store that analytics",
      "Navigation . events (). registerComponentDidAppearListener (({ componentName }) => { segmentClient . screen ( componentName ); }); Plugin Architecture Segment’s plugin architecture enables you to modify and augment how the events are processed before they’re uploaded to the Segment API.  In order to customize what happens after an event is created, you can create and place various Plugins along the processing pipeline that an event goes through. This pipeline is referred to as a timeline. Plugin Types Plugin Type Description before Executes before event processing begins. enrichment Executes as the first level of event processing. destination Executes as events begin to pass off to destinations. after Executes after all event processing is completed. You can use this to perform cleanup operations. utility Executes only with manual calls such as Logging. Plugins can have their own native code (such as the iOS",
      "6/8 ' } return event ; } } // in App.js import { AddToContextPlugin } from ' ./AddToContextPlugin ' segmentClient . add ({ plugin : new AddToContextPlugin () }); I’ve upgraded to React Native 2.0, but I am still getting warnings in the Google Play Store that my app is not compliant. Why is this? The React Native 2.0 library is compliant with Google Play Store policies. However, Segment recommends that you check to see if there are any old and inactive tracks on the Google Play Store that are not updated to the latest build. If this is the case, we recommend updating those tracks to resolve the issue. Can I set inlineRequires to false in my metro.config.js file? Segment requires the inlineRequires value in your metro.config.js value to be set to true . To disable inlineRequires for certain modules, you can specify this by using a blockList . Can I clear user traits without calling the reset() method? The set method on userInfo can accept a function that receives the current state and returns a modified desired state. Using this method, you can return the current traits, delete any traits you no longer wish to track, and persist the new trait set. segmentClient . userInfo . set (( currentUserInfo ) => { return { ... currentUserInfo , traits : { // All the traits except the one you want to delete persistentTrait : currentUserInfo . persistentTrait } }); If I use a proxy, what Segment endpoint should I send to? If you proxy your events through the proxy config option, you must forward the batched events to https://api.segment.io/v1/b . The https://api.segment.io/v1/batch endpoint is reserved for events arriving from server side sending, and proxying to that endpoint for your mobile events may result in unexpected behavior. Changelog View the Analytics React Native changelog on GitHub . This page was last modified: 12 Aug 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Adding Plugins to the Client Usage Destinations Tools and extensions Utility Methods Control upload with Flush Policies Automatic screen tracking Plugin Architecture Supported Destinations Device identifiers FAQs Changelog Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/connections/spec/identify#identities",
    "title": " Spec: Identify | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Spec / Spec: Identify Spec: Identify On this page Example Identities Custom traits The Segment Identify call lets you tie a user to their actions and record traits about them.  It includes a unique User ID and any optional traits you know about the user, like their email, name, and more. Segment University: The Identify Method Check out our high-level overview of the Identify method in Segment University. (Must be logged in to access.) Segment recommends that you make an Identify call: After a user first registers After a user logs in When a user updates their info (for example, they change or add a new address) The first three examples are pretty self-explanatory, but many might ask: why you would call Identify on every page load if you’re storing the userId in the cookie/local storage? Calling Identify in one of Segment’s libraries is one of the first steps to getting started with Segment. Refer to library-specific documentation for more details. Here’s the payload of a typical Identify call with most common fields removed: { \"type\" : \"identify\" , \"traits\" : { \"name\" : \"Peter Gibbons\" , \"email\" : \"peter@example.com\" , \"plan\" : \"premium\" , \"logins\" : 5 }, \"userId\" : \"97980cfea0067\" } And here’s the corresponding JavaScript event that would generate the above payload: analytics . identify ( \" 97980cfea0067 \" , { name : \" Peter Gibbons \" , email : \" peter@example.com \" , plan : \" premium \" , logins : 5 }); Based on the library you use, the syntax in the examples might be different. You can find library-specific documentation on the Sources Overview page. Beyond the common fields, an Identify call has the following fields: Field Type Description traits optional Object Free-form dictionary of traits of the user, like email or name .\n\n  See the Traits field docs for a list of reserved trait names. userId required; optional if anonymousID is set instead String Unique identifier for the user in your database.\n\n  A userId or an anonymousId is required.\n\n  See the Identities docs for more details. Note that these traits coming in from your source events are called custom traits . Example Here’s a complete example of an Identify call: { \"anonymousId\" : \"507f191e810c19729de860ea\" , \"channel\" : \"browser\" , \"context\" : { \"ip\" : \"8.8.8.8\" , \"userAgent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36\" }, \"integrations\" : { \"All\" : false , \"Mixpanel\" : true , \"Salesforce\" : true }, \"messageId\" : \"022bb90c-bbac-11e4-8dfc-aa07a5b093db\" , \"receivedAt\" : \"2015-02-23T22:28:55.387Z\" , \"sentAt\" : \"2015-02-23T22:28:55.111Z\" , \"timestamp\" : \"2015-02-23T22:28:55.111Z\" , \"traits\" : { \"name\" : \"Peter Gibbons\" , \"email\" : \"peter@example.com\" , \"plan\" : \"premium\" , \"logins\" : 5 , \"address\" : { \"street\" : \"6th St\" , \"city\" : \"San Francisco\" , \"state\" : \"CA\" , \"postalCode\" : \"94103\" , \"country\" : \"USA\" } }, \"type\" : \"identify\" , \"userId\" : \"97980cfea0067\" , \"version\" : \"1.1\" } Create your own Identify call Use the following interactive code pen to see what your Identify calls would look like with user-provided information: Sample Identify Name: Please enter your name. Email: Please enter a valid email address. Plan: Please enter a valid Plan name. Logins: Please enter only numbers in the 'Logins' field. Street: Please enter a valid street address, including the street name and number. City: Please enter a valid city name in the 'City' field. State: Please enter a valid two-letter state code in all caps, like 'CA' for California. Zip Code: Please enter a valid five-digit zip code. Country: Please enter a two-letter country code in all caps, like 'US' for United States. Sample Identify Call Sample output goes here! Identities The Identify call specifies a customer identity that you can reference across the customer’s whole lifetime. Every Identify call must have a User ID or an Anonymous ID , depending on how much you know about the user in question. Anonymous ID There are certain cases where you don’t actually know who the user is according to your database, but you still want to be able to tie them to traits, events, or page views. For example, you may not know who a user is when tracking newsletter signups or anonymous page views. In these cases, you should use an Anonymous ID. The Anonymous ID can be any pseudo-unique identifier. For example, on your servers you can use a session id. If you don’t have any readily available identifier, you can always generate a new random one — Segment recommends UUIDv4 format . Segment’s browser and mobile libraries automatically use Anonymous IDs to keep track of users as they navigate around your website or app, so you don’t need to worry about them when using those libraries. Here’s an example of a JavaScript event for an anonymous user: analytics . identify ({ subscriptionStatus : ' inactive ' }); User ID User IDs are a more permanent and robust identifier, like a database ID. Since these IDs are consistent across a customer’s lifetime, Identify calls should include a User ID as often as possible. A User ID is usually the unique identifier that you recognize a user by in your own database. For example, if you’re using MongoDB, User IDs might look something like this: 507f191e810c19729de860ea . Segment recommends using database IDs, in uuidv4 format , instead of email addresses or usernames because database IDs never change. That guarantees that even if the user changes their email address, you can still recognize them as the same person in all of your analytics tools, and you’ll be able to correlate analytics data with your own internal database. Instead of using an email address or a username as a User ID, send them along as custom traits . Custom traits Custom traits are pieces of information you know about a user that are included in an Identify call. These could be demographics like age or gender , account-specific like plan , or even things like whether a user has seen a particular A/B test variation. Segment has reserved some custom traits that have semantic meanings for users, and will handle them in special ways. For example, Segment always expects email to be a string of the user’s email address. Segment sends this on to destinations like Mailchimp that require an email address for their tracking. Only use reserved traits for their intended meaning. Reserved custom traits Segment has standardized: Trait Type Description address Object Street address of a user optionally containing: city , country , postalCode , state , or street age Number Age of a user avatar String URL to an avatar image for the user birthday Date User’s birthday company Object Company the user represents, optionally containing: name (String), id (String or Number), industry (String), employee_count (Number) or plan (String) createdAt Date Date the user’s account was first created. Segment recommends using ISO-8601 date strings. description String Description of the user email String Email address of a user firstName String First name of a user gender String Gender of a user id String Unique ID in your database for a user lastName String Last name of a user name String Full name of a user. If you only pass a first and last name Segment automatically fills in the full name for you. phone String Phone number of a user title String Title of a user, usually related to their position at a specific company. Example: “VP of Engineering” username String User’s username. This should be unique to each user, like the usernames of Twitter or GitHub. website String Website of a user You might be used to some destinations recognizing special traits by slightly different names. For example, Mixpanel recognizes a $created trait when the user’s account was first created, while Intercom recognizes the same trait as created_at instead. Segment attempts to handle all the destination-specific conversions for you automatically. If you need help understanding if a specific field will be converted to a destination, take a look at Segment’s open source integration code , view the destination’s documentation, or contact Segment support . You can pass these reserved traits using camelCase or snake_case , so in JavaScript you can match the rest of your camelCase code by sending firstName , while in Ruby you can match your snake-case code by sending first_name . That way the API never seems alien to your code base. Keep in mind that not all destinations support these reserved traits, so sending these traits in camelCase and snake_case can result in two sets of traits in other destinations. This page was last modified: 23 Apr 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Example Identities Custom traits Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "signups",
      "website",
      "birthday",
      "match",
      "applewebkit",
      "access",
      "pretty",
      "lifetime",
      "javascript",
      "record",
      "assistance",
      "robust",
      "typical",
      "updates",
      "visit",
      "traits",
      "generate",
      "check",
      "custom",
      "meaning",
      "firstname",
      "fields",
      "source",
      "might",
      "names",
      "database",
      "messageid",
      "based",
      "analytics",
      "twitter",
      "subscriptionstatus",
      "following",
      "identifier",
      "change",
      "chrome",
      "customer",
      "there",
      "created_at",
      "around",
      "because",
      "removed",
      "97980cfea0067",
      "about",
      "false",
      "pseudo",
      "title",
      "507f191e810c19729de860ea",
      "integrations",
      "easiest",
      "websites",
      "other",
      "library",
      "called",
      "identity",
      "session",
      "mozilla",
      "growth",
      "interactive",
      "addresses",
      "uuidv4",
      "meanings",
      "states",
      "problems",
      "permanent",
      "three",
      "intel",
      "require",
      "converted",
      "possible",
      "available",
      "things",
      "anonymous",
      "documentation",
      "navigate",
      "could",
      "position",
      "valid",
      "example",
      "integrate",
      "specific",
      "state",
      "gecko",
      "sources",
      "postalcode",
      "number",
      "using",
      "macintosh",
      "snake_case",
      "improve",
      "request",
      "trait",
      "guarantees",
      "specifies",
      "related",
      "storage",
      "overview",
      "modified",
      "sentat",
      "sends",
      "calling",
      "segment",
      "steps",
      "information",
      "username",
      "servers",
      "recognizing",
      "california",
      "different",
      "events",
      "include",
      "94103",
      "storing",
      "cookie",
      "numbers",
      "premium",
      "never",
      "data",
      "coming",
      "receivedat",
      "intended",
      "libraries",
      "contact",
      "first_name",
      "usernames",
      "street",
      "identities",
      "common",
      "francisco",
      "certain",
      "github",
      "string",
      "useragent",
      "output",
      "destination",
      "complete",
      "10_9_5",
      "including",
      "included",
      "channel",
      "avatar",
      "payload",
      "those",
      "university",
      "whether",
      "handle",
      "explanatory",
      "address",
      "these",
      "every",
      "question",
      "started",
      "something",
      "random",
      "browser",
      "standardized",
      "engineering",
      "would",
      "attempts",
      "pieces",
      "slightly",
      "helpful",
      "where",
      "destinations",
      "optional",
      "reserved",
      "timestamp",
      "account",
      "conversions",
      "registers",
      "instead",
      "cases",
      "email",
      "inactive",
      "while",
      "object",
      "always",
      "mongodb",
      "description",
      "khtml",
      "recommends",
      "provided",
      "calls",
      "readily",
      "camelcase",
      "company",
      "beyond",
      "their",
      "snake",
      "method",
      "alien",
      "usually",
      "sending",
      "depending",
      "employee_count",
      "fills",
      "strings",
      "according",
      "local",
      "createdat",
      "created",
      "image",
      "refer",
      "includes",
      "field",
      "version",
      "please",
      "digit",
      "united",
      "letter",
      "whole",
      "demographics",
      "special",
      "industry",
      "unique",
      "gender",
      "dictionary",
      "phone",
      "recognizes",
      "optionally",
      "support",
      "track",
      "tracking",
      "identify",
      "salesforce",
      "after",
      "containing",
      "since",
      "peter",
      "represents",
      "thanks",
      "understanding",
      "anonymousid",
      "context",
      "automatically",
      "format",
      "mobile",
      "required",
      "lastname",
      "safari",
      "logins",
      "logged",
      "reference",
      "semantic",
      "actions",
      "above",
      "aa07a5b093db",
      "level",
      "changes",
      "across",
      "should",
      "along",
      "api",
      "internal",
      "integration",
      "views",
      "first",
      "connections",
      "result",
      "often",
      "newsletter",
      "gibbons",
      "intercom",
      "create",
      "questions",
      "mixpanel",
      "syntax",
      "23t22",
      "correlate",
      "person",
      "recognize",
      "tools",
      "seems",
      "feedback",
      "enter",
      "corresponding",
      "users",
      "userid",
      "event",
      "particular",
      "consistent",
      "actually",
      "examples",
      "still",
      "sample",
      "variation",
      "expects",
      "mailchimp",
      "country",
      "worry",
      "022bb90c",
      "details"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#adding-a-plugin",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/libraries/mobile/react-native/react-native-plugin-architecture/",
    "title": " Analytics React Native Plugin Architecture | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Libraries / Mobile / React native / Analytics React Native Plugin Architecture Analytics React Native Plugin Architecture On this page Plugin Architecture Plugin Architecture Segment’s plugin architecture enables you to modify and augment how the events are processed before they’re uploaded to the Segment API.  In order to customize what happens after an event is created, you can create and place various Plugins along the processing pipeline that an event goes through. This pipeline is referred to as a timeline. Plugin Types Plugin Type Description before Executes before event processing begins. enrichment Executes as the first level of event processing. destination Executes as events begin to pass off to destinations. after Executes after all event processing is completed. You can use this to perform cleanup operations. utility Executes only with manual calls such as Logging. Plugins can have their own native code (such as the iOS-only IdfaPlugin or wrap an underlying library (such as the FirebasePlugin which uses react-native-firebase under the hood). Destination Plugins Segment is an out-of-the-box DestinationPlugin . You can add as many other destination plugins as you like and upload events and data to them. If you don’t want the Segment destination plugin, you can pass autoAddSegmentDestination = false in the options when setting up your client. This prevents the SegmentDestination plugin from being added automatically for you. Adding Plugins You can add a plugin at any time through the segmentClient.add() method. import { createClient } from ' @segment/analytics-react-native ' ; import { AmplitudeSessionPlugin } from ' @segment/analytics-react-native-plugin-amplitude ' ; import { FirebasePlugin } from ' @segment/analytics-react-native-plugin-firebase ' ; import { IdfaPlugin } from ' @segment/analytics-react-native-plugin-idfa ' ; const segmentClient = createClient ({ writeKey : ' SEGMENT_KEY ' }); segmentClient . add ({ plugin : new AmplitudeSessionPlugin () }); segmentClient . add ({ plugin : new FirebasePlugin () }); segmentClient . add ({ plugin : new IdfaPlugin () }); Writing your own Plugins Plugins implement as ES6 Classes. To get started, familiarize yourself with the available classes in /packages/core/src/plugin.ts . The available plugin classes are: Plugin EventPlugin DestinationPlugin UtilityPlugin PlatformPlugin Any plugin must be an extension of one of these classes.\nYou can then customize the functionality by overriding different methods on the base class. For example, here is a simple Logger plugin: // logger.js import { Plugin , PluginType , SegmentEvent , } from ' @segment/analytics-react-native ' ; export class Logger extends Plugin { // Note that `type` is set as a class property // If you do not set a type your plugin will be a `utility` plugin (see Plugin Types above) type = PluginType . before ; execute ( event : SegmentEvent ) { console . log ( event ); return event ; } } // app.js import { Logger } from ' ./logger ' ; segmentClient . add ({ plugin : new Logger () }); As the plugin overrides the execute() method, this Logger calls console.log for every event going through the Timeline. Add a custom Destination Plugin You can add custom plugins to Destination Plugins. For example, you could implement the following logic to send events to Braze on weekends only: import { createClient } from ' @segment/analytics-react-native ' ; import { BrazePlugin } from ' @segment/analytics-react-native-plugin-braze ' ; import { BrazeEventPlugin } from ' ./BrazeEventPlugin ' ; const segmentClient = createClient ({ writeKey : ' SEGMENT_KEY ' }); const brazeplugin = new BrazePlugin (); const myBrazeEventPlugin = new BrazeEventPlugin (); brazeplugin . add ( myBrazeEventPlugin ); segmentClient . add ({ plugin : brazeplugin }); // Plugin code for BrazeEventPlugin.ts import { Plugin , PluginType , SegmentEvent , } from ' @segment/analytics-react-native ' ; export class BrazeEventPlugin extends Plugin { type = PluginType . before ; execute ( event : SegmentEvent ) { var today = new Date (); if ( today . getDay () === 6 || today . getDay () === 0 ) { return event ; } } } Segment would then send events to the Braze Destination Plugin on Saturdays and Sundays, based on device time. This page was last modified: 23 May 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Plugin Architecture Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "underlying",
      "plugintype",
      "autoaddsegmentdestination",
      "visit",
      "segment_key",
      "customize",
      "uploaded",
      "plugin",
      "upload",
      "custom",
      "packages",
      "before",
      "order",
      "methods",
      "based",
      "analytics",
      "weekends",
      "following",
      "change",
      "react",
      "false",
      "segmentevent",
      "familiarize",
      "easiest",
      "brazeeventplugin",
      "options",
      "utility",
      "library",
      "other",
      "under",
      "growth",
      "writing",
      "sundays",
      "being",
      "brazeplugin",
      "problems",
      "setting",
      "available",
      "saturdays",
      "platformplugin",
      "begins",
      "documentation",
      "amplitudesessionplugin",
      "could",
      "writekey",
      "through",
      "client",
      "example",
      "types",
      "return",
      "which",
      "integrate",
      "websites",
      "catalog",
      "sources",
      "improve",
      "property",
      "simple",
      "request",
      "extends",
      "modified",
      "extension",
      "logging",
      "execute",
      "processed",
      "export",
      "segment",
      "utilityplugin",
      "functionality",
      "different",
      "yourself",
      "events",
      "added",
      "native",
      "firebaseplugin",
      "data",
      "const",
      "libraries",
      "contact",
      "mybrazeeventplugin",
      "console",
      "logic",
      "destination",
      "augment",
      "import",
      "enrichment",
      "today",
      "braze",
      "implement",
      "these",
      "firebase",
      "assistance",
      "every",
      "started",
      "operations",
      "would",
      "helpful",
      "destinations",
      "processing",
      "account",
      "prevents",
      "eventplugin",
      "amplitude",
      "classes",
      "description",
      "overriding",
      "calls",
      "segmentclient",
      "their",
      "method",
      "completed",
      "place",
      "executes",
      "logger",
      "created",
      "device",
      "various",
      "support",
      "class",
      "plugins",
      "architecture",
      "after",
      "getday",
      "begin",
      "segmentdestination",
      "modify",
      "manual",
      "thanks",
      "automatically",
      "createclient",
      "mobile",
      "cleanup",
      "above",
      "adding",
      "happens",
      "level",
      "api",
      "along",
      "first",
      "connections",
      "destinationplugin",
      "create",
      "going",
      "questions",
      "feedback",
      "tools",
      "perform",
      "enables",
      "referred",
      "event",
      "timeline",
      "pipeline",
      "overrides",
      "idfaplugin"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/spec/mobile/#lifecycle-events",
    "title": " Native Mobile Spec | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Spec / Native Mobile Spec Native Mobile Spec On this page Overview of events Lifecycle events Campaign events One of the core components of the Segment Spec is the Track method. It records any arbitrary event that the user has triggered. For Mobile tracking, in addition to Screen calls, you’ll want to send specific event names that Segment recognizes semantically. That way, Segment can transform them correctly before sending them off to downstream destinations. By standardizing the events that comprise the core mobile application lifecycle and associated mobile campaign and referral events , Segment and its partners can, wherever possible, forward these events on your behalf and build downstream destinations that take full advantage of the semantic meaning associated with these events and their properties. If you’re already collecting similar events, Segment recommends migrating to these event names so that you can take advantage of available features in Segment destinations that depend on the spec as they become available. These events pair nicely with Segment’s ecommerce spec for mobile marketplaces to take full advantage of features like dynamic ads in Facebook and the ability to take full advantage of server-side destinations with Mobile Attribution Platforms like Tune and Kochava . Per the Privacy Policy and applicable terms, don’t send Segment sensitive personal information about your users. Certain features from Segment and its partners allow you to opt-in to automatically track data (for example: Application Installed or Deep Link Clicked). When working with these features and Segment in general, be cognizant of the data that is being tracked to ensure its matching both your obligations under your agreement with Segment and the privacy expectations of your users. Overview of events The Segment Native Mobile Spec includes the following semantic events: Application Lifecycle Events Application Installed Application Opened Application Backgrounded Application Foregrounded Application Updated Application Uninstalled Application Crashed Campaign Events Install Attributed Push Notification Received Push Notification Tapped Push Notification Bounced Deep Link Opened Deep Link Clicked Segment recommends using the above event names if you’re going to be integrating the events yourself. This will ensure that they can be mapped effectively in downstream tools. Lifecycle events Mobile applications live within a fairly bounded lifecycle. To understand and communicate effectively with your users, it’s crucial to instrument the core flows associated with installing and opening your app. The following events allow you to get a picture of top-line metrics such as DAUs, MAUs, and Screen Views per session. Automatic lifecycle event tracking is optional - you can learn how to enable and disable them in Segment’s docs for each library below: iOS Swift Android Kotlin React Native The following events will be tracked automatically when lifecycle events are enabled in all mobile libraries: Application Installed Application Opened Application Updated In Kotlin, Swift, and React Native, the following additional events are tracked: Application Backgrounded In Swift, the following event is also tracked: Application Foregrounded Application Installed This event fires when a user first opens your mobile application. Note, if the user never opens your app after installing, Segment will not collect this event. This event doesn’t wait for attribution or campaign information to be received, and is collected automatically by Segment’s SDKs. Advertising providers like Facebook and Google require discrete install events to correctly attribute installs to ads served through their platform. { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Application Installed\" , \"properties\" : { \"version\" : \"1.2.3\" , \"build\" : \"1234\" } } Property Type Description version String The version installed. build String The build number of the installed app. Application Opened This event fires when a user launches or foregrounds your mobile application after the first open. It will fire after the Application Installed event and again after the app is re-opened after being closed. This event does not wait for attribution information to be received but may include information about referring applications or deep link URLs if available to the application upon open. { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Application Opened\" , \"properties\" : { \"from_background\" : false , \"referring_application\" : \"GMail\" , \"url\" : \"url://location\" } } Property Type Description from_background Boolean If application transitioned from “Background” to “Inactive” state prior to foregrounding (as opposed to from “Not Running” state). url String The value of UIApplicationLaunchOptionsURLKey from launchOptions . Collected on iOS only . referring_application String The value of UIApplicationLaunchOptionsSourceApplicationKey from launchOptions . version String The version installed. build String The build number of the installed app. Application Backgrounded This event should be sent when a user backgrounds the application upon applicationDidEnterBackground . { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Application Backgrounded\" , \"properties\" : {} } Application Foregrounded This event is fired when a user opens the app or brings it back into the foreground of their device. This is only collected by the Swift library. { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Application Foregrounded\" , \"properties\" : {} } Application Updated This event fires when a user updates the application. Segment’s SDK will automatically collect this event instead of an “Application Opened” event when we determine that the Open is first since an update. { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Application Updated\" , \"properties\" : { \"previous_version\" : \"1.1.2\" , \"previous_build\" : \"1234\" , \"version\" : \"1.2.0\" , \"build\" : \"1456\" } } Property Type Description previous_version String The previously recorded version. previous_build String The previously recorded build. version String The new version. build String The new build. Application Uninstalled Fire this event when a user uninstalls the application. Some destination partners will detect this for you using Silent Push Notifications through their SDK. You might be able to send these events to Segment using a callback. Visit the partner docs to see if this is available. { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Application Uninstalled\" , \"properties\" : {} } Application Crashed You can send this event when you receive a crash notification from your app, but it is not meant to supplant traditional crash reporting tools. By tracking crashes as an analytics event with device and user information, you can analyze the which types of users are impacted by crashes and how those crashes, in turn, affect their engagement. You may also want to target those customers with tailored communications in other channels if they’ve encountered several crashes. Segment does not collect this event. To capture the event, use a destination that collects this data and route that event back to Segment through a webhook or some other callback. { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Application Crashed\" , \"properties\" : {} } Campaign events As the walls between apps become increasingly lowered, capturing information about the content and campaigns that drive users to engage with your app is critical to building more targeted, relevant, personalized experiences for your users. Segment does not collect any campaign events automatically unless configured to do so. Install Attributed When Segment or an integrated partner can discern the source of an install, we’ll collect an Install Attributed event. This event may be sent to Segment using server-to-server connection from your attribution provider, or directly on the device using packaged destinations. In either case, this will happen after install, and does not apply to all installs, which is why it is a discrete event. { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Install Attributed\" , \"properties\" : { \"provider\" : \"Tune/Kochava/Branch/AppsFlyer\" , \"campaign\" : { \"source\" : \"Network/FB/AdWords/MoPub/Source\" , \"name\" : \"Campaign Name\" , \"content\" : \"Organic Content Title\" , \"ad_creative\" : \"Red Hello World Ad\" , \"ad_group\" : \"Red Ones\" } } } Property Type Description provider String The attribution provider. campaign[source] String Campaign source — attributed ad network. campaign[name] String The name of the attributed campaign. campaign[medium] String Identifies what type of link was used. campaign[content] String The content of the campaign. campaign[ad_creative] String The ad creative name. campaign[ad_group] String The ad group name. Push Notification Received This event can be sent when a push notification is received in the app. It can be automatically enabled on iOS . { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Push Notification Received\" , \"properties\" : { \"campaign\" : { \"medium\" : \"Push\" , \"source\" : \"Vendor Name\" , \"name\" : \"Referral Flow\" , \"content\" : \"Your friend invited you to play a match.\" } } } Property Type Description campaign[name] String Campaign name. campaign[medium] String Identifies what type of link was used (Push Notification). campaign[content] String Push notification content. campaign[source] String Designates the push provider. (Optional) Push Notification Tapped This event can be sent when a user taps on a push notification associated with your app. It can be automatically enabled on iOS . { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Push Notification Tapped\" , \"properties\" : { \"action\" : \"Accept\" , \"campaign\" : { \"medium\" : \"Push\" , \"source\" : \"Vendor Name\" , \"name\" : \"Referral Flow\" , \"content\" : \"Your friend invited you to play a match.\" } } } Property Type Description action String If this notification is “actionable”, the custom action tapped. Default: “Open” campaign[name] String Campaign name. campaign[medium] String Identifies what type of link was used (Push Notification). campaign[content] String Push notification content. campaign[source] String Designates the push provider. (Optional) Push Notification Bounced This event fires when a push notification from a provider bounces. If your push notification provider forwards push lifecycle events to Segment, they should include this event in their suite. { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Push Notification Bounced\" , \"properties\" : { \"action\" : \"Accept\" , \"campaign\" : { \"medium\" : \"Push\" , \"source\" : \"Vendor Name\" , \"name\" : \"Referral Flow\" , \"content\" : \"Your friend invited you to play a match.\" } } } Property Type Description action String If this notification is “actionable”, the custom action tapped. Default: “Open” campaign[name] String Campaign name. campaign[medium] String Identifies what type of link was used (Push Notification). campaign[content] String Push notification content. campaign[source] String Designates the push provider. (Optional) Deep Link Opened When your application is opened using a referring link, Segment or your packaged deep link partner can fire this event on your behalf. If the deep link has additional data associated with it, either passed through the third party service or as annotations in launchOption , you may want to include those values as properties here as well. This event is fired in addition to the associated Application Opened event. { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Deep Link Opened\" , \"properties\" : { \"provider\" : \"Branch Metrics\" , \"url\" : \"app://landing\" } } Property Type Description provider String The deep link provider. url String The App URL opened. Deep Link Clicked This event may be provided by deep link providers postback mechanisms or an internal redirect service if you use one in order to provide a waypoint funnel step between your content or advertisement and the resulting app open. { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Deep Link Clicked\" , \"properties\" : { \"provider\" : \"Branch Metrics\" , \"url\" : \"brnch.io/1234\" } } Property Type Description provider String The deep link provider. url String The deep link URL clicked. This page was last modified: 31 May 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Overview of events Lifecycle events Campaign events Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "working",
      "correctly",
      "uninstalled",
      "group",
      "previous_version",
      "meaning",
      "custom",
      "crash",
      "source",
      "attribution",
      "nicely",
      "title",
      "easiest",
      "referring_application",
      "notifications",
      "closed",
      "between",
      "customers",
      "triggered",
      "analyze",
      "referral",
      "forwards",
      "comprise",
      "impacted",
      "documentation",
      "server",
      "applicationdidenterbackground",
      "integrated",
      "redirect",
      "communicate",
      "creative",
      "which",
      "state",
      "improve",
      "installing",
      "lifecycle",
      "yourself",
      "standardizing",
      "include",
      "backgrounded",
      "collects",
      "content",
      "terms",
      "arbitrary",
      "certain",
      "notification",
      "launches",
      "kochava",
      "personal",
      "platforms",
      "helpful",
      "collected",
      "designates",
      "destinations",
      "swift",
      "crashed",
      "annotations",
      "recommends",
      "ad_creative",
      "installs",
      "organic",
      "discern",
      "silent",
      "tapped",
      "track",
      "discrete",
      "fired",
      "invited",
      "facebook",
      "install",
      "attributed",
      "automatically",
      "semantic",
      "walls",
      "fires",
      "gmail",
      "should",
      "disable",
      "referring",
      "first",
      "mopub",
      "create",
      "launchoptions",
      "expectations",
      "value",
      "feedback",
      "fairly",
      "event",
      "dynamic",
      "directly",
      "partner",
      "apply",
      "affect",
      "bounced",
      "determine",
      "advertisement",
      "names",
      "might",
      "adwords",
      "configured",
      "analytics",
      "change",
      "bounded",
      "react",
      "false",
      "session",
      "supplant",
      "encountered",
      "depend",
      "served",
      "application",
      "migrating",
      "provide",
      "partners",
      "integrate",
      "screen",
      "using",
      "websites",
      "property",
      "additional",
      "modified",
      "already",
      "information",
      "communications",
      "components",
      "medium",
      "capture",
      "data",
      "applicable",
      "service",
      "libraries",
      "string",
      "policy",
      "privacy",
      "campaigns",
      "identifies",
      "effectively",
      "assistance",
      "actionable",
      "engagement",
      "happen",
      "network",
      "appsflyer",
      "build",
      "account",
      "packaged",
      "drive",
      "personalized",
      "inactive",
      "wherever",
      "provided",
      "method",
      "running",
      "recognizes",
      "suite",
      "since",
      "traditional",
      "applications",
      "provider",
      "critical",
      "either",
      "properties",
      "picture",
      "views",
      "kotlin",
      "going",
      "tools",
      "vendor",
      "instrument",
      "advertising",
      "metrics",
      "unless",
      "visit",
      "foregrounded",
      "mapped",
      "reporting",
      "order",
      "transform",
      "following",
      "opening",
      "updated",
      "about",
      "funnel",
      "tailored",
      "obligations",
      "under",
      "providers",
      "being",
      "problems",
      "brings",
      "possible",
      "ad_group",
      "previously",
      "within",
      "flows",
      "landing",
      "types",
      "specific",
      "become",
      "number",
      "tracked",
      "below",
      "friend",
      "events",
      "platform",
      "channels",
      "native",
      "never",
      "building",
      "android",
      "similar",
      "update",
      "integrating",
      "installed",
      "destination",
      "allow",
      "attribute",
      "downstream",
      "target",
      "third",
      "optional",
      "enable",
      "semantically",
      "foregrounding",
      "connection",
      "enabled",
      "sending",
      "matching",
      "ensure",
      "device",
      "includes",
      "party",
      "accept",
      "foreground",
      "uninstalls",
      "forward",
      "after",
      "behalf",
      "advantage",
      "google",
      "thanks",
      "backgrounds",
      "mobile",
      "engage",
      "recorded",
      "lowered",
      "agreement",
      "ecommerce",
      "doesn",
      "bounces",
      "world",
      "addition",
      "resulting",
      "background",
      "targeted",
      "userid",
      "brnch",
      "opens",
      "callback",
      "launchoption",
      "uiapplicationlaunchoptionssourceapplicationkey",
      "crashes",
      "received",
      "match",
      "relevant",
      "updates",
      "features",
      "before",
      "detect",
      "capturing",
      "boolean",
      "opened",
      "other",
      "library",
      "experiences",
      "growth",
      "records",
      "route",
      "associated",
      "foregrounds",
      "uiapplicationlaunchoptionsurlkey",
      "require",
      "available",
      "from_background",
      "campaign",
      "through",
      "sensitive",
      "example",
      "request",
      "overview",
      "meant",
      "segment",
      "hello",
      "webhook",
      "receive",
      "previous_build",
      "postback",
      "contact",
      "learn",
      "those",
      "clicked",
      "location",
      "these",
      "started",
      "019mr8mf4r",
      "waypoint",
      "instead",
      "understand",
      "branch",
      "description",
      "values",
      "calls",
      "their",
      "passed",
      "ability",
      "marketplaces",
      "version",
      "collecting",
      "cognizant",
      "support",
      "automatic",
      "tracking",
      "action",
      "again",
      "default",
      "increasingly",
      "opposed",
      "above",
      "general",
      "transitioned",
      "internal",
      "connections",
      "prior",
      "questions",
      "mechanisms",
      "collect",
      "users",
      "several",
      "crucial"
    ],
    "howto_steps": [
      "you can learn how to enable and disable them in Segment’s docs for each library below: iOS Swift Android Kotlin React Native The following events will be tracked automatically when lifecycle events are enabled in all mobile libraries: Application Installed Application Opened Application Updated In Kotlin, Swift, and React Native, the following additional events are tracked: Application Backgrounded In Swift, the following event is also tracked: Application Foregrounded Application Installed This event fires when a user first opens your mobile application. Note, if the user never opens your app after installing, Segment will not collect this event. This event doesn’t wait for attribution or campaign information to be received, and is collected automatically by Segment’s SDKs. Advertising providers like Facebook and Google require discrete install events to correctly attribute installs to ads served through their platform. { \"userId\" : \"019mr8mf4r\" , \"type\" : \"track\" , \"event\" : \"Application Installed\" , \"properties\" : { \"version\" : \"1.2.3\" , \"build\" : \"1234\" } } Property Type Description version String The version installed. build String The build number of the installed app. Application Opened This event fires when a user launches or foregrounds your mobile application after the first open. It will fire after the Application Installed event and again after the app is re"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/libraries/",
    "title": " Sources Catalog | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Sources Catalog Sources Catalog Below is a list of the available sources on the Segment platform. Website Javascript Shopify (by Littledata) Mobile Apple Factual Engine Beta Flutter Beta Kotlin (Android) React Native Unity Xamarin Server .NET Clojure Go HTTP API Java Kotlin PHP Pixel Tracking API Python Ruby A/B Testing ConfigCat Beta Insider LaunchDarkly Leanplum Statsig Beta Advertising Facebook Ads Google Ads ProveSource Analytics Amplitude Cohorts Beamer Candu GWEN Webhooks Beta Looker Mixpanel Cohorts Moesif API Analytics Navattic Beta Pendo Shopify - Powered by Fueled Upollo Beta Attribution Shopify - Powered by Fueled CRM Aircall Freshchat Beta HubSpot Moesif API Analytics OneTrust Beta Paytronix Beta Salesforce Custom Amazon S3 Customer Success Aircall Beamer Candu CommandBar Gladly Moesif API Analytics ProveSource Refiner Email Marketing ActiveCampaign AutopilotHQ Blueshift Braze Customer.io Drip Facebook Lead Ads Beta Inflection Insider Intercom Iterable Klaviyo Klenty Leanplum Listrak Mailchimp Mailjet Mailmodo Beta Mandrill Marketo MoEngage (Source) Nudgespot Paytronix Beta Salesforce Marketing Cloud Selligent Marketing Cloud SendGrid SendGrid Marketing Campaigns Beta Vero Yotpo Beta Enrichment Alloy Flow Beta Bluedot Factual Engine Beta Foursquare Movement Herow LiveLike (Source) Beta One Creation Beta Quin AI Beta Radar Refiner Feature Flagging ConfigCat Beta LaunchDarkly Helpdesk Aircall Gladly Zendesk Learning Management System Synap Beta WorkRamp Livechat Blip Beta Chatlio Freshchat Beta Marketing Automation Airship Antavo Beta Bluedot CleverTap Foursquare Movement Friendbuy Inflection Insider Listrak Mailmodo Beta MoEngage (Source) Paytronix Beta ProveSource Pushwoosh Source Beta Selligent Marketing Cloud SendGrid Marketing Campaigns Beta Voucherify Beta White Label Loyalty Beta Yotpo Beta Ott Roku (alpha) Payments Stripe Performance Monitoring Moesif API Analytics Synap Beta Personalization Bluedot Candu CleverTap CommandBar Elastic Path Beta Elastic Path CX Studio Beta Foursquare Movement GWEN Webhooks Beta Insider Leanplum LiveLike (Source) Beta One Creation Beta Paytronix Beta ProveSource Pushwoosh Source Beta Qualtrics Quin AI Beta Upollo Beta UserGuiding Beta White Label Loyalty Beta Raw Data Alloy Flow Beta Authvia Beta Elastic Path Beta Elastic Path CX Studio Beta Referrals Friendbuy Voucherify Beta SMS & Push Notifications Airship Beamer Braze Insider Leanplum OneSignal Beta Selligent Marketing Cloud Twilio Surveys Beamer Delighted Jebbit Qualtrics Refiner UserGuiding Beta Virtual Assistant IBM Watson Assistant On this page Website Mobile Server A/B Testing Advertising Analytics Attribution CRM Custom Customer Success Email Marketing Enrichment Feature Flagging Helpdesk Learning Management System Livechat Marketing Automation Ott Payments Performance Monitoring Personalization Raw Data Referrals SMS & Push Notifications Surveys Virtual Assistant Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "authvia",
      "website",
      "clojure",
      "livelike",
      "javascript",
      "onesignal",
      "custom",
      "antavo",
      "source",
      "xamarin",
      "klenty",
      "iterable",
      "attribution",
      "analytics",
      "commandbar",
      "factual",
      "engine",
      "leanplum",
      "customer",
      "personalization",
      "cloud",
      "looker",
      "react",
      "payments",
      "notifications",
      "synap",
      "system",
      "insider",
      "friendbuy",
      "studio",
      "klaviyo",
      "available",
      "white",
      "flutter",
      "assistant",
      "documentation",
      "workramp",
      "server",
      "freshchat",
      "provesource",
      "feature",
      "userguiding",
      "mailmodo",
      "testing",
      "catalog",
      "sources",
      "refiner",
      "improve",
      "marketo",
      "qualtrics",
      "label",
      "python",
      "clevertap",
      "pushwoosh",
      "below",
      "segment",
      "moesif",
      "performance",
      "powered",
      "monitoring",
      "alpha",
      "platform",
      "pixel",
      "native",
      "jebbit",
      "success",
      "data",
      "unity",
      "selligent",
      "android",
      "mailjet",
      "watson",
      "fueled",
      "referrals",
      "radar",
      "livechat",
      "enrichment",
      "braze",
      "sendgrid",
      "campaigns",
      "webhooks",
      "alloy",
      "helpful",
      "listrak",
      "airship",
      "voucherify",
      "surveys",
      "zendesk",
      "amazon",
      "movement",
      "email",
      "configcat",
      "amplitude",
      "learning",
      "upollo",
      "blueshift",
      "twilio",
      "foursquare",
      "autopilothq",
      "activecampaign",
      "virtual",
      "flagging",
      "pendo",
      "mandrill",
      "helpdesk",
      "onetrust",
      "launchdarkly",
      "statsig",
      "tracking",
      "salesforce",
      "cohorts",
      "littledata",
      "facebook",
      "google",
      "bluedot",
      "delighted",
      "chatlio",
      "paytronix",
      "thanks",
      "nudgespot",
      "mobile",
      "shopify",
      "candu",
      "moengage",
      "api",
      "automation",
      "creation",
      "connections",
      "loyalty",
      "kotlin",
      "intercom",
      "mixpanel",
      "beamer",
      "gladly",
      "apple",
      "feedback",
      "marketing",
      "yotpo",
      "inflection",
      "advertising",
      "stripe",
      "elastic",
      "aircall",
      "mailchimp",
      "herow",
      "navattic",
      "management",
      "hubspot"
    ],
    "howto_steps": [
      "Powered by Fueled Upollo Beta Attribution Shopify",
      "Powered by Fueled CRM Aircall Freshchat Beta HubSpot Moesif API Analytics OneTrust Beta Paytronix Beta Salesforce Custom Amazon S3 Customer Success Aircall Beamer Candu CommandBar Gladly Moesif API Analytics ProveSource Refiner Email Marketing ActiveCampaign AutopilotHQ Blueshift Braze Customer.io Drip Facebook Lead Ads Beta Inflection Insider Intercom Iterable Klaviyo Klenty Leanplum Listrak Mailchimp Mailjet Mailmodo Beta Mandrill Marketo MoEngage (Source) Nudgespot Paytronix Beta Salesforce Marketing Cloud Selligent Marketing Cloud SendGrid SendGrid Marketing Campaigns Beta Vero Yotpo Beta Enrichment Alloy Flow Beta Bluedot Factual Engine Beta Foursquare Movement Herow LiveLike (Source) Beta One Creation Beta Quin AI Beta Radar Refiner Feature Flagging ConfigCat Beta LaunchDarkly Helpdesk Aircall Gladly Zendesk Learning Management System Synap Beta WorkRamp Livechat Blip Beta Chatlio Freshchat Beta Marketing Automation Airship Antavo Beta Bluedot CleverTap Foursquare Movement Friendbuy Inflection Insider Listrak Mailmodo Beta MoEngage (Source) Paytronix Beta ProveSource Pushwoosh Source Beta Selligent Marketing Cloud SendGrid Marketing Campaigns Beta Voucherify Beta White Label Loyalty Beta Yotpo Beta Ott Roku (alpha) Payments Stripe Performance Monitoring Moesif API Analytics Synap Beta Personalization Bluedot Candu CleverTap CommandBar Elastic Path Beta Elastic Path CX Studio Beta Foursquare Movement GWEN Webhooks Beta Insider Leanplum LiveLike (Source) Beta One Creation Beta Paytronix Beta ProveSource Pushwoosh Source Beta Qualtrics Quin AI Beta Upollo Beta UserGuiding Beta White Label Loyalty Beta Raw Data Alloy Flow Beta Authvia Beta Elastic Path Beta Elastic Path CX Studio Beta Referrals Friendbuy Voucherify Beta SMS & Push Notifications Airship Beamer Braze Insider Leanplum OneSignal Beta Selligent Marketing Cloud Twilio Surveys Beamer Delighted Jebbit Qualtrics Refiner UserGuiding Beta Virtual Assistant IBM Watson Assistant On this page Website Mobile Server A/B Testing Advertising Analytics Attribution CRM Custom Customer Success Email Marketing Enrichment Feature Flagging Helpdesk Learning Management System Livechat Marketing Automation Ott Payments Performance Monitoring Personalization Raw Data Referrals SMS & Push Notifications Surveys Virtual Assistant Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/libraries/mobile/react-native/destination-plugins",
    "title": " Analytics React Native Destination Plugins | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Libraries / Mobile / React native / Analytics React Native Destination Plugins Analytics React Native Destination Plugins On this page Device-mode Vs. Cloud-Mode Analytics React Native uses its timeline/plugin architecture to support sending data to bundled SDKs when a Cloud Mode connection is not possible. Destination Plugins are similar to traditional Device Mode integrations available in Analytics React Native 1.x in that Segment makes calls directly to the destination tool’s API from the device. However, Destination Plugins are more customizable, giving you the ability to control and enrich your data at a much more granular level on the device itself. Choosing the right destination Segment built device mode destination plugins to be used with the classic/legacy destinations, not Actions destinations. The exception to this is the Amplitude plugin. The Amplitude plugin is a session plugin meant to be used with Amplitude Actions. If a classic/legacy destination is in maintenance mode, Segment continues to make updates pertaining to the mobile plugins, but not the server or web components.\nIf you run into any issues setting up your destination, reach out to support. Device-mode Vs. Cloud-Mode Analytics React Native allows you to choose how you send data to Segment and your connected destinations from your app. There are two ways to send data: Cloud-mode: The sources send data directly to the Segment servers, which then translate it for each connected downstream destination, and send it on. Translation is done on the Segment servers, keeping your page size, method count, and load time small. Device-mode: You include additional code on your app which allows Segment to use the data you collect on the device to make calls directly to the destination tool’s API, without sending it to the Segment servers first. (You still send your data to the Segment servers, but this occurs asynchronously.) This is also called wrapping or bundling, and it might be required when the source has to be loaded on the page to work, or loaded directly on the device to function correctly. Supported Device-mode Plugins Analytics React Native supports the following Device-mode Plugins: Adjust Amplitude Appsflyer Branch Braze Braze Middleware Clevertap Facebook App Events Firebase FullStory Mixpanel Survicate Taplytics Add a custom Destination Plugin You can add custom plugins to Destination Plugins. For example, you could implement the following logic to send events to Braze on weekends only: import { createClient } from ' @segment/analytics-react-native ' ; import { BrazePlugin } from ' @segment/analytics-react-native-plugin-braze ' ; import { BrazeEventPlugin } from ' ./BrazeEventPlugin ' ; const segmentClient = createClient ({ writeKey : ' SEGMENT_KEY ' }); const brazeplugin = new BrazePlugin (); const myBrazeEventPlugin = new BrazeEventPlugin (); brazeplugin . add ( myBrazeEventPlugin ); segmentClient . add ({ plugin : brazeplugin }); // Plugin code for BrazeEventPlugin.ts import { Plugin , PluginType , SegmentEvent , } from ' @segment/analytics-react-native ' ; export class BrazeEventPlugin extends Plugin { type = PluginType . before ; execute ( event : SegmentEvent ) { var today = new Date (); if ( today . getDay () === 6 || today . getDay () === 0 ) { return event ; } } } Segment would then send events to the Braze Destination Plugin on Saturdays and Sundays, based on device time. This page was last modified: 28 Nov 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Device-mode Vs. Cloud-Mode Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "classic",
      "plugintype",
      "issues",
      "directly",
      "connected",
      "visit",
      "correctly",
      "segment_key",
      "updates",
      "small",
      "plugin",
      "supported",
      "wrapping",
      "custom",
      "source",
      "might",
      "before",
      "based",
      "analytics",
      "keeping",
      "weekends",
      "following",
      "there",
      "change",
      "cloud",
      "react",
      "segmentevent",
      "integrations",
      "easiest",
      "brazeeventplugin",
      "session",
      "called",
      "growth",
      "sundays",
      "brazeplugin",
      "problems",
      "middleware",
      "possible",
      "available",
      "legacy",
      "setting",
      "saturdays",
      "documentation",
      "server",
      "could",
      "makes",
      "writekey",
      "loaded",
      "example",
      "supports",
      "return",
      "which",
      "integrate",
      "however",
      "catalog",
      "sources",
      "websites",
      "improve",
      "additional",
      "request",
      "extends",
      "modified",
      "clevertap",
      "execute",
      "meant",
      "export",
      "segment",
      "servers",
      "right",
      "events",
      "include",
      "components",
      "without",
      "native",
      "function",
      "data",
      "itself",
      "const",
      "libraries",
      "similar",
      "contact",
      "continues",
      "mybrazeeventplugin",
      "logic",
      "destination",
      "taplytics",
      "import",
      "today",
      "braze",
      "implement",
      "choosing",
      "firebase",
      "assistance",
      "translation",
      "these",
      "started",
      "choose",
      "would",
      "helpful",
      "downstream",
      "destinations",
      "appsflyer",
      "account",
      "branch",
      "amplitude",
      "giving",
      "calls",
      "connection",
      "built",
      "exception",
      "pertaining",
      "segmentclient",
      "method",
      "sending",
      "translate",
      "ability",
      "device",
      "fullstory",
      "bundling",
      "survicate",
      "occurs",
      "support",
      "maintenance",
      "count",
      "class",
      "plugins",
      "architecture",
      "getday",
      "traditional",
      "allows",
      "facebook",
      "thanks",
      "createclient",
      "mobile",
      "required",
      "asynchronously",
      "actions",
      "level",
      "api",
      "first",
      "connections",
      "questions",
      "create",
      "mixpanel",
      "adjust",
      "enrich",
      "feedback",
      "customizable",
      "tools",
      "collect",
      "event",
      "timeline",
      "bundled",
      "granular",
      "still",
      "control",
      "reach"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/#payments",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/cloud-apps/klaviyo",
    "title": " Klaviyo Source | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Cloud apps / Klaviyo Source Klaviyo Source On this page Getting Started Components Collections Send data to Klaviyo Preventing Duplication in Segment Source Info The Klaviyo Source is an Event Cloud source. This means that it sends data as events, which are behaviors or occurrences tied to a user and a point in time. Data from these sources can be loaded into your Segment warehouses, and also sent to  Segment streaming destinations. Learn more about cloud sources. This source is supported in US data processing regions. The Klaviyo  source is only supported in workspaces configured to process data in the US region. Workspaces configured with data processing regions outside of the US cannot connect to this source. For more information, see Regional Segment . Klaviyo is an email marketing platform that helps companies make more money. It lets you send personalized newsletters, triggered emails, product recommendations, push notifications and sync your data to facebook custom audiences. Visit Website Take your company’s email analysis to the next level by adding Klaviyo as a Source to Segment. Segment automatically  collects email events like Email Delivered and Email Opened , forward them to your destinations, and load them into your data warehouse. In your favorite BI or analytics tool, you’ll be able to analyze your email campaigns in SQL or through drag-and-drop reports. And, you’ll be able to join your Klaviyo data with the event data you’re already sending through Segment to analyze the down-funnel effects of your emails. Getting Started If you have previously enabled sending email events using the Klaviyo destination during our beta (using a project write key), you do not need to create new Klaviyo source. Your email data will continue to flow as normal. From your workspace’s segment.com/<your-workspace>/sources page , click Add source . Choose Klaviyo. Give the Source a nickname and a schema name. The nickname is a label used in the Segment interface, and the schema name is the namespace you query against in your warehouse. You can name them however you’d like, but we recommend sticking to something that reflects the Source itself, like Klaviyo for nickname and klaviyo for the schema name. The next page (“Overview”) will surface your Segment write key for Klaviyo. Copy this write key. To finish the setup, you’ll have to go into your Klaviyo account and enter this Segment write key in their integrations settings. Find the right place in Klaviyo by clicking Integrations > Segment . Click Save . In Segment, click into your Klaviyo Source in segment.com/<your-workspace>/sources . From there you’ll be able to add Destinations where you want to see email events. That’s it! As you send emails, events will now be sent to your destinations and automatically loaded into any warehouses you have enabled. Components Stream Klaviyo uses our stream Source component to send Segment email events. It uses a server-side track method to send data to Segment. These events are then available in any destination that accepts server-side events, and available in a schema in your data warehouse, so you can query using SQL. The default behavior is for Klaviyo to pass the userId associated with the email recipient as the userId . There are cases in which Klaviyo does not have an associated userId , in which case the email address will be passed in as the anonymousId . Collections Collections are the groupings of data Segment receives from your Klaviyo source. In your warehouse, each collection gets its own table and a tracks table that aggregates all the events into a single table. Collection Type Description Email Delivered Event Message has been successfully delivered to the receiving server Email Opened Event Recipient has opened the HTML message. You need to enable Open Tracking for getting this type of event Email Link Clicked Event Recipient clicked on a link within the message. You need to enable Click Tracking for getting this type of event Email Unsubscribed Event Recipient clicked on message’s subscription management link Email Bounced Event Receiving server could not or would not accept message Email Marked as Spam Event Recipient marked message as spam Send data to Klaviyo The Klaviyo Source works better when you also connect Klaviyo as a destination. With the Klaviyo Destination , you can use Segment to send Klaviyo user and event data from which you trigger email campaigns. Want to start sending website or mobile data TO Klaviyo? Head on over to our Klaviyo destination docs . Preventing Duplication in Segment Navigate to the integration settings for the Segment Integration in Klaviyo . Here is where you also have the ability to limit the data you pass back to Segment, by checking the box next to Do not sync profiles that are not updated by the Klaviyo Destination. As noted in the Overview, this integration now supports the ability to pass information back and forth between Segment and Klaviyo, using a unique ID to keep track of which profiles are originally from Segment. If you have multiple integrations enabled in Klaviyo, there is a possibility that the same customer will interact with you from two separate sources, and as a result, this customer will end up with duplicated profiles in Klaviyo. To help avoid this duplication of profiles in Segment, you can check the box above, which will limit the profiles Klaviyo syncs with Segment to only the profiles originally created in Segment. Once you’ve selected the settings you would like to enable, click Update Segment Settings to complete the integration. This page was last modified: 11 Jun 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Components Collections Send data to Klaviyo Preventing Duplication in Segment Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "website",
      "streaming",
      "click",
      "visit",
      "favorite",
      "reports",
      "check",
      "supported",
      "query",
      "custom",
      "bounced",
      "source",
      "interface",
      "configured",
      "forth",
      "analytics",
      "duplicated",
      "there",
      "project",
      "updated",
      "customer",
      "change",
      "cloud",
      "about",
      "funnel",
      "opened",
      "integrations",
      "accepts",
      "notifications",
      "selected",
      "easiest",
      "checking",
      "between",
      "growth",
      "normal",
      "triggered",
      "analyze",
      "problems",
      "klaviyo",
      "associated",
      "available",
      "recommend",
      "previously",
      "documentation",
      "within",
      "server",
      "unsubscribed",
      "could",
      "navigate",
      "through",
      "loaded",
      "stream",
      "workspaces",
      "which",
      "integrate",
      "newsletters",
      "catalog",
      "sources",
      "using",
      "however",
      "websites",
      "improve",
      "region",
      "helps",
      "process",
      "request",
      "label",
      "separate",
      "overview",
      "modified",
      "product",
      "sends",
      "segment",
      "already",
      "warehouses",
      "information",
      "trigger",
      "delivered",
      "table",
      "companies",
      "right",
      "events",
      "components",
      "platform",
      "data",
      "itself",
      "message",
      "collections",
      "tracks",
      "collects",
      "contact",
      "against",
      "update",
      "interact",
      "occurrences",
      "behavior",
      "regions",
      "learn",
      "cannot",
      "destination",
      "effects",
      "complete",
      "limit",
      "finish",
      "clicking",
      "single",
      "connect",
      "campaigns",
      "clicked",
      "these",
      "something",
      "address",
      "outside",
      "assistance",
      "started",
      "avoid",
      "choose",
      "namespace",
      "would",
      "warehouse",
      "helpful",
      "where",
      "destinations",
      "processing",
      "possibility",
      "point",
      "originally",
      "account",
      "sticking",
      "marked",
      "enable",
      "settings",
      "better",
      "regional",
      "email",
      "personalized",
      "cases",
      "syncs",
      "collection",
      "reflects",
      "description",
      "subscription",
      "company",
      "enabled",
      "their",
      "passed",
      "method",
      "money",
      "aggregates",
      "sending",
      "setup",
      "place",
      "component",
      "nickname",
      "ability",
      "profiles",
      "created",
      "receives",
      "works",
      "recommendations",
      "accept",
      "receiving",
      "during",
      "unique",
      "surface",
      "multiple",
      "groupings",
      "support",
      "track",
      "forward",
      "workspace",
      "tracking",
      "recipient",
      "thanks",
      "facebook",
      "anonymousid",
      "automatically",
      "mobile",
      "continue",
      "default",
      "successfully",
      "above",
      "adding",
      "level",
      "emails",
      "means",
      "integration",
      "schema",
      "connections",
      "result",
      "create",
      "noted",
      "duplication",
      "questions",
      "feedback",
      "tools",
      "marketing",
      "write",
      "enter",
      "userid",
      "event",
      "start",
      "analysis",
      "preventing",
      "behaviors",
      "management",
      "audiences",
      "supports"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/cloud-apps/ibm-watson-assistant",
    "title": " IBM Watson Assistant Source | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Cloud apps / IBM Watson Assistant Source IBM Watson Assistant Source On this page Getting Started Events Event properties Adding destinations Source Info The IBM Watson Assistant Source is an Event Cloud source. This means that it sends data as events, which are behaviors or occurrences tied to a user and a point in time. Data from these sources can be loaded into your Segment warehouses, and also sent to  Segment streaming destinations. Learn more about cloud sources. Partner Owned This integration is partner owned. Please reach out to the partner's support for any issues. IBM Watson Assistant uses artificial intelligence that understands customers in context to provide fast, consistent, and accurate answers across any application, device, or channel. You can use Watson Assistant to quickly build a customized AI chatbot and deploy it on your website, over the phone, or to any other channel your customers use. This is an Event Cloud Source , which can not only export data into your Segment warehouse, but can also federate the exported data into your other enabled Segment Destinations. This source is maintained by IBM. If you have any issues with the source, see the Watson Assistant documentation for information about how to get help. Getting Started From your workspace’s /sources page, click Add Source . Choose IBM Watson Assistant and click Connect . In the Name field, specify a descriptive name for the source (for example, Customer Care Chatbot ). This name will be used to identify the source in the Segment user interface. Click Create . Click Copy to copy the Segment write key to the clipboard. In the Watson Assistant user interface, open the Segment integration settings. (For more information about adding the Segment integration to your assistant, see Sending events to Segment .) In the Connect step, paste the write key into the Segment key field. Click Connect . In the Select events step, select the events you want to send to Segment. Click Next . Review the configuration and click Done . Events The table below lists events that Watson Assistant sends to Segment. These events appear as tables in your warehouse, and as regular events in other Destinations. Only events generated using the v2 API and associated with a user ID are included. Event Name Description Message Handled Sent when the assistant completes handling of a message. Session Started A new session was started with an assistant. Action Started Processing of an action (including subactions) began. Action Completed Processing of an action (including subactions) ended. Event properties The tables below list the properties included in the events listed above. Message handled Property Type Description accountId String The ID of the IBM account. assistantId String The ID of the assistant. browser String The browser that was used to send the message. channel String The channel the customer used to send the message (for example, phone or chat ). device String The type of device that was used to send the message. environment String The environment in which the message was handled (such as draft or live .) language String The language of the assistant. pageUrl String The URL of the web page from which the message was sent. serviceInstance String The IBM Watson Assistant service instance. sessionId String The ID of the session during which the message was handled. skillsInvoked String[] An array of strings listing all skills that were invoked during handling of the message (for example, main skill or actions skill ). The following properties are included only for messages that were handled by an actions skill: Property Type Description action String The unique identifier of the action that was visited during handling of the message (for example, action_202 ). actionCompleted Boolean Whether the action completed during handling of the message. actionCompletedReason String The reason the action completed (for example, all_steps_done or fallback .) actionStarted Boolean Whether processing of the action started during handling of the message. actionTitle String The title of the action that was visited during handling of the message (for example, I want to pay my bill ). actionsVisited String[] An array of strings listing the actions visited during handling of the message. fallbackReason String The reason why the fallback action was visited (for example, escalated to human agent or no action matches). handler String The name of any handler that was called. stepsVisited String[] An array of strings listing the steps visited during handling of the message. Each step name is prefixed with the action name. subaction String The name of any subaction that was called during handling of the message. The following properties are included only for messages that were handled by a dialog skill: Property Type Description branchExited Boolean Whether the dialog branch was exited during handling of the message. branchExitedReason String The reason the dialog branch was exited (for example, completed ). nodesVisited String[] An array of strings listing the dialog nodes visited during handling of the message. For each dialog node, the string specifies the node title (if any) or the node ID. Action started Property Type Description accountId String The ID of the IBM account. action String The unique identifier of the action (for example, action_202 ). actionTitle String The title of the action  (for example, I want to pay my bill ). actionCompleted Boolean Whether the action completed during the same conversation turn. actionCompletedReason String The reason the action completed (for example, all_steps_done or fallback .) assistantId String The ID of the assistant. browser String The browser that was used to send the message that triggered the action. channel String The channel the customer used to send the message that triggered the action (for example, phone or chat ). device String The type of device that was used to send the message that triggered the action. environment String The environment in which the action was started (such as draft or live .) fallbackReason String The reason why the fallback action started (for example, escalated to human agent or no action matches). handler String The name of any handler that was called. language String The language of the assistant. pageUrl String The URL of the web page from which the message that triggered the action was sent. serviceInstance String The IBM Watson Assistant service instance. sessionId String The ID of the session during which the message that started the action was sent. skillsInvoked String[] An array of strings listing all skills that were invoked during handling of the message that started the action (for example, main skill or actions skill ). stepsVisited String[] An array of strings listing the steps visited during processing of the action. subaction String The name of any subaction that was called. Action completed Property Type Description accountId String The ID of the IBM account. action String The unique identifier of the action (for example, action_202 ). actionCompletedReason String The reason the action completed (for example, all_steps_done or fallback .) actionStarted Boolean Whether the action was started during the same conversation turn. actionTitle String The title of the action  (for example, I want to pay my bill ). assistantId String The ID of the assistant. browser String The browser that was used to send the message that triggered the action. channel String The channel the customer used to send the message that started the action (for example, phone or chat ). device String The type of device that was used to send the message that triggered the action. environment String The environment in which the action completed (such as draft or live .) fallbackReason String The reason why the fallback action was called (for example, escalated to human agent or no action matches). handler String The name of any handler that was called by the action. language String The language of the assistant. pageUrl String The URL of the web page from which the message that triggered the action was sent. serviceInstance String The IBM Watson Assistant service instance. sessionId String The ID of the session during which the message that started the action was sent. skillsInvoked String[] An array of strings listing all skills that were invoked during handling of the message that started the action (for example, main skill or actions skill ). stepsVisited String[] An array of strings listing the steps visited during processing of the action. subaction String The name of any subaction that was called by the action. Session started Property Type Description accountId String The ID of the IBM account. assistantId String The ID of the assistant. browser String The browser that was used to send the message that started the session. channel String The channel that started the session (for example, phone or chat ). device String The type of device that was used to send the message that started the session. environment String The environment in which the session was started (such as draft or live .) pageUrl String The URL of the web page from which the message that started the session was sent. serviceInstance String The IBM Watson Assistant service instance. sessionId String The ID of the session. Note: The v2 stateless API does not generate events for starting or ending sessions. Adding destinations Now that your Source is set up, you can connect it with Destinations. Log in to your downstream tools and check to see that your events appear as expected, and that they contain all of the properties you expect. If your events and properties don’t appear, check the Event Delivery tool, and refer to the Destination docs for each tool for troubleshooting. If there are any issues with how the events are arriving to Segment, see the Watson Assistant documentation for information about how to get help. This page was last modified: 27 Oct 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Events Event properties Adding destinations Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "intelligence",
      "website",
      "streaming",
      "issues",
      "instance",
      "click",
      "visit",
      "partner",
      "listing",
      "specify",
      "serviceinstance",
      "generate",
      "check",
      "troubleshooting",
      "accountid",
      "descriptive",
      "source",
      "interface",
      "prefixed",
      "regular",
      "accurate",
      "skill",
      "analytics",
      "following",
      "identifier",
      "there",
      "customer",
      "handled",
      "change",
      "array",
      "cloud",
      "boolean",
      "about",
      "conversation",
      "title",
      "easiest",
      "starting",
      "other",
      "session",
      "called",
      "growth",
      "customers",
      "contain",
      "triggered",
      "problems",
      "associated",
      "agent",
      "all_steps_done",
      "nodesvisited",
      "assistant",
      "ended",
      "expect",
      "documentation",
      "application",
      "provide",
      "loaded",
      "example",
      "review",
      "handler",
      "which",
      "ending",
      "began",
      "using",
      "catalog",
      "sources",
      "understands",
      "sessionid",
      "integrate",
      "improve",
      "property",
      "request",
      "websites",
      "messages",
      "matches",
      "specifies",
      "modified",
      "select",
      "delivery",
      "below",
      "sends",
      "export",
      "segment",
      "completes",
      "steps",
      "warehouses",
      "information",
      "table",
      "maintained",
      "events",
      "action_202",
      "handling",
      "pageurl",
      "data",
      "message",
      "service",
      "contact",
      "watson",
      "occurrences",
      "tables",
      "learn",
      "string",
      "destination",
      "including",
      "included",
      "channel",
      "connect",
      "stateless",
      "reason",
      "federate",
      "whether",
      "these",
      "assistance",
      "chatbot",
      "started",
      "actionstarted",
      "answers",
      "browser",
      "choose",
      "helpful",
      "warehouse",
      "downstream",
      "destinations",
      "processing",
      "point",
      "build",
      "account",
      "sessions",
      "settings",
      "owned",
      "subaction",
      "branch",
      "visited",
      "customized",
      "description",
      "stepsvisited",
      "enabled",
      "branchexitedreason",
      "sending",
      "completed",
      "environment",
      "subactions",
      "strings",
      "language",
      "fallback",
      "actiontitle",
      "device",
      "actioncompleted",
      "invoked",
      "refer",
      "field",
      "please",
      "deploy",
      "during",
      "phone",
      "support",
      "unique",
      "escalated",
      "branchexited",
      "quickly",
      "workspace",
      "identify",
      "draft",
      "configuration",
      "action",
      "actioncompletedreason",
      "arriving",
      "thanks",
      "artificial",
      "context",
      "mobile",
      "clipboard",
      "actions",
      "above",
      "adding",
      "properties",
      "exported",
      "across",
      "api",
      "appear",
      "fallbackreason",
      "dialog",
      "generated",
      "means",
      "integration",
      "lists",
      "connections",
      "create",
      "questions",
      "listed",
      "human",
      "feedback",
      "tools",
      "write",
      "nodes",
      "expected",
      "event",
      "assistantid",
      "skills",
      "consistent",
      "exited",
      "actionsvisited",
      "skillsinvoked",
      "behaviors",
      "paste",
      "reach"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#collections",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#send-data-to-klaviyo",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/#cloud-apps",
    "title": " Sources Overview | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources Overview Sources Overview On this page What is a source? Types of sources Event streams sources Cloud app sources Reverse ETL sources Create a source Library tiers Related content Sources Catalog What is a source? A source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track. While it’s not required that you have a single source for each server, site, or app, you should create a source for each unique source of data. Each source you create has a write key, which is used to send data to that source. For example, to load analytics.js , the Segment JavaScript library on your page, the snippet on the Quickstart Guide includes: analytics . identify ( ' user_123 ' , { email : ' jane.kim@example.com ' , name : ' Jane Kim ' }); If you don't see the source you're looking for in our catalog If a tool is not listed as a supported source in Segment’s catalog , then it is not possible to incorporate the integration out-of-the-box within a Segment workspace. However, as an alternative, you can use the HTTP API source to collect data from the tool’s API. You can also use Functions to send or receive data from other tools. Types of sources Segment has three types of sources: Event streams Cloud app sources Reverse ETL Event streams sources Event streams sources collect data from your website or app to monitor user actions. These sources include website libraries , mobile , and server sources . Source Overview The Source Overview page for an event stream source shows you a pipeline view of all events Segment receives from your source, events that failed on ingest, events that are filtered at the source level, and “eligible events”, which are the events that will flow into your destinations. If you select one of the steps in the pipeline view, you can see a line chart that reflects the fluctuations in volume alongside a breakdown table that has more details about the events impacted by the selected step. Pipeline view The pipeline view shows each of the four steps Segment encounters when processing data from your source: Events successfully received : All events that Segment received from your source. Failed on ingest : Events that failed at the Tracking API level. For more information about errors that might cause events to fail on ingest, see Delivery Overview’s Troubleshooting documentation. Filtered at source : Events that were filtered out by source schema controls, Tracking Plans, or a common JSON schema. Eligible events : Eligible events are the events that flow downstream to your Segment destinations. This value is read-only, but you can see the events that flow downstream to a particular destination using Delivery Overview . You can use the time picker located on the Source Overview page to specify a time period (last 10 minutes, 1 hour, 24 hours, 7 days, 2 weeks, or a custom date range over the last two weeks) for which you’d like to see data. Segment sets the time picker to show data for the last 24 hours by default. Breakdown table The breakdown table displays three tabs, Event type , Event name , and App version . Event type : The Segment Spec event type (Track call vs. Identify call, for example). This tab also contains a “% change” metric, which displays how the event counts differ from the last comparable time range, represented as a percentage. Event name : The event name, provided by you or the source. App version : The app/release version, provided by you or the source. Each of these tabs displays an event count, which is the total number of events that Segment received in a particular step. The Unnamed or batched events under the Event Name tab is a collection of all identify and page/screen calls in the source. Website libraries Analytics.js , the JavaScript library, is the most powerful way to track customer data from your website. If you’re just starting out, Segment recommends it over server-side libraries as the simplest installation for any website. The Analytics Quickstart Guide Analytics and data collection is a very broad topic and it can be quite overwhelming. How do you get started? Mobile Segment’s Mobile SDKs are the best way to simplify your iOS, Android, and Xamarin app tracking. Try them over server-side sources as the default installation for any mobile app. AMP Android Android Wear iOS Kotlin React Native Swift Xamarin Analytics-Flutter library The Analytics-Flutter library is currently only available in pilot phase and is governed by Segment’s First Access and Beta Preview Terms . If you’d like to try out this library, access the Analytics-Flutter GitHub repository . Server Segment’s server-side sources let you send analytics data directly from your servers. Segment recommends tracking from your servers when device-mode tracking (tracking on the client) doesn’t work. Check out the guide on server-side tracking if you’re not sure whether it makes sense for your use case. Clojure Go Java Node.js PHP Python Ruby .NET Cloud-mode tracking Server-side data management is when tag sends data to the Segment servers, which then passes that data to the destination system. Cloud app sources Cloud app sources empower you to pull together data from all of your different third-party tools into a Segment warehouse or to your other enabled integrated tools. They send data about your users from your connected web apps. There are two types of Cloud Apps: Object cloud sources and Event cloud sources . Comparing Cloud Sources Wondering which cloud-apps send which types of data? Check out the Cloud Sources comparison. Object Cloud Sources These Cloud App Sources can export data from its third party tool and import it directly into your Segment warehouse. Make sure you have a Segment warehouse enabled before you enable any of the following sources: Facebook Ads Google Ads HubSpot Intercom Mailchimp Mandrill Marketo Salesforce Salesforce Marketing Cloud SendGrid Stripe Twilio Zendesk Event Cloud Sources These Cloud App Sources can not only export data into your Segment warehouse, but they can also federate the exported data into your other enabled Segment integrations: ActiveCampaign Aircall Airship Alloy Flow Amazon S3 Amplitude Cohorts Antavo Authvia AutopilotHQ Beamer Blip Bluedot Blueshift Braze Candu Chatlio CleverTap CommandBar ConfigCat Customer.io Delighted Drip Elastic Path Elastic Path CX Studio Facebook Lead Ads Factual Engine Foursquare Movement Freshchat Friendbuy Gladly GWEN Webhooks Herow IBM Watson Assistant Inflection Insider Iterable Jebbit Klaviyo Klenty LaunchDarkly Leanplum Listrak LiveLike (Source) Looker Mailjet Mailmodo Mixpanel Cohorts MoEngage (Source) Moesif API Analytics Navattic Nudgespot One Creation OneSignal OneTrust Paytronix Pendo ProveSource Pushwoosh Source Qualtrics Quin AI Radar Refiner Selligent Marketing Cloud SendGrid Marketing Campaigns Shopify (by Littledata) Shopify - Powered by Fueled Statsig Synap Upollo UserGuiding Vero Voucherify White Label Loyalty WorkRamp Yotpo HTTP If Segment doesn’t have a library for your environment, you can send your data directly to the HTTP Tracking API . All of Segment’s other sources and platforms use the HTTP API to work their magic behind the scenes. Pixel Segment’s Pixel Tracking API lets you track events from environments where you can’t execute code, like tracking email opens. Event name Description Email Delivered The message has been successfully delivered to the receiving server. Email Opened The recipient has opened the HTML message. You need to enable Open Tracking for getting this type of event. Email Link Clicked The recipient clicked on a link within the message. You need to enable Click Tracking for getting this type of event. Email Bounced The receiving server could not or would not accept message. Email Marked as Spam The recipient marked message as spam. Unsubscribe The recipient clicked on message’s subscription management link. Reverse ETL sources Reverse ETL sources are data warehouses that enable you to use Reverse ETL to send data from your warehouse source to your destinations. Reverse ETL supports these sources: BigQuery Databricks Postgres Redshift Snowflake Segment is actively working on adding more sources. If you’d like to request Segment to add a particular source, please note it on the feedback form . Create a source To create a source: Navigate to Connections and click Add Source . Click the Source you’d like to add. Note: More than 80% of workspaces start by adding their JavaScript website. Click Add Source . Enter a name for your source as well as any information on the setup page. Click Add Source . Once you’ve created a source, the source is automatically enabled and can immediately receive events. You can review your new events in that source’s Debugger tab. Sources not connected to an enabled destination are disabled after 14 days If your source is not connected to any destinations or is only connected to disabled destinations, Segment automatically disables this source after 14 days, even if the source is receiving events. Disabled sources will no longer receive data. \nYou can view when Segment disables your destination in your workspace’s Audit Trail as Event : Source Disabled with Actor : Segment .\nWorkspace members receive an email notification before Segment disables your source so that your team has time to take action.\nIf you would like to prevent this behavior in your workspace, fill out this Airtable form . One source or multiple sources? Segment suggests that you create one source for each type of data you want to collect. For example, you might have one source for all of your website tracking and a different source for any mobile tracking. Creating one source per data type provides the following benefits: Debugger ease of use - mixing libraries/sources on a single API key means you’re heavily reliant on filtering to actually test events Flexibility sending data to different projects - if you want to have different warehouse schemas, analytics projects, etc, having multiple sources would create this separation More control - as your account grows with the number of destinations you enable, having separate sources allows you to have more control A source type cannot be changed after it is created. You must create a new source if you would like to use a different source type. Library tiers Segment has defined three tiers for libraries: Flagship, Maintenance, and Community. These tiers indicate the level of support, enhancements, and maintenance each library receives from Segment. The criteria for assigning a library to a tier include its overall usage by customers and the availability of newer versions. Here’s how Segment defines each tier: Flagship libraries offer the most up-to-date functionality on Segment’s most popular platforms. Segment actively maintains Flagship libraries, which benefit from new feature releases and ongoing development and support. Maintenance libraries send data as intended but receive no new feature support and only critical maintenance updates from Segment. When possible, Segment recommends using a Flagship version of these libraries. Community libraries are neither managed nor updated by Segment. These libraries are available on GitHub under the MIT License for the open-source community to fork or contribute. If a library falls into one of these tiers, you’ll see the tier label at the beginning of the library’s page. This page was last modified: 18 Nov 2024 Further reading Sources Catalog A list of the available sources on the Segment platform. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page What is a source? Types of sources Event streams sources Cloud app sources Reverse ETL sources Create a source Library tiers Related content Sources Catalog Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "conceptual",
    "keywords": [
      "working",
      "website",
      "heavily",
      "connected",
      "javascript",
      "supported",
      "troubleshooting",
      "custom",
      "source",
      "encounters",
      "overwhelming",
      "klenty",
      "commandbar",
      "factual",
      "engine",
      "leanplum",
      "range",
      "community",
      "easiest",
      "synap",
      "eligible",
      "customers",
      "failed",
      "assistant",
      "impacted",
      "benefits",
      "documentation",
      "quickstart",
      "server",
      "integrated",
      "makes",
      "availability",
      "powerful",
      "disabled",
      "which",
      "mailmodo",
      "behind",
      "marketo",
      "suggests",
      "improve",
      "qualtrics",
      "members",
      "separate",
      "python",
      "clevertap",
      "execute",
      "warehouses",
      "contains",
      "audit",
      "trail",
      "delivered",
      "table",
      "counts",
      "include",
      "actively",
      "pixel",
      "errors",
      "intended",
      "ongoing",
      "content",
      "debugger",
      "terms",
      "cannot",
      "notification",
      "user_123",
      "defines",
      "sendgrid",
      "alloy",
      "platforms",
      "helpful",
      "warehouse",
      "where",
      "destinations",
      "swift",
      "marked",
      "creating",
      "batched",
      "while",
      "email",
      "collection",
      "recommends",
      "release",
      "passes",
      "simplest",
      "receives",
      "onetrust",
      "maintains",
      "cause",
      "track",
      "represented",
      "facebook",
      "delighted",
      "chart",
      "automatically",
      "successfully",
      "minutes",
      "development",
      "indicate",
      "exported",
      "should",
      "first",
      "create",
      "mixpanel",
      "beamer",
      "value",
      "unsubscribe",
      "feedback",
      "marketing",
      "criteria",
      "write",
      "enter",
      "event",
      "total",
      "reliant",
      "elastic",
      "pipeline",
      "actually",
      "located",
      "control",
      "hubspot",
      "getting",
      "defined",
      "directly",
      "clojure",
      "livelike",
      "metric",
      "incorporate",
      "specify",
      "bigquery",
      "provides",
      "bounced",
      "might",
      "license",
      "analytics",
      "change",
      "customer",
      "cloud",
      "react",
      "selected",
      "system",
      "studio",
      "klaviyo",
      "streams",
      "together",
      "fluctuations",
      "flutter",
      "application",
      "provesource",
      "governed",
      "userguiding",
      "workspaces",
      "integrate",
      "using",
      "screen",
      "sources",
      "websites",
      "hours",
      "benefit",
      "related",
      "modified",
      "steps",
      "information",
      "servers",
      "powered",
      "flexibility",
      "weeks",
      "data",
      "libraries",
      "comparison",
      "mailjet",
      "common",
      "behavior",
      "github",
      "flagship",
      "import",
      "single",
      "braze",
      "federate",
      "campaigns",
      "assistance",
      "webhooks",
      "snippet",
      "popular",
      "mixing",
      "listrak",
      "looking",
      "account",
      "immediately",
      "configcat",
      "object",
      "amplitude",
      "displays",
      "provided",
      "blueshift",
      "guide",
      "broad",
      "please",
      "multiple",
      "period",
      "count",
      "repository",
      "identify",
      "littledata",
      "allows",
      "chatlio",
      "differ",
      "candu",
      "required",
      "shopify",
      "snowflake",
      "critical",
      "airtable",
      "level",
      "api",
      "contribute",
      "integration",
      "kotlin",
      "listed",
      "tools",
      "topic",
      "changed",
      "mailchimp",
      "herow",
      "prevent",
      "supports",
      "monitor",
      "click",
      "visit",
      "onesignal",
      "magic",
      "xamarin",
      "iterable",
      "actor",
      "following",
      "there",
      "updated",
      "ingest",
      "about",
      "integrations",
      "originates",
      "under",
      "environments",
      "friendbuy",
      "problems",
      "pilot",
      "three",
      "possible",
      "white",
      "newer",
      "enhancements",
      "within",
      "navigate",
      "managed",
      "stream",
      "types",
      "feature",
      "assigning",
      "number",
      "however",
      "refiner",
      "label",
      "select",
      "product",
      "delivery",
      "functionality",
      "different",
      "quite",
      "postgres",
      "grows",
      "events",
      "platform",
      "native",
      "jebbit",
      "comparing",
      "overall",
      "message",
      "databricks",
      "selligent",
      "android",
      "currently",
      "falls",
      "comparable",
      "watson",
      "reverse",
      "destination",
      "radar",
      "whether",
      "unnamed",
      "would",
      "airship",
      "downstream",
      "voucherify",
      "third",
      "enable",
      "movement",
      "filtering",
      "twilio",
      "enabled",
      "autopilothq",
      "sending",
      "setup",
      "simplify",
      "device",
      "wondering",
      "includes",
      "party",
      "accept",
      "receiving",
      "unique",
      "releases",
      "maintenance",
      "statsig",
      "workspace",
      "salesforce",
      "after",
      "cohorts",
      "picker",
      "thanks",
      "google",
      "bluedot",
      "paytronix",
      "mobile",
      "moengage",
      "preview",
      "adding",
      "creation",
      "means",
      "schema",
      "doesn",
      "loyalty",
      "gladly",
      "schemas",
      "beginning",
      "tiers",
      "disables",
      "redshift",
      "start",
      "alongside",
      "particular",
      "opens",
      "navattic",
      "filtered",
      "management",
      "controls",
      "authvia",
      "received",
      "access",
      "installation",
      "updates",
      "versions",
      "check",
      "longer",
      "antavo",
      "before",
      "reading",
      "looker",
      "sense",
      "opened",
      "starting",
      "other",
      "library",
      "insider",
      "growth",
      "scenes",
      "available",
      "phase",
      "workramp",
      "freshchat",
      "could",
      "client",
      "example",
      "review",
      "catalog",
      "offer",
      "request",
      "overview",
      "pushwoosh",
      "sends",
      "export",
      "segment",
      "moesif",
      "functions",
      "receive",
      "contact",
      "breakdown",
      "fueled",
      "clicked",
      "these",
      "started",
      "processing",
      "alternative",
      "zendesk",
      "having",
      "amazon",
      "separation",
      "understand",
      "reflects",
      "description",
      "upollo",
      "calls",
      "subscription",
      "projects",
      "foursquare",
      "their",
      "activecampaign",
      "empower",
      "environment",
      "further",
      "mandrill",
      "pendo",
      "created",
      "launchdarkly",
      "version",
      "support",
      "plans",
      "tracking",
      "action",
      "recipient",
      "nudgespot",
      "usage",
      "default",
      "shows",
      "actions",
      "percentage",
      "connections",
      "intercom",
      "questions",
      "collect",
      "yotpo",
      "users",
      "volume",
      "inflection",
      "stripe",
      "aircall",
      "neither",
      "details"
    ],
    "howto_steps": [
      "Powered by Fueled Statsig Synap Upollo UserGuiding Vero Voucherify White Label Loyalty WorkRamp Yotpo HTTP If Segment doesn’t have a library for your environment, you can send your data directly to the HTTP Tracking API . All of Segment’s other sources and platforms use the HTTP API to work their magic behind the scenes. Pixel Segment’s Pixel Tracking API lets you track events from environments where you can’t execute code, like tracking email opens. Event name Description Email Delivered The message has been successfully delivered to the receiving server. Email Opened The recipient has opened the HTML message. You need to enable Open Tracking for getting this type of event. Email Link Clicked The recipient clicked on a link within the message. You need to enable Click Tracking for getting this type of event. Email Bounced The receiving server could not or would not accept message. Email Marked as Spam The recipient marked message as spam. Unsubscribe The recipient clicked on message’s subscription management link. Reverse ETL sources Reverse ETL sources are data warehouses that enable you to use Reverse ETL to send data from your warehouse source to your destinations. Reverse ETL supports these sources: BigQuery Databricks Postgres Redshift Snowflake Segment is actively working on adding more sources. If you’d like to request Segment to add a particular source, please note it on the feedback form . Create a source To create a source: Navigate to Connections and click Add Source . Click the Source you’d like to add. Note: More than 80% of workspaces start by adding their JavaScript website. Click Add Source . Enter a name for your source as well as any information on the setup page. Click Add Source . Once you’ve created a source, the source is automatically enabled and can immediately receive events. You can review your new events in that source’s Debugger tab. Sources not connected to an enabled destination are disabled after 14 days If your source is not connected to any destinations or is only connected to disabled destinations, Segment automatically disables this source after 14 days, even if the source is receiving events. Disabled sources will no longer receive data. \nYou can view when Segment disables your destination in your workspace’s Audit Trail as Event : Source Disabled with Actor : Segment .\nWorkspace members receive an email notification before Segment disables your source so that your team has time to take action.\nIf you would like to prevent this behavior in your workspace, fill out this Airtable form . One source or multiple sources? Segment suggests that you create one source for each type of data you want to collect. For example, you might have one source for all of your website tracking and a different source for any mobile tracking. Creating one source per data type provides the following benefits: Debugger ease of use",
      "mixing libraries/sources on a single API key means you’re heavily reliant on filtering to actually test events Flexibility sending data to different projects",
      "if you want to have different warehouse schemas, analytics projects, etc, having multiple sources would create this separation More control",
      "as your account grows with the number of destinations you enable, having separate sources allows you to have more control A source type cannot be changed after it is created. You must create a new source if you would like to use a different source type. Library tiers Segment has defined three tiers for libraries: Flagship, Maintenance, and Community. These tiers indicate the level of support, enhancements, and maintenance each library receives from Segment. The criteria for assigning a library to a tier include its overall usage by customers and the availability of newer versions. Here’s how Segment defines each tier: Flagship libraries offer the most up"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/#event-streams-sources",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#pipeline-view",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#breakdown-table",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/reverse-etl/reverse-etl-source-setup-guides/postgres-setup/",
    "title": " Postgres Reverse ETL Setup | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Reverse etl / Reverse etl source setup guides / Postgres Reverse ETL Setup Postgres Reverse ETL Setup On this page Set up guide Extra permissions Set up Postgres as your Reverse ETL source. At a high level, when you set up Postgres for Reverse ETL, the configured user/role needs read permissions for any resources (databases, schemas, tables) the query needs to access. Segment keeps track of changes to your query results with a managed schema ( __SEGMENT_REVERSE_ETL ), which requires the configured user to allow write permissions for that schema. Postgres Reverse ETL sources support Segment's dbt extension If you have an existing dbt account with a Git repository, you can use Segment’s dbt extension to centralize model management and versioning, reduce redundancies, and run CI checks to prevent breaking changes. Segment supports the following Postgres database providers: Heroku RDS Segment only supports these Postgres database providers. Postgres databases from other providers aren’t guaranteed to work. For questions or concerns about Segment-supported Postgres providers, contact Segment Support . Set up guide To set up Postgres with Reverse ETL: Log in to your Postgres account. Configure the correction network and security settings for your Postgres database. If you’re using RDS Postgres, follow this guide . Make sure the following IP addresses can access the database. Run the SQL commands below to create a user named segment . -- create a user named \"segment\" that Segment will use when connecting to your Postgres cluster. CREATE USER segment PASSWORD '<enter password here>' ; -- allows the \"segment\" user to create new schemas on the specified database. (this is the name you chose when provisioning your cluster) GRANT CREATE ON DATABASE \"<enter database name here>\" TO \"segment\" ; Make sure the user has correct access permissions to the database. Follow the steps listed in the Add a source section to finish adding Postgres as a source. Extra permissions Give the segment user read permissions for any resources (databases, schemas, tables) the query needs to access. Give the segment user write permissions for the Segment managed schema ( __SEGMENT_REVERSE_ETL ), which keeps track of changes to the query results. After you’ve successfully added your Postgres source, add a model and follow the rest of the steps in the Reverse ETL setup guide. This page was last modified: 10 Jun 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Set up guide Extra permissions Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "model",
      "access",
      "visit",
      "centralize",
      "concerns",
      "permissions",
      "provisioning",
      "supported",
      "query",
      "reduce",
      "source",
      "configured",
      "database",
      "configure",
      "analytics",
      "following",
      "section",
      "change",
      "about",
      "easiest",
      "other",
      "growth",
      "providers",
      "problems",
      "requires",
      "keeps",
      "documentation",
      "breaking",
      "managed",
      "which",
      "integrate",
      "using",
      "websites",
      "sources",
      "improve",
      "follow",
      "request",
      "__segment_reverse_etl",
      "modified",
      "extension",
      "correct",
      "below",
      "results",
      "connecting",
      "steps",
      "segment",
      "heroku",
      "postgres",
      "added",
      "data",
      "contact",
      "reverse",
      "databases",
      "tables",
      "finish",
      "allow",
      "correction",
      "these",
      "assistance",
      "started",
      "helpful",
      "resources",
      "network",
      "account",
      "security",
      "settings",
      "guaranteed",
      "checks",
      "commands",
      "grant",
      "guides",
      "extra",
      "setup",
      "guide",
      "password",
      "support",
      "repository",
      "track",
      "after",
      "management",
      "allows",
      "thanks",
      "versioning",
      "cluster",
      "mobile",
      "successfully",
      "needs",
      "adding",
      "level",
      "changes",
      "schema",
      "connections",
      "questions",
      "create",
      "existing",
      "chose",
      "schemas",
      "redundancies",
      "listed",
      "feedback",
      "tools",
      "write",
      "enter",
      "named",
      "specified",
      "prevent",
      "supports",
      "addresses"
    ],
    "howto_steps": [
      "create a user named \"segment\" that Segment will use when connecting to your Postgres cluster. CREATE USER segment PASSWORD '<enter password here>' ;",
      "allows the \"segment\" user to create new schemas on the specified database. (this is the name you chose when provisioning your cluster) GRANT CREATE ON DATABASE \"<enter database name here>\" TO \"segment\" ; Make sure the user has correct access permissions to the database. Follow the steps listed in the Add a source section to finish adding Postgres as a source. Extra permissions Give the segment user read permissions for any resources (databases, schemas, tables) the query needs to access. Give the segment user write permissions for the Segment managed schema ( __SEGMENT_REVERSE_ETL ), which keeps track of changes to the query results. After you’ve successfully added your Postgres source, add a model and follow the rest of the steps in the Reverse ETL setup guide. This page was last modified: 10 Jun 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Set up guide Extra permissions Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/engage/",
    "title": " Engage Introduction | Segment Documentation",
    "platform": "segment",
    "content": "Home / Engage Introduction Engage Introduction Free x Team x Business ✓ + Engage Foundations ✓ ? Engage Foundations requires a Business tier account and includes Unify. See the available plans , or contact Support . On this page What can you do with Engage? Market to customers with Engage Premier and Channels Powered by real-time data, Twilio Engage is a customizable personalization platform with which you can build, enrich, and activate Audiences. Engage Channels builds on top of these Audiences, helping you connect with and market to your customers through email, SMS, and WhatsApp campaigns. What can you do with Engage? Create unified customer profiles Engage uses Segment Identity Resolution to take event data from across devices and channels and intelligently merge it into complete user- or account-level profiles. This gives your organization a single view of your customer base. To learn more, read the Identity Resolution documentation . Personalizing customer interactions Support teams rely on Segment's unified profiles to make real-time and informed decisions about customers when answering tickets or taking support calls. Read about how the support team at Frame.io reduced ticket response time by 80%. Enrich profiles with new traits Add detail to user profiles with new traits and use them to power personalized marketing campaigns. You can add new traits to your user or account profiles in Engage using: Computed Traits: Use the Engage drag-and-drop interface to build per-user (B2C) or per-account (B2B) metrics on user profiles (for example, “lifetime value” or “lead score”). SQL Traits: Run custom queries on your data warehouse using the Engage SQL editor, and import the results into Segment. With SQL Traits, you can pull rich, uncaptured user data back into Segment. Predictions : Predict the likelihood that users will perform custom events tracked in Segment, like LTV, churn, and purchase. Build Audiences Create lists of users or accounts that match specific criteria. For example, after creating an inactive accounts audience that lists paid accounts with no logins in 60 days, you can push the audience to your analytics tools or send an SMS, email, or WhatsApp campaign with Engage Channels. Learn more about Engage audiences . Sync audiences to downstream tools Once you create your Computed Traits and Audiences, Engage sends them to your Segment Destinations in just a few clicks. You can use these Traits and Audiences to personalize messages across channels, optimize ad spend, and improve targeting. You can also use the Profile API to build in-app and onsite personalization. Learn more about using Engage data and the Profile API . Personalizing marketing campaigns Marketing teams use Engage to run real-time multi-channel marketing campaigns based off specific user attributes they've computed in Engage. Read about how Drift used Engage to increase prospect engagement by 150% in two months. Market to customers with Engage Premier and Channels To send email, SMS, and WhatsApp campaigns with Engage Channels, you’ll connect a Twilio messaging service , SendGrid subuser account , and WhatsApp messaging service to your Segment Engage space. Use existing accounts, or create new ones. View the onboarding steps for more on how to connect Twilio and SendGrid accounts. Send email, SMS, and WhatsApp messages in Journeys Use Engage to build email, SMS, and WhatsApp campaigns within Journeys . Send campaigns to subscribed users based on event behavior and profile traits. With message analytics , you can track the performance of your campaigns. Send Email : Build email campaigns with existing templates, or create a new email template within Journeys. Before you send the email, test the template and set conversion goals . Send SMS messages : Build SMS campaigns to message users in real-time as a step in a Journey. For example, create an abandoned cart campaign that texts users a reminder to complete their purchase, along with a promo code. Add merge tags and set conversion goals. Send WhatsApp messages : Build WhatsApp campaigns that deliver messages to your customers on the world’s most used messaging app. To learn more, visit the CSV Uploader documentation. Build Email, SMS, and WhatsApp message templates Build personalized email , SMS , and WhatsApp templates in Twilio Engage for use in your campaigns. Design email templates with a WYSIWYG Drag and Drop Editor or the HTML Editor . Engage saves the templates for you to preview, edit, and reuse throughout Journeys. Personalize with merge tags Insert real-time user profile traits from merge tags to personalize each message. For example, address recipients by name or highlight new products from a user’s favorite brand. CSV Uploader Use the CSV uploader to add or update user profiles and subscription states . To learn more, visit the CSV Uploader documentation. User subscriptions Set user subscription states in two ways: Upload a CSV file with lists of users along with their phone, email, and WhatsApp subscription states. Programmatically with Segment’s Public API Use Engage to add subscription states to user email addresses and phone numbers. Subscription states help determine which users you can send campaigns to in Engage. You can set user subscription states with a CSV file upload , or programmatically with Segment’s Public API . Message Analytics With analytics in Engage, you can monitor real-time conversion data. Track message performance and customer interaction beyond clicks and opens. Use campaign dashboards to view events such as Email Delivered , Unsubscribed , Spam Reported , and more. Conversion Goals For each message step in a Journey, you can set conversion conditions with events and properties in your Segment space. Then, define a duration after message delivery to track goals. For example, track users who perform the event Order Completed with a promo code that you send them. Visit Message Analytics to learn more. This page was last modified: 23 Aug 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page What can you do with Engage? Market to customers with Engage Premier and Channels Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "conceptual",
    "keywords": [
      "match",
      "audience",
      "monitor",
      "visit",
      "lifetime",
      "uncaptured",
      "unify",
      "subuser",
      "traits",
      "favorite",
      "journey",
      "computed",
      "multi",
      "upload",
      "custom",
      "reduced",
      "texts",
      "determine",
      "design",
      "interface",
      "wysiwyg",
      "before",
      "order",
      "based",
      "analytics",
      "whatsapp",
      "change",
      "customer",
      "personalization",
      "organization",
      "about",
      "easiest",
      "personalizing",
      "templates",
      "identity",
      "predictions",
      "accounts",
      "saves",
      "growth",
      "customers",
      "score",
      "clicks",
      "states",
      "problems",
      "attributes",
      "devices",
      "available",
      "define",
      "requires",
      "documentation",
      "months",
      "campaign",
      "within",
      "reuse",
      "unsubscribed",
      "through",
      "example",
      "uploader",
      "which",
      "integrate",
      "specific",
      "using",
      "websites",
      "improve",
      "request",
      "tracked",
      "messages",
      "modified",
      "power",
      "delivery",
      "results",
      "sends",
      "subscribed",
      "steps",
      "segment",
      "journeys",
      "tickets",
      "performance",
      "powered",
      "insert",
      "delivered",
      "conditions",
      "events",
      "abandoned",
      "drift",
      "response",
      "channels",
      "platform",
      "likelihood",
      "editor",
      "space",
      "numbers",
      "data",
      "message",
      "activate",
      "service",
      "prospect",
      "contact",
      "update",
      "increase",
      "behavior",
      "learn",
      "complete",
      "interactions",
      "import",
      "dashboards",
      "highlight",
      "single",
      "connect",
      "channel",
      "sendgrid",
      "campaigns",
      "goals",
      "these",
      "address",
      "assistance",
      "started",
      "messaging",
      "detail",
      "warehouse",
      "duration",
      "helping",
      "downstream",
      "destinations",
      "audiences",
      "engagement",
      "throughout",
      "helpful",
      "informed",
      "ticket",
      "account",
      "build",
      "gives",
      "creating",
      "spend",
      "onsite",
      "market",
      "email",
      "personalized",
      "inactive",
      "onboarding",
      "calls",
      "subscription",
      "twilio",
      "beyond",
      "their",
      "brand",
      "completed",
      "recipients",
      "churn",
      "products",
      "profiles",
      "introduction",
      "queries",
      "teams",
      "includes",
      "support",
      "plans",
      "phone",
      "track",
      "public",
      "purchase",
      "frame",
      "after",
      "thanks",
      "conversion",
      "decisions",
      "promo",
      "mobile",
      "preview",
      "logins",
      "interaction",
      "intelligently",
      "optimize",
      "engage",
      "deliver",
      "properties",
      "level",
      "across",
      "targeting",
      "api",
      "along",
      "lists",
      "personalize",
      "reminder",
      "create",
      "questions",
      "taking",
      "world",
      "resolution",
      "existing",
      "profile",
      "enrich",
      "template",
      "value",
      "feedback",
      "customizable",
      "marketing",
      "criteria",
      "tools",
      "perform",
      "users",
      "subscriptions",
      "programmatically",
      "builds",
      "event",
      "predict",
      "foundations",
      "business",
      "opens",
      "reported",
      "premier",
      "metrics",
      "unified",
      "answering",
      "merge",
      "addresses"
    ],
    "howto_steps": [
      "or account"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/reverse-etl/setup/#step-1-add-a-source",
    "title": " Set up Reverse ETL | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Reverse etl / Set up Reverse ETL Set up Reverse ETL On this page Step 1: Add a source Step 2: Add a model Step 3: Add a destination Step 4: Create mappings Initial sync for a given mapping Edit Reverse ETL syncs There are four components to Reverse ETL: Sources, Models, Destinations, and Mappings. Follow these 4 steps to set up Reverse ETL: Add a source Add a model Add a destination Create mappings Step 1: Add a source In Reverse ETL, a source is your data warehouse. You need to be a user that has both read and write access to the warehouse. To add your warehouse as a source: Navigate to Connections > Sources and select the Reverse ETL tab in the Segment app. Click + Add Reverse ETL source . Select the source you want to add. Follow the corresponding guide to set up the required permissions for your Reverse ETL source: Azure Reverse ETL setup guide BigQuery Reverse ETL setup guide Databricks Reverse ETL setup guide Postgres Reverse ETL setup guide Redshift Reverse ETL setup guide Snowflake Reverse ETL setup guide Step 2: Add a model Models define sets of data you want to sync to your Reverse ETL destinations. A source can have multiple models. Segment supports SQL models and dbt models . SQL editor Navigate to Connections > Sources and select the Reverse ETL tab. Select your source and click Add Model . Click SQL Editor as your modeling method. (Segment will add more modeling methods in the future.) Enter the SQL query that’ll define your model. Your model is used to map data to your Reverse ETL destination(s). Choose a column to use as the unique identifier for each record in the Unique Identifier column field. The Unique Identifier should be a column with unique values per record to ensure checkpointing works as expected. It can potentially be a primary key. This column is used to detect new, updated, and deleted records. Click Preview to see a preview of the results of your SQL query. The data from the preview is extracted from the first 10 records of your warehouse. Segment caches preview queries and result sets in the UI, and stores the preview cache at the source level. Click Next . Enter your Model Name . Click Create Model . dbt model Use Segment’s dbt extension to centralize model management and versioning. Users who set up a BigQuery, Databricks, Postgres, Redshift, or Snowflake source can use Segment’s dbt extension to centralize model management and versioning, reduce redundancies, and run CI checks to prevent breaking changes. If you use dbt Cloud with Reverse ETL, you can create up to 5 mappings that use the sync strategy dbt Cloud , which extracts data from your warehouse and syncs it with your destination after a job in dbt Cloud is complete. Step 3: Add a destination In Reverse ETL, destinations are the business tools or apps you use that Segment syncs the data from your warehouse to. A model can have multiple destinations. Reverse ETL supports the destinations in the Reverse ETL catalog . If the destination you want to send data to is not listed in the Reverse ETL catalog, use the Segment Connections Destination to send data from your Reverse ETL warehouse to your destination. Engage users can use the Segment Profiles Destination to create and update Profiles that can then be accessed through Profile API and activated within Twilio Engage . Separate endpoints and credentials required to set up third party destinations Before you begin setting up your destinations, note that each destination has different authentication requirements. See the documentation for your intended destination for more details. To add your first destination: Navigate to Connections > Destinations and select the Reverse ETL tab. Click Add Reverse ETL destination . Select the destination you want to connect to and click Configure . Select the Reverse ETL source you want to connect the destination to. Enter the Destination name and click Create Destination . Enter the required information on the Settings tab of the destination. Navigate to the destination settings tab and enable the destination. If the destination is disabled, then Segment won’t be able to start a sync. Step 4: Create mappings Mappings enable you to map the data you extract from your warehouse to the fields in your destination. A destination can have multiple mappings. To create a mapping: Navigate to Connections > Destinations and select the Reverse ETL tab. Select the destination that you want to create a mapping for. Click Add Mapping . Select the model to sync from. In the Define sync behavior section, select the Action you want to sync. Actions determine the information sent to the destination. The list of Actions are unique to each destination. Select which records to send to your destination after Segment completes extracting data based on your model. Some destinations have sync modes , which let you specify how Segment should send data to the destination. Sync modes are unique to each destination. Destinations without sync modes let you select from the following options: Added records Updated records Added or updated records Deleted records In the Map fields section, define how to map the record columns from your model to your destination. Map the fields that come from your source to fields that the destination expects to find. Fields on the destination side depend on the type of Action selected. If you’re setting up a Destination Action, some mapping fields might require data to be in the form of an object or array. See the supported objects and arrays for mapping for more information. (Optional) Use the Suggested Mappings feature to identify and match near-matching field names to streamline the field mapping process. In the Send test record section , select a test record to preview the fields that you mapped to your destination. When you’ve verified that the records appear as expected, click Next . Enter a name for your mapping. The name initially defaults to the Action’s name, for example, Track Event , but you can make changes to this default name. Select how often you want Segment to sync your data under Schedule configuration . Interval : Extractions perform based on a selected time cycle. Select one of the following options: 15 minutes, 30 minutes, 1 hour, 2 hours, 4 hours, 6 hours, 8 hours, 12 hours, 1 day. Day and time : Extractions perform at specific times on selected days of the week. Select the destination you’d like to enable on the My Destinations page under Reverse ETL > Destinations . Turn the toggle on for the Mapping Status . Events that match the trigger condition in the mapping will be sent to the destination. If you disable the mapping state to the destination, events that match the trigger condition in the mapping won’t be sent to the destination. Use Segment’s Duplicate mappings feature to create an exact copy of an existing mapping. The copied mapping has the same configurations and enrichments as your original mapping. Supported object and arrays When you set up destination actions in Reverse ETL, depending on the destination, some mapping fields may require data as an object or array . Object mapping You can send data to a mapping field that requires object data. An example of object mapping is an Order completed model with a Products column that’s in object format. Example: { \"product\" : { \"id\" : 0001 , \"color\" : \"pink\" , \"name\" : \"tshirt\" , \"revenue\" : 20 , \"inventory\" : 500 } } To send data to a mapping field that requires object data, you can choose between these two options: Option Details Customize object This enables you to manually set up the mapping fields with any data from the model. If the model contains some object data, you can select properties within the object to set up the mappings as well. Select object This enables you to send all nested properties within an object. The model needs to provide data in the format of the object. Certain object mapping fields have a fixed list of properties they can accept. If the names of the nested properties in your object don’t match with the destination properties, the data won’t send. Segment recommends you to use Customize Object to ensure your mapping is successful. Array mapping To send data to a mapping field that requires array data, the model must provide data in the format of an array of objects. An example is an Order completed model with a Product purchased column that’s in an array format. Example: [ { \"currency\" : \"USD\" , \"price\" : 40 , \"productName\" : \"jacket\" , \"purchaseTime\" : \"2021-12-17 23:43:47.102\" , \"quantity\" : 1 }, { \"currency\" : \"USD\" , \"price\" : 5 , \"productName\" : \"socks\" , \"quantity\" : 2 } ] To send data to a mapping field that requires array data, you can choose between these two options: Option Details Customize array This enables you to select the specific nested properties to send to the destination. Select array This enables you to send all nested properties within the array. Certain array mapping fields have a fixed list of properties they can accept. If the names of the nested properties in your array don’t match the destination properties, the data won’t send. Segment recommends you to use the Customize array option to ensure your mapping is successful. Objects in an array don’t need to have the same properties. If a user selects a missing property in the input object for a mapping field, the output object will miss the property. Null value management You can choose to exclude null values from optional mapping fields in your syncs to some destinations. Excluding null values helps you maintain data integrity in your downstream destinations, as syncing a null value for an optional field may overwrite an existing value in your downstream tool. For example, if you opt to sync null values with your destination and an end user fills out a form but chooses to leave an optional telephone number field blank, the existing telephone number you have on file in your destination could be overwritten with the null value. By opting out of null values for your downstream destination, you would preserve the existing telephone number in your destination. By default, Segment syncs null values from mapped fields to your downstream destinations. Some destinations do not allow the syncing of null values, and will reject requests that contain them. Segment disables the option to opt out of syncing null values for these destinations. To opt out of including null values in your downstream syncs: Navigate to Connections > Destinations and select the Reverse ETL tab. Select the destination and the mapping you want to edit. Click Edit mapping. Under Optional fields , select the field you want to edit. In the field dropdown selection, disable the Sync null values toggle. Initial sync for a given mapping After you’ve set up your source, model, destination, and mappings for Reverse ETL, your data will extract and sync to your destination(s) right away if you chose an interval schedule. If you set your data to extract at a specific day and time, the extraction will take place then. Edit Reverse ETL syncs Edit your model To edit your model: Navigate to Connections > Destinations and select the Reverse ETL tab. Select the source and the model you want to edit. On the overview tab, click Edit to edit your query. Click the Settings tab to edit the model name or change the schedule settings. Suggested mappings Suggested mappings is fully available for RETL mappings. Segment offers suggested mappings that automatically propose relevant destination fields for model columns and payload elements. For example, if your model includes a column or payload field named transaction_amount , the feature might suggest mapping it to a destination field like Amount or TransactionValue . This automation, powered by intelligent autocompletion, matches and identifies near-matching field names to streamline the mappings setup process. For more information, see Segment’s suggested mappings blog post and the Suggested Mappings Nutrition Facts Label . Review the suggested mappings for accuracy before finalizing them, as Segment can’t guarantee all of the suggested mappings are accurate. Edit your mapping To edit your mapping: Navigate to Connections > Destinations and select the Reverse ETL tab. Select the destination and the mapping you want to edit. Select the … three dots and click Edit mapping . If you want to delete your mapping, select Delete . This page was last modified: 18 Dec 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Step 1: Add a source Step 2: Add a model Step 3: Add a destination Step 4: Create mappings Initial sync for a given mapping Edit Reverse ETL syncs Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "cycle",
      "model",
      "supported",
      "source",
      "section",
      "configurations",
      "array",
      "easiest",
      "options",
      "between",
      "dropdown",
      "define",
      "documentation",
      "suggested",
      "disabled",
      "overwritten",
      "which",
      "state",
      "improve",
      "separate",
      "reject",
      "contains",
      "option",
      "selection",
      "potentially",
      "guarantee",
      "extraction",
      "intended",
      "input",
      "transactionvalue",
      "syncing",
      "missing",
      "currency",
      "certain",
      "choose",
      "helpful",
      "warehouse",
      "destinations",
      "opting",
      "recommends",
      "toggle",
      "profiles",
      "works",
      "schedule",
      "field",
      "track",
      "configuration",
      "automatically",
      "format",
      "minutes",
      "should",
      "appear",
      "disable",
      "first",
      "create",
      "extracts",
      "existing",
      "value",
      "feedback",
      "write",
      "enter",
      "corresponding",
      "event",
      "extracted",
      "offers",
      "objects",
      "record",
      "centralize",
      "purchasetime",
      "specify",
      "permissions",
      "bigquery",
      "query",
      "determine",
      "might",
      "names",
      "configure",
      "analytics",
      "change",
      "cloud",
      "selected",
      "selects",
      "contain",
      "depend",
      "nutrition",
      "provide",
      "integrate",
      "credentials",
      "websites",
      "sources",
      "hours",
      "property",
      "modified",
      "results",
      "steps",
      "information",
      "powered",
      "added",
      "components",
      "data",
      "extractions",
      "successful",
      "excluding",
      "overwrite",
      "behavior",
      "complete",
      "identifies",
      "assistance",
      "extracting",
      "blank",
      "accessed",
      "account",
      "chooses",
      "syncs",
      "checks",
      "object",
      "exclude",
      "socks",
      "method",
      "completed",
      "depending",
      "place",
      "fills",
      "products",
      "guide",
      "stores",
      "multiple",
      "identify",
      "jacket",
      "deleted",
      "telephone",
      "versioning",
      "mapping",
      "snowflake",
      "required",
      "needs",
      "properties",
      "level",
      "api",
      "automation",
      "strategy",
      "requirements",
      "intelligent",
      "redundancies",
      "listed",
      "tools",
      "manually",
      "finalizing",
      "amount",
      "quantity",
      "expected",
      "business",
      "expects",
      "prevent",
      "supports",
      "click",
      "visit",
      "mapped",
      "reduce",
      "order",
      "caches",
      "methods",
      "leave",
      "accurate",
      "identifier",
      "there",
      "following",
      "updated",
      "times",
      "activated",
      "under",
      "checkpointing",
      "problems",
      "three",
      "setting",
      "requires",
      "navigate",
      "within",
      "suggest",
      "color",
      "feature",
      "initially",
      "modes",
      "specific",
      "number",
      "label",
      "extension",
      "select",
      "product",
      "completes",
      "trigger",
      "mappings",
      "different",
      "postgres",
      "events",
      "without",
      "editor",
      "databricks",
      "inventory",
      "update",
      "reverse",
      "exact",
      "output",
      "destination",
      "allow",
      "connect",
      "would",
      "downstream",
      "third",
      "optional",
      "enable",
      "given",
      "maintain",
      "twilio",
      "condition",
      "setup",
      "matching",
      "ensure",
      "queries",
      "includes",
      "party",
      "transaction_amount",
      "accept",
      "unique",
      "status",
      "after",
      "thanks",
      "authentication",
      "azure",
      "mobile",
      "preview",
      "columns",
      "engage",
      "changes",
      "result",
      "propose",
      "duplicate",
      "profile",
      "chose",
      "disables",
      "perform",
      "enables",
      "redshift",
      "start",
      "integrity",
      "management",
      "match",
      "relevant",
      "access",
      "modeling",
      "customize",
      "productname",
      "fields",
      "detect",
      "before",
      "interval",
      "copied",
      "based",
      "column",
      "initial",
      "fully",
      "growth",
      "defaults",
      "records",
      "models",
      "require",
      "available",
      "streamline",
      "could",
      "breaking",
      "through",
      "example",
      "review",
      "fixed",
      "catalog",
      "follow",
      "helps",
      "process",
      "requests",
      "matches",
      "request",
      "primary",
      "overview",
      "extract",
      "delete",
      "segment",
      "autocompletion",
      "arrays",
      "right",
      "contact",
      "purchased",
      "endpoints",
      "price",
      "verified",
      "including",
      "payload",
      "elements",
      "these",
      "started",
      "settings",
      "revenue",
      "original",
      "values",
      "accuracy",
      "preserve",
      "facts",
      "tshirt",
      "cache",
      "support",
      "begin",
      "action",
      "enrichments",
      "default",
      "actions",
      "connections",
      "often",
      "questions",
      "users",
      "future",
      "named",
      "nested",
      "details"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#set-up-guide",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/storage/catalog/postgres/#network-permissions-for-segment-to-rds",
    "title": " Postgres Warehouse Destination | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Storage / Catalog / Postgres Warehouse Destination Postgres Warehouse Destination On this page Getting started Heroku Postgres RDS Postgres Sync schedule Security Best Practices FAQs Troubleshooting PostgreSQL, or Postgres, is an object-relational database management system (ORDBMS) with an emphasis on extensibility and standards compliance. As a database server, its primary functions are to store data securely and return that data in response to requests from other software applications. PostgreSQL is ACID-compliant and transactional. PostgreSQL has updatable views and materialized views, triggers, foreign keys; supports functions and stored procedures, and other expandability. Developed by the PostgreSQL Global Development Group, free and open-source. Segment sources required In order to add a Postgres destination to Segment, you must first add a source. To learn more about sources in Segment, check out the Sources Overview documentation. Getting started Segment supports the following Postgres database providers: Heroku RDS View observability metrics about your Postgres Warehouse Destination with Delivery Overview Delivery Overview, Segment’s built-in observability tool, is now in public beta for storage destinations. For more information, see the Delivery Overview documentation. Segment supported a third Postgres provider, Compose, until Compose was was deprecated on March 1, 2023 . To continue sending your Segment data to a Postgres destination, consider using either Heroku Postgres or Amazon’s Relational Database Service . Segment only supports these Postgres databases. Postgres databases from other providers aren’t guaranteed to work. For questions or concerns about Segment-supported Postgres providers, contact Segment Support . Heroku Postgres This guide explains how to set up a Postgres database with Heroku. Heroku is a cloud-based platform-as-a-service which simplifies the process of setting up and administering a Postgres database. First sync duration The initial sync between Segment and Heroku Postgres can take up to 24 hours to complete. Sign up for a Heroku account, or log in to an existing account. On the Heroku landing page, select New and click Create new app . Enter a name for your app and select the region where you want to host it. If you want to add your app to a Heroku pipeline, do so here. When you’ve finished updating your app’s settings, click Create app . On the Deploy page, select the Resources tab. On the Resources page, enter “Heroku Postgres” in the search bar. Select the billing plan that you want to use for this app and click Submit Order Form . Segment recommends that customers start with a Standard 4 plan. Learn more about plan pricing on the Heroku Postgres pricing page . Select the Heroku Postgres add-on you created in the previous step and open the Settings tab. Click the View Credentials… button and copy the host, database, user, and password values. You will need this information to connect your database to Segment in a later step. Open the Segment app. On the Overview page, click Add Destination . Search for and select the Postgres destination. Choose the source(s) you’d like to connect to Postgres, and click Next . Enter the host, database, user, and password values you copied from Heroku in an earlier step, and click Connect . If Segment connected to your destination, you’ll see the Next Steps screen. If you receive an “Invalid database” error, check that your host, database, user, and password fields match the credentials found in the Settings tab of your Heroku Postgres instance. RDS Postgres You can set up a Postgres database with Amazon Relational Database Service (RDS). RDS simplifies the process of setting up and administering a Postgres database. Follow the steps in Amazon’s documentation Creating a PostgreSQL DB instance and connecting to a database on a PostgreSQL DB instance to create a new PostgreSQL database in RDS. For best performance, create your database in the US West region. Ensure your database is publicly accessible When you create your database, ensure that the Public access setting is set to Yes . Segment requires your database to be publicly accessible in order to connect to your database. When you create your database, Segment recommends that you enter a Database name value in the Additional options section. This setting creates the Postgres database at instance startup. Network Permissions for Segment to RDS Once you’ve created a database, you must create an inbound rule allowing Segment to connect to your instance. To create a new inbound rule: Open the RDS Console . Open the Databases tab. Select your database and open the Connectivity & security tab. Open the Security group rules section. Click on the existing inbound security group and select the Inbound rules tab. Click Edit inbound rules to add a new rule, and click Add rule . Add a new rule with the following parameters: Select PostgreSQL as the type. For Source , change the custom IP to 52.25.130.38/32 . Add another rule with the following parameters: Select PostgreSQL as the type. For Source , change the custom IP to 34.223.203.0/28 . Click Save rules . Sync schedule Your data will be available in Warehouses between 24 and 48 hours from your first sync. Your warehouse then syncs once or twice a day depending on your Segment Plan . Segment allows Business Tier (BT) customers to schedule the time and frequency of warehouse data syncs. If you are on a BT plan, you can schedule warehouse syncs by going to Warehouse > Settings > Sync Schedule in the Segment web app. You can schedule up to the number of syncs allowed on your billing plan. Security To make sure your Postgres database is secure: Log in with a user that has read and write permissions so that Segment can write to your database. Allowlist the Segment IP addresses ( 52.25.130.38/32 and 34.223.203.0/28 ). Otherwise, Segment can’t load your data. Create a service user that has read/write permissions. Always require SSL/TLS and make sure your data warehouse can only accept secure connections. Segment only connects to your data warehouse using SSL/TLS. Allowlisting IPs Segment recommends enabling IP allowlists for added security. All Segment users with workspaces hosted in the US who use allowlists in their warehouses must update those allowlists to include the following ranges: 52.25.130.38/32 34.223.203.0/28 Users with workspaces in the EU must allowlist 3.251.148.96/29 . Best Practices Once you’ve got your data in Postgres, you can do even more with it. You might develop an app that performs various functions based on different events being loaded to the database, potentially using RabbitMQ as your asynchronous message broker. For example, you might want a banner to appear once your 1000th customer has signed up. The data is at your fingertips; you just need to decide how to use it. Query Speed The speed of your queries depends on the capabilities of the hardware you have chosen as well as the size of the dataset. The amount of data utilization in the cluster will also impact query speed. Check with your hosting provider or Postgres docs for performance best practices. Single and Double Quotes in PostgreSQL If you use double quotes on the name of a table, column, index, or other object when you create it, and if there is even one capital letter in that identifier, you will need to use double quotes every single time you query it. Single quotes and double quotes in PostgreSQL have completely different jobs, and return completely different data types.  Single quotes return text strings.  Double quotes return identifiers, but with the case preserved. If you create a table using double quotes: CREATE TABLE \"Example\" ( ... ); Segment has now created a table in which the table name has not been forced to lowercase, but which has preserved the capital E.  This means that the following query will now fail: select * from example ; ERROR : relation \"example\" does not exist For more information on single vs double follow this link . FAQs Can I add an index to my tables? Yes, you can add indexes to your tables without blocking Segment syncs. However, Segment recommends limiting the number of indexes you have. Postgres’s native behavior requires that indexes update as more data is loaded, and this can slow down your Segment syncs. Troubleshooting Permission denied for database The syncs are failing due to a permissions issue. The user you configured does not have permission to connect to the appropriate database. To resolve these errors: connect to your warehouse using the owner account, or grant permissions to the account you use to connect to Segment.  You can correct these permissions by running the following SQL statement, replacing <user> with the account you use to connect to Segment: GRANT CONNECT ON DATABASE <database_name> TO <user> Permission denied for schema The syncs for the source, <source_name> , are failing because of a permissions issue. In most cases, the user connected to Segment does not have permission to view the necessary schemas in the warehouse. To resolve these errors, connect your warehouse using the owner account, or grant permissions to the user you use to connect to Segment. You can correct these permissions by running the following SQL statement - Replace user with the user you use to connect to Segment, and run this statement for each schema in the warehouse. GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA <schema_name> TO <user> Dial TCP: no such host Segment is unable to connect to the warehouse host, which is causing the syncs to fail. This error is usually due to an invalid host address, a warehouse hosted on a private IP, or a credentials issue. In order to resolve the error, check the following settings: The host address listed in your Segment warehouse settings is correct The host is configured with a publicly accessible IP address The username and password you use to connect to your Segment workspace matches the username and password on the Warehouse directly Dial TCP: i/o timeout The warehouse syncs are failing due to a connection issue: dial tcp XX.XXX.XXX.XXX:XXXX: i/o timeout This error can be caused for a few reasons: Your warehouse went offline. There’s a setting needed for Segment to connect which hasn’t been correctly configured. Refer to the Warehouse documentation to ensure all steps outlined there have been followed. Schema does not exist The syncs are failing due to a permissions issue. It looks like the user connected does not have permission to create schemas in your warehouse. To resolve these errors Segment recommends connecting to your warehouse using the owner account, or granting permissions to the current account you use to connect to Segment. You can correct these permissions by running the following SQL statement - Replace user with the account you use to connect to Segment, and run this statement for each schema in the warehouse. GRANT CREATE ON DATABASE <database_name> TO <user> This page was last modified: 21 Oct 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting started Heroku Postgres RDS Postgres Sync schedule Security Best Practices FAQs Troubleshooting Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "connects",
      "connected",
      "group",
      "correctly",
      "concerns",
      "supported",
      "troubleshooting",
      "custom",
      "source",
      "forced",
      "error",
      "database",
      "inbound",
      "section",
      "easiest",
      "options",
      "between",
      "customers",
      "blocking",
      "until",
      "finished",
      "permission",
      "documentation",
      "foreign",
      "server",
      "connectivity",
      "triggers",
      "procedures",
      "which",
      "privileges",
      "banner",
      "fingertips",
      "improve",
      "region",
      "limiting",
      "correct",
      "practices",
      "warehouses",
      "causing",
      "username",
      "table",
      "utilization",
      "include",
      "potentially",
      "updatable",
      "errors",
      "completely",
      "failing",
      "every",
      "allowing",
      "choose",
      "duration",
      "warehouse",
      "helpful",
      "where",
      "destinations",
      "creating",
      "recommends",
      "submit",
      "schema_name",
      "database_name",
      "various",
      "schedule",
      "observability",
      "followed",
      "deploy",
      "pricing",
      "cluster",
      "continue",
      "development",
      "appear",
      "hardware",
      "developed",
      "first",
      "create",
      "1000th",
      "existing",
      "securely",
      "value",
      "feedback",
      "enter",
      "secure",
      "write",
      "replacing",
      "pipeline",
      "rabbitmq",
      "getting",
      "directly",
      "permissions",
      "query",
      "broker",
      "might",
      "configured",
      "analytics",
      "change",
      "customer",
      "relation",
      "cloud",
      "standards",
      "necessary",
      "startup",
      "system",
      "standard",
      "signed",
      "lowercase",
      "compose",
      "decide",
      "loaded",
      "workspaces",
      "integrate",
      "using",
      "credentials",
      "sources",
      "screen",
      "another",
      "hours",
      "websites",
      "additional",
      "storage",
      "modified",
      "steps",
      "information",
      "heroku",
      "performance",
      "added",
      "store",
      "chosen",
      "data",
      "service",
      "later",
      "behavior",
      "tables",
      "complete",
      "single",
      "private",
      "assistance",
      "otherwise",
      "depends",
      "emphasis",
      "network",
      "account",
      "publicly",
      "guaranteed",
      "syncs",
      "object",
      "grant",
      "button",
      "usually",
      "depending",
      "relational",
      "guide",
      "resolve",
      "refer",
      "running",
      "public",
      "hosted",
      "allows",
      "applications",
      "required",
      "asynchronous",
      "provider",
      "either",
      "views",
      "going",
      "listed",
      "tools",
      "transactional",
      "granting",
      "amount",
      "business",
      "metrics",
      "replace",
      "supports",
      "addresses",
      "click",
      "visit",
      "statement",
      "order",
      "following",
      "there",
      "identifier",
      "about",
      "providers",
      "develop",
      "being",
      "problems",
      "consider",
      "setting",
      "requires",
      "owner",
      "index",
      "landing",
      "creates",
      "types",
      "speed",
      "number",
      "however",
      "accessible",
      "issue",
      "select",
      "delivery",
      "invalid",
      "billing",
      "preserved",
      "different",
      "postgres",
      "events",
      "allowlists",
      "response",
      "allowlist",
      "platform",
      "without",
      "native",
      "message",
      "enabling",
      "update",
      "earlier",
      "destination",
      "source_name",
      "connect",
      "hosting",
      "address",
      "twice",
      "simplifies",
      "third",
      "postgresql",
      "connection",
      "capabilities",
      "quotes",
      "sending",
      "ensure",
      "queries",
      "accept",
      "letter",
      "workspace",
      "thanks",
      "mobile",
      "stored",
      "needed",
      "dataset",
      "ranges",
      "means",
      "compliant",
      "schema",
      "schemas",
      "timeout",
      "performs",
      "start",
      "offline",
      "management",
      "match",
      "instance",
      "access",
      "expandability",
      "check",
      "double",
      "fields",
      "frequency",
      "copied",
      "based",
      "column",
      "indexes",
      "initial",
      "because",
      "looks",
      "other",
      "growth",
      "previous",
      "require",
      "available",
      "search",
      "materialized",
      "allowlisting",
      "example",
      "return",
      "catalog",
      "follow",
      "request",
      "requests",
      "process",
      "matches",
      "primary",
      "overview",
      "unable",
      "connecting",
      "segment",
      "ordbms",
      "software",
      "functions",
      "receive",
      "capital",
      "outlined",
      "denied",
      "contact",
      "extensibility",
      "databases",
      "console",
      "learn",
      "those",
      "identifiers",
      "current",
      "these",
      "reasons",
      "started",
      "resources",
      "security",
      "settings",
      "rules",
      "amazon",
      "cases",
      "exist",
      "always",
      "values",
      "built",
      "caused",
      "their",
      "allowed",
      "administering",
      "impact",
      "strings",
      "created",
      "password",
      "march",
      "support",
      "compliance",
      "appropriate",
      "found",
      "global",
      "connections",
      "questions",
      "updating",
      "explains",
      "deprecated",
      "parameters",
      "users"
    ],
    "howto_steps": [
      "from example ; ERROR : relation \"example\" does not exist For more information on single vs double follow this link . FAQs Can I add an index to my tables? Yes, you can add indexes to your tables without blocking Segment syncs. However, Segment recommends limiting the number of indexes you have. Postgres’s native behavior requires that indexes update as more data is loaded, and this can slow down your Segment syncs. Troubleshooting Permission denied for database The syncs are failing due to a permissions issue. The user you configured does not have permission to connect to the appropriate database. To resolve these errors: connect to your warehouse using the owner account, or grant permissions to the account you use to connect to Segment.  You can correct these permissions by running the following SQL statement, replacing <user> with the account you use to connect to Segment: GRANT CONNECT ON DATABASE <database_name> TO <user> Permission denied for schema The syncs for the source, <source_name> , are failing because of a permissions issue. In most cases, the user connected to Segment does not have permission to view the necessary schemas in the warehouse. To resolve these errors, connect your warehouse using the owner account, or grant permissions to the user you use to connect to Segment. You can correct these permissions by running the following SQL statement",
      "Replace user with the user you use to connect to Segment, and run this statement for each schema in the warehouse. GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA <schema_name> TO <user> Dial TCP: no such host Segment is unable to connect to the warehouse host, which is causing the syncs to fail. This error is usually due to an invalid host address, a warehouse hosted on a private IP, or a credentials issue. In order to resolve the error, check the following settings: The host address listed in your Segment warehouse settings is correct The host is configured with a publicly accessible IP address The username and password you use to connect to your Segment workspace matches the username and password on the Warehouse directly Dial TCP: i/o timeout The warehouse syncs are failing due to a connection issue: dial tcp XX.XXX.XXX.XXX:XXXX: i/o timeout This error can be caused for a few reasons: Your warehouse went offline. There’s a setting needed for Segment to connect which hasn’t been correctly configured. Refer to the Warehouse documentation to ensure all steps outlined there have been followed. Schema does not exist The syncs are failing due to a permissions issue. It looks like the user connected does not have permission to create schemas in your warehouse. To resolve these errors Segment recommends connecting to your warehouse using the owner account, or granting permissions to the current account you use to connect to Segment. You can correct these permissions by running the following SQL statement",
      "Replace user with the account you use to connect to Segment, and run this statement for each schema in the warehouse. GRANT CREATE ON DATABASE <database_name> TO <user> This page was last modified: 21 Oct 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting started Heroku Postgres RDS Postgres Sync schedule Security Best Practices FAQs Troubleshooting Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#best-practices",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#heroku-postgres",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/destinations/#sync-modes",
    "title": " Destinations Overview | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Destinations Overview Destinations Overview On this page Sources vs Destinations Destination connection types Method compatibility Source compatibility Destination Actions Connection modes Sync modes Add a destination Data deliverability IP Allowlisting Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time. Destinations Catalog If you want to explore the destinations compatible with Segment, check out the Destinations catalog . Select an item from the catalog to learn more about it. The documentation for each destination explains how the Segment Tracking API methods are implemented for that destination. Sources vs Destinations Segment has Sources and Destinations . Sources send data into Segment, while Destinations receive data from Segment. Destination connection types Segment has three destination connection types: Event streams Storage Reverse ETL Event streams destinations Event streams destinations are all destinations that aren’t storage or Reverse ETL destinations. Adding these destinations allow you to act on your data and learn more about your customers in real time. These include Destination Actions . Storage destinations Storage destinations enable you to store your raw Segment data. This enables data analysts and data scientists to work with the raw data to derive deeper and more customized insights to support your organization. Learn more from the storage overview page . Reverse ETL destinations Reverse ETL destinations are the business tools or apps you use that Segment syncs the data from your warehouse to. If your destination is not listed in the Reverse ETL catalog , use the Segment Connections destination to send data from your Reverse ETL warehouse to other destinations listed in the catalog . The Segment Connections destination enables you to mold data extracted from your warehouse in Segment Spec API calls that are then processed by Segment’s HTTP Tracking API . The Segment HTTP Tracking API lets you record analytics data. The requests hit Segment’s servers, and then Segment routes your data to any destination you want. Get started with the Segment Connections destination . Method compatibility Not all destinations can accept data from specific method types. To know if a destination can accept data from specific method types, look for the Quick Info box at the top of the destination’s documentation page, or check out the Destinations Methods comparison chart . Source compatibility Many destinations can accept data from all types of sources, but some are only compatible with specific source types (for example, web only, or server only). To find out which source types a specific destination can accept data from, check the documentation for that destination in the Quick info box, or in the Supported Sources and Connection Modes section. Destinations Compatibility Matrix Wondering which destinations take which data? Check out the Destination connection modes list by category. Destination Actions In June 2021, Segment released a new form of destinations called Destinations Actions . These destinations allow users to create subscriptions : sets of conditions in which data is sent to the destinations and data mappings, to format that data for the destination tool. Segment watches for data that matches the conditions you create ( triggers ) for the subscription, and when the conditions are met, uses an explicit mapping to transform the incoming data to an output format that your destination can use. Connection modes Segment’s web source (Analytics.js), and native client-side libraries (iOS, Android, React-native) allow you to choose how you send data to Segment from your website or app. There are two ways to send data: Cloud-mode : The sources send data directly to the Segment servers, which then translate it for each connected downstream destination, and send it on. Translation is done on the Segment servers, keeping your page size, method count, and load time small. Healthcare and Life Sciences (HLS) customers can encrypt data flowing into their destinations HLS customers with a HIPAA eligible workspace can encrypt data in fields marked as Yellow in the Privacy Portal before they flow into an event stream, cloud-mode destination. To learn more about data encryption, see the HIPAA Eligible Segment documentation Device-mode : You include additional code on your website or mobile app which allows Segment to use the data you collect on the device to make calls directly to the destination tool’s API, without sending it to the Segment servers first . (You still send your data to the Segment servers, but this occurs asynchronously.) This is also called wrapping or bundling , and it might be required when the source has to be loaded on the page to work, or loaded directly on the device to function correctly. When you use Analytics.js, you can change the device-mode destinations that a specific source sends from within the Segment web app, without touching any code. If you use Server source libraries, they only send data directly to Segment in Cloud-mode. Server library implementations operate in the server backend, and can't load additional destination SDKs. Choosing a connection mode Cloud-mode destinations send data through Segment. Device-mode destinations send data in parallel to Segment. There are tradeoffs between using cloud-mode and device-mode destinations. In general, Cloud-mode is preferred because you then benefit from Segment’s system features, like retries, Replay, Warehouses, Privacy blocking, filtering, and more. You should consider using device-mode if you use destinations which record information directly on the user’s device. These types of tools might lose functionality if they aren’t loaded directly on the device. Take a look at the pros and cons chart of device-mode and cloud-mode destinations to determine which connection mode is best for you: Connection Mode Pros Cons Cloud-mode * Increased site or app performance * Unaffected by ad blockers * May limit Destination features Device-mode * Access to all features of the Destination * Decreased site or app performance Website source connection modes Segment’s website sources use device-mode by default, because so many website-based destinations require that they be loaded on the page, and because size and page performance are less of a concern than on mobile. If your website source only collects information that you can instrument yourself, then you can use cloud-mode. For example, a web-chat destination must be loaded to connect to the service and collect metrics efficiently - you don’t expect it to route chat messages through Segment! This does mean that Segment might not receive a small amount of the destination-specific information from your users. In the chat example, if the destination is calculating idle time between messages, that data would appear in the destination’s tooling, but not necessarily in the Segment data. Mobile source connection modes By default, destinations configured on a mobile source send their data directly to the Segment servers, then translate it and use Cloud-mode to forward it to destinations. Cloud-mode means that Segment sends the data directly from the Segment servers, to their servers. This means you don’t need to package third-party SDKs for destinations that can accept cloud-mode data. Some primarily web-based destinations also allow cloud-mode, which can help reduce app size, and improve load time and performance. You can read more about the effects of mobile app size on downloads in Segment’s blog . Before you turn on or opt-in for cloud-mode for a mobile source, consider if your destinations have features that require interactions on the device or require device-specific data (see the examples above). For example, if you use cloud-mode for Mixpanel, you’ll get your data on reporting and people, but won’t be able to use their features for in-app surveys or auto-tracking. These can be really valuable, but might not be a priority for your team. How Segment determines Device-mode and Cloud-mode destinations There are two main things Segment considers when deciding to use Device-mode or Cloud-mode, or both, for a destination partner: Anonymous Attribution Methodology Client-native Destination Features Anonymous attribution methodology Mobile attribution The anonymous identifiers used on mobile devices are usually static, which means Segment doesn’t need to do additional resolution, and can build Cloud-mode destinations by default. Because Segment uses native advertising identifiers on mobile devices, you don’t need a full SDK on the device to reconcile or identify a user. For example, you might track users who viewed an advertisement in one app and installed another app as a result. However, some mobile attribution tools do more advanced reconciliation based on more than the native identifier, which requires the SDK on the device to work properly. For those destinations, Segment offers device-mode, which packages the tool’s SDK with the client-side library so that you can get the entire range of tool functionality. Web Attribution Cross-domain identity resolution for websites requires that the attribution tool use a third-party cookie so it can track a user anonymously across domains. This is a critical component of attribution modeling. As a matter of principle, Segment only uses first-party cookies and doesn’t share cookies with partners, so Analytics.js and the data it collects aren’t enough to generate view-through attribution in ad networks. Customers can load their libraries and pixels in the context of the browser and trigger requests to attribution providers from their device in response to Segment API calls to take advantage of advertising and attribution tools. Client-native destination features Many of Segment’s destinations offer client-side features beyond data collection in their SDKs and libraries, for both mobile and web. In these cases, Segment offers Device-mode SDKs so that you can collect information on the device using Segment, but still get the destination’s complete native functionality. Some features that usually require Device-mode include: automatic A/B testing, displaying user surveys, live chat or in-app notifications, touch and hover heatmapping, and accessing rich device data such as CPU usage, network data, or raised exceptions. How can I tell which connection modes and platforms are supported for a destination? The first place to look is the individual destination documentation. Each one includes a matrix of supported Sources and Connection Modes. Segment provides a list of all destinations and their connection modes . In order to override the default, check the destination settings pane in the Segment web App either for a Connection Mode toggle or instructions on bundling any additional mobile components required. Sync modes Sync modes allow users to define how changes in the source should send downstream to your destination. Depending on which destinations you set up in Segment, you may need to choose a sync mode for your data. This configuration determines how Segment updates your destination based on the source data. The available sync modes can vary based on the destination, integration type, and actions within the destination. For example, if you sync customer data, you might have the option to Insert, Update, or Upsert records. Available sync modes include: Update : Modify existing records in the destination without adding new ones. Upsert : Update existing records and add new ones, if necessary. Add : Add records to a list, segment, or journey. Remove : Remove records from a list, audience, or journey. Add a destination To add a Destination: Navigate to Connections . Click Add Destination . Choose the Destination you want to add and click Configure . Most users eventually add destinations for: Analytics, Advertising, Email Marketing and/or Live Chat. Select the Source you want to connect to your Destination. Click Next . Give you Destination a name. Click Save . Configure the settings and enable your destination on the destination settings page. Learn more about what adding a destination entails. Disabled destinations do not receive data If you haven’t enabled your destination for the first time after you created it or if you actively disable a destination, Segment prevents any data from reaching the destination. Business Tier customers can request a Replay , which resends data from the time the destination was disabled to the time it was re-enabled. Replays can also send data to currently disabled destinations. Some destinations are not compatible with Replays after a certain period of time, for example, 14 days. Check with Segment’s support team friends@segment.com to confirm that your intended destination allows historical timestamps. Data deliverability Segment increases deliverability to destinations using retries and replays . Retries happen automatically for all customers, while replays are available on request for Business Tier customers. Segment’s data flow is primarily unidirectional, from Segment to integrated destinations. Segment does not inherently support a bidirectional flow where events, once delivered and processed by a destination, are sent back to Segment. Segment also uses batching to increase deliverability to your destinations. Some destinations have batching enabled by default, and some, like Segment’s Webhook (Actions) Destination , let you opt in to batching. Some cases of event batching might lead to observability loss While batching does increase event deliverability, you might experience error amplification, as if the entire batch fails, all events will be marked with the same status. For example, if a batch fails due to one 429 (Rate Limit) error, it might appear in the UI that there was one 429s request failure for each item in the batch. Retries Retries in Segment’s client libraries Segment’s client libraries ensure delivery of your data to the API reliably in the face of spotty connections, device failure, or network partitions in your data centers. When you use Segment’s mobile SDK, Segment dispatches each event to a background thread where the event is then written to a queue. Later, Segment’s SDK batches together many requests in to one compressed request and sends it to Segment’s servers. Segment’s SDKs minimize battery use and bandwidth use by powering up the radio less frequently and for shorter time periods. If the delivery of the payload is not successfully sent due to connection issues, all of your SDKs will automatically retry the request until successful receipt of the payload according to the following policies. Note that retry policies are subject to change / tuning in the future. Platform Initial Wait - Sleep duration before the first retry Wait Growth - Rate of growth of the sleep duration between each retry Max Wait - Maximum sleep duration between retries Max Attempts - Maximum number of individual retries C++ 1s None 1s 5 Clojure 15s Exponential 1h 50 Go 100ms Exponential 10s 10 Java 15s Exponential 1h 50 JavaScript 1s Exponential 1h 10 .Net 100ms Exponential 6.4s 7 Node.js 100ms Exponential 400ms 3 PHP 100ms Exponential 6.4s 7 Python 1s Exponential 34m 10 Ruby 100ms Exponential 10s 10 Mobile library retries All mobile libraries handle retries by periodically attempting to flush their internal queue of events to Segment. If the flush is unsuccessful, the library waits until the next regularly-scheduled flush time to try again. The background queue of requests to Segment is bounded in size so if events are being queued faster than we can successfully flush them to Segment, some events may be dropped. Retries between Segment and destinations The destination endpoint APIs have fluctuations in availability due to a number of issues ranging from network failures to bugs to overload. Segment’s internal systems retry failed destination API calls for four hours with a randomized exponential backoff after each attempt. This substantially improves delivery rates. Here’s an example destination that was only successfully accepting 93.36% of all API requests but was achieving a 99.28% final deliverability rate due to Segment’s retry functionality. You can see the current destination endpoint API success rates and final delivery rates for Segment’s server-side destinations on Segment’s status page . Replays Replay is available to Business tier customers. Contact Segment to learn more. Replays allow customers to load historical data from Segment’s S3 logs into downstream destinations which accept cloud-mode data. So, for example, if you wanted to try out a new email or analytics tool, Segment can replay your historical data into that tool. This gives you a great testing environment and prevents data lock-in when vendors try to hold data hostage. If you submitted suppress_only requests , Segment still retains historical events for those users, which can be replayed. If you do not want historical events replayed for suppressed users, submit suppress_and_delete requests instead. Batching Segment uses stream batching for all destinations that require near-realtime data and bulk batching for some data flows in our pipeline. Stream batching For all destinations, except for non-realtime Engage syncs and Reverse ETL syncs, Segment processes events from your source as they arrive and then flows the data downstream to your destinations in small batches, in a process called stream batching . These batches might contain different events between retry attempts, as events in previous batches may have succeeded, failed with a permanent error, or expired. This variability reduces the workload the system processes during partial successes, allows for better per-event handling, and reduces the chance of load-related failures by using variable batch formations. Bulk batching Some data flows may be able to use a process called bulk batching , which supports batching for destinations that produce between several thousand and a million events at a time. Real-time workloads or using a Destination Insert Function may prevent bulk batches from being formed. Batches contain the same events between retries. The following destinations support bulk batching: DV360 Google Adwords Remarketing Lists Klaviyo (Actions) Pinterest Audiences Snapchat Audiences LiveRamp The Trade Desk CRM You must manually configure bulk batches for Actions destinations To support bulk batching for the Actions Webhook destination, you must set enable-batching: true and batch_size: >= 1000 . IP Allowlisting IP Allowlisting uses a NAT gateway to route traffic from Segment’s servers to your destination through a limited range of IP addresses, which can prevent malicious actors from establishing TCP and UDP connections with your integrations. IP Allowlisting is available for customers on Business Tier plans. Supported destinations Segment supports IP Allowlisting in all destinations except for the following: LiveRamp TradeDesk Amazon Kinesis Destinations that are not supported receive traffic from randomly assigned IP addresses. Configure IP Allowlisting To enable IP Allowlisting for your workspace: From your Segment workspace, navigate to Settings > Workspace settings > Destination IP settings . On the Destination IP settings page, click Enable IP allowlisting . The page displays the IP address ranges that Segment uses to route data from Segment’s internal systems to your destination. Note these ranges, as you’ll need this information to enforce IP restriction in your downstream destinations. Open each of your downstream tools and configure IP restriction for each destination. For more information, refer to the documentation for your downstream tool. IP restriction might not be supported in all destinations. This page was last modified: 04 Dec 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Sources vs Destinations Destination connection types Method compatibility Source compatibility Destination Actions Connection modes Sync modes Add a destination Data deliverability IP Allowlisting Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "conceptual",
    "keywords": [
      "website",
      "connected",
      "correctly",
      "100ms",
      "javascript",
      "periodically",
      "supported",
      "wrapping",
      "tradeoffs",
      "tuning",
      "gateway",
      "source",
      "packages",
      "error",
      "attribution",
      "sleep",
      "keeping",
      "section",
      "range",
      "easiest",
      "notifications",
      "valuable",
      "identity",
      "between",
      "eligible",
      "customers",
      "blocking",
      "until",
      "failed",
      "historical",
      "forwards",
      "anonymous",
      "define",
      "documentation",
      "server",
      "integrated",
      "compressed",
      "availability",
      "arrive",
      "disabled",
      "category",
      "attempt",
      "triggers",
      "which",
      "entire",
      "successes",
      "improve",
      "variable",
      "touching",
      "python",
      "portal",
      "processed",
      "downloads",
      "except",
      "warehouses",
      "wanted",
      "batch_size",
      "delivered",
      "improves",
      "yourself",
      "option",
      "succeeded",
      "include",
      "actively",
      "function",
      "intended",
      "raised",
      "collects",
      "vendors",
      "increase",
      "certain",
      "networks",
      "cross",
      "randomly",
      "submitted",
      "individual",
      "haven",
      "choose",
      "explicit",
      "platforms",
      "warehouse",
      "duration",
      "helpful",
      "where",
      "suppress_and_delete",
      "destinations",
      "hostage",
      "marked",
      "while",
      "email",
      "collection",
      "explore",
      "submit",
      "batches",
      "powering",
      "dropped",
      "deliverability",
      "retains",
      "toggle",
      "waits",
      "bundling",
      "observability",
      "increased",
      "during",
      "track",
      "configuration",
      "enough",
      "chart",
      "context",
      "automatically",
      "failure",
      "format",
      "dv360",
      "successfully",
      "bandwidth",
      "package",
      "incoming",
      "should",
      "appear",
      "advanced",
      "disable",
      "first",
      "create",
      "mixpanel",
      "existing",
      "feedback",
      "derive",
      "marketing",
      "encryption",
      "queued",
      "efficiently",
      "event",
      "suppressed",
      "pipeline",
      "still",
      "extracted",
      "offers",
      "eventually",
      "directly",
      "clojure",
      "record",
      "thread",
      "partner",
      "operate",
      "provides",
      "advertisement",
      "determine",
      "might",
      "encrypt",
      "configured",
      "exceptions",
      "configure",
      "adwords",
      "analytics",
      "failures",
      "change",
      "customer",
      "bounded",
      "cloud",
      "react",
      "necessary",
      "implementations",
      "system",
      "properly",
      "contain",
      "klaviyo",
      "replay",
      "reconciliation",
      "streams",
      "together",
      "things",
      "fluctuations",
      "expect",
      "compatibility",
      "traffic",
      "retry",
      "loaded",
      "partners",
      "sciences",
      "formed",
      "integrate",
      "testing",
      "using",
      "sources",
      "websites",
      "another",
      "hours",
      "benefit",
      "kinesis",
      "additional",
      "related",
      "malicious",
      "storage",
      "modified",
      "share",
      "information",
      "servers",
      "performance",
      "override",
      "domain",
      "processes",
      "components",
      "store",
      "handling",
      "people",
      "data",
      "service",
      "successful",
      "libraries",
      "comparison",
      "later",
      "timestamps",
      "frequently",
      "complete",
      "limit",
      "privacy",
      "produce",
      "trade",
      "assistance",
      "matter",
      "replayed",
      "happen",
      "network",
      "suppress_only",
      "build",
      "remarketing",
      "account",
      "endpoint",
      "entails",
      "great",
      "better",
      "variability",
      "syncs",
      "customized",
      "shorter",
      "displays",
      "really",
      "method",
      "accepting",
      "usually",
      "tooling",
      "liveramp",
      "place",
      "depending",
      "watches",
      "translate",
      "component",
      "according",
      "concern",
      "refer",
      "exponential",
      "analysts",
      "period",
      "count",
      "identify",
      "allows",
      "parallel",
      "mapping",
      "required",
      "critical",
      "either",
      "across",
      "api",
      "considers",
      "integration",
      "lists",
      "scientists",
      "unidirectional",
      "listed",
      "tools",
      "manually",
      "amount",
      "instrument",
      "pinterest",
      "business",
      "advertising",
      "metrics",
      "prevent",
      "remove",
      "supports",
      "released",
      "addresses",
      "assigned",
      "issues",
      "click",
      "expired",
      "bidirectional",
      "visit",
      "viewed",
      "reduce",
      "reporting",
      "order",
      "methods",
      "transform",
      "identifier",
      "there",
      "following",
      "overload",
      "about",
      "spotty",
      "attempting",
      "integrations",
      "instructions",
      "providers",
      "being",
      "problems",
      "three",
      "centers",
      "backoff",
      "consider",
      "static",
      "requires",
      "within",
      "navigate",
      "dispatches",
      "flows",
      "compatible",
      "stream",
      "types",
      "modes",
      "specific",
      "however",
      "cookies",
      "number",
      "faster",
      "subject",
      "messages",
      "implemented",
      "select",
      "delivery",
      "unsuccessful",
      "functionality",
      "trigger",
      "mappings",
      "heatmapping",
      "displaying",
      "replays",
      "different",
      "batch",
      "events",
      "response",
      "without",
      "platform",
      "native",
      "cookie",
      "flush",
      "thousand",
      "android",
      "currently",
      "batching",
      "update",
      "routes",
      "reverse",
      "matrix",
      "installed",
      "output",
      "destination",
      "effects",
      "interactions",
      "allow",
      "connect",
      "address",
      "accessing",
      "browser",
      "would",
      "resends",
      "downstream",
      "reliably",
      "workload",
      "third",
      "surveys",
      "gives",
      "snapchat",
      "enable",
      "increases",
      "filtering",
      "pixels",
      "connection",
      "beyond",
      "enabled",
      "minimize",
      "principle",
      "sending",
      "ensure",
      "device",
      "wondering",
      "reaching",
      "includes",
      "party",
      "accept",
      "occurs",
      "primarily",
      "status",
      "policies",
      "workspace",
      "forward",
      "after",
      "inherently",
      "modify",
      "advantage",
      "google",
      "restriction",
      "thanks",
      "partitions",
      "mobile",
      "partial",
      "retries",
      "engage",
      "adding",
      "unaffected",
      "changes",
      "hover",
      "hipaa",
      "tradedesk",
      "means",
      "reconcile",
      "result",
      "determines",
      "doesn",
      "ranges",
      "background",
      "friends",
      "enables",
      "examples",
      "battery",
      "achieving",
      "audience",
      "enforce",
      "access",
      "regularly",
      "modeling",
      "small",
      "updates",
      "journey",
      "generate",
      "check",
      "features",
      "deeper",
      "methodology",
      "fields",
      "before",
      "written",
      "decreased",
      "based",
      "organization",
      "because",
      "initial",
      "workloads",
      "other",
      "called",
      "library",
      "growth",
      "limited",
      "records",
      "chance",
      "route",
      "permanent",
      "previous",
      "final",
      "require",
      "devices",
      "available",
      "flowing",
      "systems",
      "client",
      "through",
      "allowlisting",
      "example",
      "randomized",
      "establishing",
      "scheduled",
      "touch",
      "catalog",
      "rates",
      "offer",
      "request",
      "experience",
      "requests",
      "matches",
      "process",
      "overview",
      "sends",
      "segment",
      "receipt",
      "insert",
      "conditions",
      "webhook",
      "periods",
      "yellow",
      "confirm",
      "realtime",
      "priority",
      "receive",
      "queue",
      "success",
      "maximum",
      "contact",
      "learn",
      "deciding",
      "blockers",
      "payload",
      "those",
      "identifiers",
      "formations",
      "handle",
      "these",
      "choosing",
      "current",
      "translation",
      "attempts",
      "started",
      "calculating",
      "upsert",
      "settings",
      "amazon",
      "instead",
      "cases",
      "prevents",
      "radio",
      "calls",
      "subscription",
      "their",
      "400ms",
      "million",
      "environment",
      "quick",
      "created",
      "necessarily",
      "support",
      "plans",
      "domains",
      "automatic",
      "tracking",
      "backend",
      "preferred",
      "again",
      "usage",
      "default",
      "asynchronously",
      "healthcare",
      "actions",
      "above",
      "general",
      "amplification",
      "anonymously",
      "ranging",
      "internal",
      "connections",
      "reduces",
      "questions",
      "resolution",
      "insights",
      "explains",
      "substantially",
      "collect",
      "users",
      "subscriptions",
      "future",
      "several",
      "actors",
      "fails",
      "audiences"
    ],
    "howto_steps": [
      "Increased site or app performance",
      "Unaffected by ad blockers",
      "May limit Destination features Device",
      "Access to all features of the Destination",
      "Decreased site or app performance Website source connection modes Segment’s website sources use device",
      "you don’t expect it to route chat messages through Segment! This does mean that Segment might not receive a small amount of the destination",
      "Sleep duration before the first retry Wait Growth",
      "Rate of growth of the sleep duration between each retry Max Wait",
      "Maximum sleep duration between retries Max Attempts",
      "Maximum number of individual retries C++ 1s None 1s 5 Clojure 15s Exponential 1h 50 Go 100ms Exponential 10s 10 Java 15s Exponential 1h 50 JavaScript 1s Exponential 1h 10 .Net 100ms Exponential 6.4s 7 Node.js 100ms Exponential 400ms 3 PHP 100ms Exponential 6.4s 7 Python 1s Exponential 34m 10 Ruby 100ms Exponential 10s 10 Mobile library retries All mobile libraries handle retries by periodically attempting to flush their internal queue of events to Segment. If the flush is unsuccessful, the library waits until the next regularly"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/engage/content/sms/template",
    "title": " SMS Template | Segment Documentation",
    "platform": "segment",
    "content": "Home / Engage / Content / Sms / SMS Template SMS Template Free x Team x Business ✓ + Engage Premier ✓ ? Engage Premier requires a Business tier account and includes Engage Foundations and Unify. See the available plans , or contact Support . On this page SMS template types Build an SMS message template Test your SMS template Personalize with merge tags Configure Link Shortening Working with SMS message templates SMS best practices and limitations Next steps Engage Premier entered an End of Sale (EOS) period effective  June 10, 2024. Existing Segment customers will continue to have access and support to Engage Premier until an end-of-life (EOL) date is announced. We recommend exploring the following pages in preparation of a migration or future MCM needs: Twilio Marketing Campaigns Preferred ISV Partners: Airship Blog Bloomreach Blog Braze Blog Insider Blog Klaviyo Blog Twilio Engage Foundations Documentation Use Twilio Engage to build SMS message templates to include throughout your marketing campaigns. You can build an SMS template and include personalized content in messages based on user profile traits. Once you build the SMS, Twilio Engage saves the template for you to preview, maintain, and reuse. Use personalized SMS messages to connect with users in real-time, as they reach a specific step in a journey. SMS template types You can choose between two SMS template types: Media , which contains media and text content Text , which contains text content of up to 1600 characters Build an SMS message template You must first configure your SMS service with Twilio to build an SMS template in Engage. Visit the onboarding steps for more on how to connect a Twilio account. Follow these steps to build an SMS template: Navigate to Engage > Content and click Create template . Select SMS , then click Configure . Enter a template name and select your template’s language. Select your template’s content type, then click Next . For text templates, enter your message’s text in the Body field and add any desired merge tags . For media templates, enter your message’s text in the Body field, add the media URL, then add any desired merge tags. Media templates support PNG, JPEG, and GIF files. Include an opt-out message in the body of your text. For example, “Reply STOP to unsubscribe.” See SMS Best Practices for more information. Once you’ve finished adding your template’s content, click Save . Segment confirms that your template was saved. Use the SMS Templates screen to preview and update existing SMS message templates. Engage content validation For all content editors in Engage, you’ll see alerts for any issues in your template, such as invalid profile traits or incorrect liquid syntax . Engage both flags template issue(s), and displays recommended next steps. While you can save these templates, you must fix any issues before using them in Engage campaigns. Test your SMS template Send a test SMS message before you include it as a step in your Journey. After you build your SMS template, click Test SMS . If your template has profile traits, enter a trait value for the test SMS. This ensures that your merge tags work as expected. Empty fields show the default value that you’ve assigned. For example, loyal customer would be the default for the following merge tag: {{profile.traits.first_name | default: \"loyal customer\"}} . If there’s no default value, the field will be blank. Enter recipient phone numbers for the test message. Profiles that you send test messages to must have a userId in Segment. Click Send test SMS . You can also test SMS templates directly within Journeys before you send them. Personalize with merge tags Personalize SMS content in Engage using profile traits as merge tags in your messages. To personalize an SMS, click Merge Tags in the SMS builder and select the profile traits to include in your message. Engage inserts the selected traits inside merge tags based on cursor placement in the message. This allows you to personalize each SMS you send to recipients. You can also use liquid templating to create dynamic content in the SMS editor. To learn more about profile traits, visit Segment’s Computed Traits and SQL Traits documentation. Configure Link Shortening Use Link Shortening to send shorter, more manageable link URLs in your Engage SMS campaigns. Configure Link Shortening in your Twilio Console in six steps: Set up an Organization Register Domains Add Domain Name System (DNS) records Generate a TLS certificate Upload your TLS certificate Configure fallback and callback URLs (Optional) Once you’ve configured Link Shortening, Twilio automatically shortens the link URLs for recipients of your SMS messages. Link shortening occurs during the message sending process, so shortened links don’t appear in the message editor. Link Shortening is only available for SMS messages. Working with SMS message templates You can edit, duplicate, and delete SMS templates within your Engage workspace. Edit an SMS message template To edit an SMS template: Navigate to Engage > Content . Select the … icon next to template you want to edit. Click Edit . From the template’s overview page, select Edit or Settings . Edit your template, then click Update Template to save your changes. Duplicate an SMS message template To duplicate an SMS template: Navigate to Engage > Content . Select the … icon next to template you want to duplicate. Click Duplicate . From the Duplicate Template popup, click Duplicate . After you duplicate a template, you can edit it from the Templates page. Delete an SMS message template To delete an SMS template: Navigate to Engage > Content . Select the … icon next to template you want to delete. Click Delete . From the Confirm Template Deletion popup, click Delete Template . SMS best practices and limitations Include an SMS opt-out message When you build an SMS, include an opt-out message in the body of your text that informs recipients they can unsubscribe from a message channel. When an SMS recipient replies “Stop” to an SMS, they’ll receive an opt-out confirmation, and Engage updates their phone number subscription status. Visit the User Subscription States documentation to learn more about user subscriptions in Engage. SMS character limit Note that there’s a 1,600 character count limit for SMS messages.\nVisit Twilio’s SMS Character Limit documentation for more information. Next steps Use the Templates screen in Twilio Engage to build personalized email templates . This page was last modified: 15 Jul 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page SMS template types Build an SMS message template Test your SMS template Personalize with merge tags Configure Link Shortening Working with SMS message templates SMS best practices and limitations Next steps Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "working",
      "assigned",
      "dynamic",
      "issues",
      "directly",
      "access",
      "visit",
      "click",
      "unify",
      "effective",
      "loyal",
      "updates",
      "traits",
      "journey",
      "generate",
      "computed",
      "upload",
      "incorrect",
      "fields",
      "before",
      "configured",
      "configure",
      "based",
      "analytics",
      "following",
      "there",
      "change",
      "customer",
      "liquid",
      "organization",
      "about",
      "entered",
      "deletion",
      "easiest",
      "selected",
      "templates",
      "system",
      "insider",
      "saves",
      "between",
      "certificate",
      "growth",
      "customers",
      "states",
      "shortening",
      "until",
      "finished",
      "klaviyo",
      "records",
      "problems",
      "replies",
      "bloomreach",
      "available",
      "recommend",
      "flags",
      "reuse",
      "requires",
      "documentation",
      "navigate",
      "within",
      "inside",
      "partners",
      "example",
      "types",
      "templating",
      "preparation",
      "recommended",
      "which",
      "integrate",
      "specific",
      "screen",
      "using",
      "number",
      "websites",
      "improve",
      "follow",
      "request",
      "messages",
      "issue",
      "trait",
      "process",
      "overview",
      "modified",
      "select",
      "invalid",
      "practices",
      "links",
      "delete",
      "steps",
      "segment",
      "pages",
      "information",
      "contains",
      "journeys",
      "domain",
      "include",
      "confirm",
      "editor",
      "shortened",
      "receive",
      "ensures",
      "numbers",
      "data",
      "message",
      "service",
      "empty",
      "limitations",
      "content",
      "contact",
      "alerts",
      "update",
      "first_name",
      "console",
      "learn",
      "limit",
      "validation",
      "confirms",
      "braze",
      "connect",
      "channel",
      "placement",
      "campaigns",
      "these",
      "assistance",
      "started",
      "choose",
      "would",
      "helpful",
      "airship",
      "blank",
      "throughout",
      "optional",
      "account",
      "build",
      "settings",
      "personalized",
      "while",
      "email",
      "onboarding",
      "displays",
      "shorter",
      "maintain",
      "builder",
      "popup",
      "subscription",
      "twilio",
      "desired",
      "files",
      "inserts",
      "their",
      "media",
      "sending",
      "exploring",
      "confirmation",
      "characters",
      "language",
      "recipients",
      "fallback",
      "profiles",
      "shortens",
      "informs",
      "includes",
      "field",
      "character",
      "saved",
      "occurs",
      "during",
      "support",
      "plans",
      "reply",
      "phone",
      "status",
      "period",
      "domains",
      "count",
      "workspace",
      "after",
      "editors",
      "migration",
      "preferred",
      "recipient",
      "announced",
      "allows",
      "thanks",
      "automatically",
      "mobile",
      "continue",
      "default",
      "preview",
      "engage",
      "needs",
      "adding",
      "changes",
      "appear",
      "first",
      "personalize",
      "create",
      "questions",
      "duplicate",
      "existing",
      "profile",
      "syntax",
      "template",
      "unsubscribe",
      "value",
      "feedback",
      "marketing",
      "tools",
      "enter",
      "users",
      "subscriptions",
      "userid",
      "expected",
      "foundations",
      "future",
      "manageable",
      "business",
      "register",
      "premier",
      "callback",
      "cursor",
      "reach",
      "merge"
    ],
    "howto_steps": [
      "Existing Segment customers will continue to have access and support to Engage Premier until an end-of-life (EOL) date is announced. We recommend exploring the following pages in preparation of a migration or future MCM needs: Twilio Marketing Campaigns Preferred ISV Partners: Airship Blog Bloomreach Blog Braze Blog Insider Blog Klaviyo Blog Twilio Engage Foundations Documentation Use Twilio Engage to build SMS message templates to include throughout your marketing campaigns. You can build an SMS template and include personalized content in messages based on user profile traits. Once you build the SMS, Twilio Engage saves the template for you to preview, maintain, and reuse. Use personalized SMS messages to connect with users in real-time, as they reach a specific step in a journey. SMS template types You can choose between two SMS template types: Media , which contains media and text content Text , which contains text content of up to 1600 characters Build an SMS message template You must first configure your SMS service with Twilio to build an SMS template in Engage. Visit the onboarding steps for more on how to connect a Twilio account. Follow these steps to build an SMS template: Navigate to Engage > Content and click Create template . Select SMS , then click Configure . Enter a template name and select your template’s language. Select your template’s content type, then click Next . For text templates, enter your message’s text in the Body field and add any desired merge tags . For media templates, enter your message’s text in the Body field, add the media URL, then add any desired merge tags. Media templates support PNG, JPEG, and GIF files. Include an opt-out message in the body of your text. For example, “Reply STOP to unsubscribe.” See SMS Best Practices for more information. Once you’ve finished adding your template’s content, click Save . Segment confirms that your template was saved. Use the SMS Templates screen to preview and update existing SMS message templates. Engage content validation For all content editors in Engage, you’ll see alerts for any issues in your template, such as invalid profile traits or incorrect liquid syntax . Engage both flags template issue(s), and displays recommended next steps. While you can save these templates, you must fix any issues before using them in Engage campaigns. Test your SMS template Send a test SMS message before you include it as a step in your Journey. After you build your SMS template, click Test SMS . If your template has profile traits, enter a trait value for the test SMS. This ensures that your merge tags work as expected. Empty fields show the default value that you’ve assigned. For example, loyal customer would be the default for the following merge tag: {{profile.traits.first_name | default: \"loyal customer\"}} . If there’s no default value, the field will be blank. Enter recipient phone numbers for the test message. Profiles that you send test messages to must have a userId in Segment. Click Send test SMS . You can also test SMS templates directly within Journeys before you send them. Personalize with merge tags Personalize SMS content in Engage using profile traits as merge tags in your messages. To personalize an SMS, click Merge Tags in the SMS builder and select the profile traits to include in your message. Engage inserts the selected traits inside merge tags based on cursor placement in the message. This allows you to personalize each SMS you send to recipients. You can also use liquid templating to create dynamic content in the SMS editor. To learn more about profile traits, visit Segment’s Computed Traits and SQL Traits documentation. Configure Link Shortening Use Link Shortening to send shorter, more manageable link URLs in your Engage SMS campaigns. Configure Link Shortening in your Twilio Console in six steps: Set up an Organization Register Domains Add Domain Name System (DNS) records Generate a TLS certificate Upload your TLS certificate Configure fallback and callback URLs (Optional) Once you’ve configured Link Shortening, Twilio automatically shortens the link URLs for recipients of your SMS messages. Link shortening occurs during the message sending process, so shortened links don’t appear in the message editor. Link Shortening is only available for SMS messages. Working with SMS message templates You can edit, duplicate, and delete SMS templates within your Engage workspace. Edit an SMS message template To edit an SMS template: Navigate to Engage > Content . Select the … icon next to template you want to edit. Click Edit . From the template’s overview page, select Edit or Settings . Edit your template, then click Update Template to save your changes. Duplicate an SMS message template To duplicate an SMS template: Navigate to Engage > Content . Select the … icon next to template you want to duplicate. Click Duplicate . From the Duplicate Template popup, click Duplicate . After you duplicate a template, you can edit it from the Templates page. Delete an SMS message template To delete an SMS template: Navigate to Engage > Content . Select the … icon next to template you want to delete. Click Delete . From the Confirm Template Deletion popup, click Delete Template . SMS best practices and limitations Include an SMS opt-out message When you build an SMS, include an opt-out message in the body of your text that informs recipients they can unsubscribe from a message channel. When an SMS recipient replies “Stop” to an SMS, they’ll receive an opt-out confirmation, and Engage updates their phone number subscription status. Visit the User Subscription States documentation to learn more about user subscriptions in Engage. SMS character limit Note that there’s a 1,600 character count limit for SMS messages.\nVisit Twilio’s SMS Character Limit documentation for more information. Next steps Use the Templates screen in Twilio Engage to build personalized email templates . This page was last modified: 15 Jul 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page SMS template types Build an SMS message template Test your SMS template Personalize with merge tags Configure Link Shortening Working with SMS message templates SMS best practices and limitations Next steps Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/destinations/catalog/actions-webhook/",
    "title": " Webhooks (Actions) Destination | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Destinations / Catalog / Webhooks (Actions) Destination Webhooks (Actions) Destination On this page Getting Started Destination Settings Available Actions Batch size limits Shared secret with batching FAQs Destination Info Accepts Page , Alias , Group , Identify , and Track calls Refer to it as Webhook , or Webhooks (Actions) in the Integrations object Additional versions of this destination are available This page is about the Webhooks (Actions) Destination. See below for information about other versions of the Webhooks destination: Webhooks (Classic) Segment’s Webhooks (Actions) destination uses internet protocol and HTTP callback to submit real-time user data to your own HTTP endpoints. With this destination, you can POST, PUT, or PATCH data to any webhook URL. Getting Started From the Segment web app, navigate to Connections > Catalog . Search for Webhooks (Actions) in the Destinations Catalog, and select the destination. Click Configure Webhooks (Actions) . Select the source that will send data to Webhooks (Actions) and follow the steps to name your destination. If you require authentication, add in a shared secret on the Settings > Advanced Settings tab. If you provide a shared secret, Segment will sign requests with an HMAC in the “X-Signature” request header. The HMAC is a hex-encoded SHA1 hash generated using the shared secret and the request body. Follow the steps in the Destinations Actions documentation on Customizing mappings . You can create up to 5 mappings, each of which can send to a different webhook URL. Enable the destination and configured mappings. Destination Settings Setting Description Shared Secret If set, Segment will sign requests with an HMAC in the “X-Signature” request header. The HMAC is a hex-encoded SHA1 hash generated using this shared secret and the request body. Available Actions Build your own Mappings. Combine supported triggers with the following Webhooks-supported actions: Mapping limits per destination Individual destination instances have support a maximum of 50 mappings. Send Send Send an HTTP request. Send is a Cloud action. Click to show / hide fields Field Description URL * Type: STRING URL to deliver data to. Method * Type: STRING HTTP method to use. Batch Size Type: NUMBER Maximum number of events to include in each batch. Actual batch sizes may be lower. Headers Type: OBJECT HTTP headers to send with each request. Data Type: OBJECT Payload to deliver to webhook URL (JSON-encoded). Enable Batching? Type: BOOLEAN When enabled, Segment will send events in batches. Batch size limits In Webhook Actions mapping, the default value of batch size is 1000 . You can change this value, but there’s a maximum batch size limit of 4000 . Shared secret with batching If you have batching enabled and are using a shared secret to authenticate your requests, Segment signs the first event in the batch rather than the whole batch. When verifying the X-Signature header in your code, ensure you’re only signing the first event in the batch to match the signature with what Segment creates. FAQs Why is a Webhooks (Actions) Destination helpful with end-to-end tests? The easiest way to test whether a source’s events are sending through the Segment pipeline is with an end-to-end test. Use the steps below to monitor the events arriving to your Segment source and whether they’re successfully sending to your destinations. Connecting a Webhooks (Actions) Destination to your sources makes these requests easy to see. For example, if you connect a Webhooks Destination (Webhook Actions Destination) to your source, you’d be able to see the events received by that source and sent to that destination. Connect a Webhook Actions destination to your workspace Add a new Webhook (Actions) destination to your source. Make sure you select the intended source to connect this destination to. Visit the webhook’s site, and copy the endpoint to your clipboard. An example site you can use is https://webhook.site/#!/ , but use whichever webhooks site you prefer. Add a mapping to the Webhook Actions destination, and configure Step 1’s conditions to allow for all types of events that you’re currently sending through that source. Add the endpoint you copied from Step 2 to the Webhook Actions Mapping’s URL in Step 3. Enable the Mapping. Enable the Webhook Actions destination. Begin sending events to your source. Verify those events throughout the Segment pipeline (source debugger/ event delivery). Verify the webhook’s website which shows the raw JSON for all of the events successfully received by your Segment source and its Webhooks Actions destination. This page was last modified: 26 Jul 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Destination Settings Available Actions Batch size limits Shared secret with batching FAQs Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "classic",
      "match",
      "received",
      "website",
      "click",
      "monitor",
      "group",
      "visit",
      "versions",
      "supported",
      "sizes",
      "prefer",
      "source",
      "fields",
      "whichever",
      "configured",
      "configure",
      "copied",
      "analytics",
      "following",
      "there",
      "change",
      "boolean",
      "cloud",
      "about",
      "accepts",
      "integrations",
      "easiest",
      "other",
      "growth",
      "signs",
      "problems",
      "require",
      "setting",
      "available",
      "search",
      "authenticate",
      "navigate",
      "documentation",
      "provide",
      "makes",
      "through",
      "customizing",
      "rather",
      "example",
      "creates",
      "types",
      "tests",
      "triggers",
      "which",
      "integrate",
      "number",
      "using",
      "catalog",
      "sources",
      "websites",
      "improve",
      "additional",
      "follow",
      "requests",
      "request",
      "modified",
      "alias",
      "select",
      "delivery",
      "below",
      "lower",
      "connecting",
      "steps",
      "segment",
      "combine",
      "information",
      "mappings",
      "webhook",
      "different",
      "conditions",
      "batch",
      "events",
      "include",
      "data",
      "protocol",
      "intended",
      "maximum",
      "currently",
      "contact",
      "batching",
      "header",
      "debugger",
      "endpoints",
      "string",
      "destination",
      "shared",
      "limit",
      "allow",
      "connect",
      "payload",
      "those",
      "whether",
      "individual",
      "these",
      "assistance",
      "webhooks",
      "started",
      "helpful",
      "signing",
      "destinations",
      "throughout",
      "actual",
      "build",
      "account",
      "enable",
      "settings",
      "endpoint",
      "object",
      "patch",
      "description",
      "calls",
      "enabled",
      "method",
      "submit",
      "sending",
      "batches",
      "ensure",
      "internet",
      "refer",
      "field",
      "whole",
      "support",
      "track",
      "workspace",
      "identify",
      "begin",
      "action",
      "arriving",
      "headers",
      "https",
      "thanks",
      "signature",
      "authentication",
      "encoded",
      "mapping",
      "mobile",
      "default",
      "instances",
      "successfully",
      "clipboard",
      "shows",
      "actions",
      "deliver",
      "secret",
      "advanced",
      "verify",
      "first",
      "connections",
      "create",
      "questions",
      "value",
      "feedback",
      "tools",
      "limits",
      "event",
      "verifying",
      "callback",
      "pipeline",
      "generated"
    ],
    "howto_steps": [
      "Enable the Mapping. Enable the Webhook Actions destination. Begin sending events to your source. Verify those events throughout the Segment pipeline (source debugger/ event delivery). Verify the webhook’s website which shows the raw JSON for all of the events successfully received by your Segment source and its Webhooks Actions destination. This page was last modified: 26 Jul 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Destination Settings Available Actions Batch size limits Shared secret with batching FAQs Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
      "Type: STRING URL to deliver data to. Method",
      "Type: STRING HTTP method to use. Batch Size Type: NUMBER Maximum number of events to include in each batch. Actual batch sizes may be lower. Headers Type: OBJECT HTTP headers to send with each request. Data Type: OBJECT Payload to deliver to webhook URL (JSON"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/destinations/catalog/actions-liveramp-audiences/",
    "title": " LiveRamp Audiences Destination | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Destinations / Catalog / LiveRamp Audiences Destination LiveRamp Audiences Destination On this page Getting started Available Actions Limitations Trait Enrichment Destination Info Accepts Track calls. Refer to it as Liveramp Audiences , or LiveRamp Audiences in the Integrations object This destination is in Beta LiveRamp gives companies and their partners the power to connect, control, and activate data to transform customer experiences and generate more valuable business outcomes. Segment’s integration with LiveRamp lets you push user audiences created in Twilio Engage into your LiveRamp account to execute various marketing use cases. The LiveRamp Audiences destination allows users to connect their Engage Audiences to LiveRamp through their SFTP or a customer-managed S3 cloud storage bucket. Users will be able to configure their delivery preferences within Segment. The LiveRamp Audiences destination can be connected to Twilio Engage sources only . LiveRamp Audiences is not compatible with IP Allowlisting For more information, see the IP Allowlisting documentation. Getting started Set up your file drop SFTP Contact your LiveRamp representative to gain a set of SFTP credentials. Connect to the SFTP server using the client of your choice, and create a new folder under /uploads with the name of your audience. S3 Create a new S3 bucket. Create a new IAM Role with PutObject access to the S3 bucket. Create a new IAM User and assign them the role. Generate a new Access Key pair for the user and note them down; you’ll use it for the settings. Connect LiveRamp Audiences Create and configure your Engage Audience. Navigate to Engage > Engage Settings > Destinations and click Add Destination . Select LiveRamp Audiences , select your Audience Space as the source, and name your destination. On the Mappings tab, click Add Mapping and choose whether your will be using S3 or SFTP to upload the files. Within the mapping, configure which fields from your payload will be included in the files. Enable the destination and configured mappings. On the Engage > Audiences > (your audience) page, click Add Destination and select the destination just created. In the settings that appear in the side panel, toggle the Send Track option on and do not change the Audience Entered/Audience Exited event names. Click Save Settings File a support case with the LiveRamp team to configure and enable ingestion. Mapping tester availability The Mapping Tester isn’t available for this destination. Since this destination requires batched events for activation, testing can only be performed end-to-end with a connected source. Available Actions Build your own Mappings. Combine supported triggers with the following LiveRamp Audiences-supported actions: Mapping limits per destination Individual destination instances have support a maximum of 50 mappings. Audience Entered (SFTP) Audience Entered (S3) Audience Entered (SFTP) Uploads audience membership data to a file through SFTP for LiveRamp ingestion. Audience Entered (SFTP) is a Cloud action. The default Trigger is: event = \"Audience Entered\" Click to show / hide fields Field Description Username Type: STRING User credentials for establishing an SFTP connection with LiveRamp. Password Type: PASSWORD User credentials for establishing an SFTP connection with LiveRamp. Folder Path Type: STRING Path within the LiveRamp SFTP server to upload the files to. This path must exist and all subfolders must be pre-created. LiveRamp Audience Key * Type: STRING Unique ID that identifies members of an audience. A typical audience key might be client customer IDs, email addresses, or phone numbers. See more information on LiveRamp Audience Key Identifier Data Type: OBJECT Additional data pertaining to the user to be written to the file. Hashable Identifier Data Type: OBJECT Additional data pertaining to the user to be hashed before written to the file. Use field name phone_number or email to apply LiveRamp’s specific hashing rules. Delimeter * Type: STRING Character used to separate tokens in the resulting file. Filename * Type: STRING Name of the CSV file to upload for LiveRamp ingestion. Audience Entered (S3) Uploads audience membership data to a file in S3 for LiveRamp ingestion. Audience Entered (S3) is a Cloud action. The default Trigger is: event = \"Audience Entered\" Click to show / hide fields Field Description AWS Access Key ID Type: STRING IAM user credentials with write permissions to the S3 bucket. AWS Secret Access Key Type: PASSWORD IAM user credentials with write permissions to the S3 bucket. AWS Bucket Name Type: STRING Name of the S3 bucket where the files will be uploaded to. AWS Region (S3 only) Type: STRING Region where the S3 bucket is hosted. LiveRamp Audience Key * Type: STRING Unique ID that identifies members of an audience. A typical audience key might be client customer IDs, email addresses, or phone numbers. See more information on LiveRamp Audience Key Identifier Data Type: OBJECT Additional data pertaining to the user to be written to the file. Hashable Identifier Data Type: OBJECT Additional data pertaining to the user to be hashed before written to the file. Use field name phone_number or email to apply LiveRamp’s specific hashing rules. Delimeter * Type: STRING Character used to separate tokens in the resulting file. Filename * Type: STRING Name of the CSV file to upload for LiveRamp ingestion. Limitations Audience must have at least 25 unique members, otherwise the destination will fail and the data will not be synced. This means the Actions Mapping Event Tester does not work (only one test event can be configured). Audience sync happens once per day. On a 24-hour cadence, but can take up to 30 hours. Audience Sync is a full sync, including only users or accounts in the audience at the time of sync. Files are created per audience. After initial ingestion is complete, changing the mappings will cause the LiveRamp ingestion to start failing until ingestion setup is run again. Time to first sync can be up to 3 days, please be patient. Trait Enrichment Use Trait Enrichment to access Segment profile traits when you sync Audiences to Destinations. With Trait Enrichment, you can use custom, SQL, computed, and predictive traits to enrich the data you map to your destinations. Trait Enrichment in beta Trait Enrichment is in beta, and Segment is actively working on this feature. Some functionality may change before it becomes generally available. Contact Segment with any feedback or questions. Trait Enrichment setup Confirm that Send Track is toggled on and select Customized Setup. Select Add Trait , select the traits you want to sync, and click Save . Update the Identifier Data Field in your destination Audience Entered Mapping (either SFTP or S3). To update a trait field mapping, click on the Select event variable section and in the dropdown search for properties , followed by your trait. For example, properties.firstName . If no matches are found, use properties.TRAIT as an event variable. For best results with Trait Enrichment, Segment recommends the following: Use Trait Enrichment with new audiences. Use smaller audiences for real-time use cases, as data delivery is slower for large audiences. This page was last modified: 05 Dec 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting started Available Actions Limitations Trait Enrichment Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "working",
      "audience",
      "connected",
      "access",
      "click",
      "visit",
      "ingestion",
      "typical",
      "apply",
      "traits",
      "uploaded",
      "generate",
      "permissions",
      "supported",
      "computed",
      "upload",
      "custom",
      "firstname",
      "source",
      "fields",
      "names",
      "might",
      "before",
      "configured",
      "configure",
      "tester",
      "written",
      "transform",
      "analytics",
      "following",
      "identifier",
      "change",
      "customer",
      "delimeter",
      "section",
      "initial",
      "cloud",
      "smaller",
      "entered",
      "accepts",
      "integrations",
      "easiest",
      "experiences",
      "valuable",
      "under",
      "accounts",
      "becomes",
      "growth",
      "dropdown",
      "until",
      "problems",
      "available",
      "preferences",
      "search",
      "requires",
      "within",
      "choice",
      "documentation",
      "server",
      "navigate",
      "availability",
      "through",
      "client",
      "phone_number",
      "allowlisting",
      "managed",
      "compatible",
      "partners",
      "performed",
      "filename",
      "example",
      "establishing",
      "feature",
      "triggers",
      "which",
      "integrate",
      "specific",
      "credentials",
      "catalog",
      "sources",
      "using",
      "testing",
      "hours",
      "improve",
      "websites",
      "additional",
      "region",
      "trait",
      "members",
      "matches",
      "assign",
      "variable",
      "separate",
      "request",
      "storage",
      "modified",
      "power",
      "execute",
      "delivery",
      "select",
      "patient",
      "results",
      "segment",
      "combine",
      "functionality",
      "information",
      "trigger",
      "username",
      "mappings",
      "companies",
      "option",
      "least",
      "events",
      "confirm",
      "actively",
      "space",
      "numbers",
      "data",
      "synced",
      "activate",
      "maximum",
      "hashed",
      "limitations",
      "slower",
      "contact",
      "update",
      "membership",
      "string",
      "destination",
      "complete",
      "including",
      "included",
      "enrichment",
      "connect",
      "payload",
      "failing",
      "whether",
      "individual",
      "identifies",
      "these",
      "assistance",
      "started",
      "choose",
      "otherwise",
      "toggled",
      "large",
      "helpful",
      "where",
      "destinations",
      "hashing",
      "hashable",
      "generally",
      "gives",
      "account",
      "activation",
      "enable",
      "settings",
      "build",
      "rules",
      "batched",
      "cases",
      "exist",
      "email",
      "object",
      "customized",
      "description",
      "representative",
      "recommends",
      "calls",
      "connection",
      "twilio",
      "files",
      "pertaining",
      "their",
      "liveramp",
      "setup",
      "toggle",
      "created",
      "various",
      "tokens",
      "refer",
      "panel",
      "field",
      "character",
      "password",
      "please",
      "followed",
      "support",
      "unique",
      "phone",
      "folder",
      "cause",
      "track",
      "uploads",
      "after",
      "since",
      "action",
      "changing",
      "hosted",
      "allows",
      "thanks",
      "again",
      "mapping",
      "mobile",
      "default",
      "instances",
      "predictive",
      "either",
      "actions",
      "engage",
      "happens",
      "cadence",
      "properties",
      "bucket",
      "outcomes",
      "appear",
      "secret",
      "found",
      "integration",
      "means",
      "first",
      "connections",
      "create",
      "questions",
      "putobject",
      "profile",
      "resulting",
      "enrich",
      "feedback",
      "tools",
      "marketing",
      "subfolders",
      "write",
      "users",
      "limits",
      "event",
      "start",
      "business",
      "exited",
      "control",
      "audiences",
      "addresses"
    ],
    "howto_steps": [
      "Type: STRING Unique ID that identifies members of an audience. A typical audience key might be client customer IDs, email addresses, or phone numbers. See more information on LiveRamp Audience Key Identifier Data Type: OBJECT Additional data pertaining to the user to be written to the file. Hashable Identifier Data Type: OBJECT Additional data pertaining to the user to be hashed before written to the file. Use field name phone_number or email to apply LiveRamp’s specific hashing rules. Delimeter",
      "Type: STRING Character used to separate tokens in the resulting file. Filename",
      "Type: STRING Name of the CSV file to upload for LiveRamp ingestion. Audience Entered (S3) Uploads audience membership data to a file in S3 for LiveRamp ingestion. Audience Entered (S3) is a Cloud action. The default Trigger is: event = \"Audience Entered\" Click to show / hide fields Field Description AWS Access Key ID Type: STRING IAM user credentials with write permissions to the S3 bucket. AWS Secret Access Key Type: PASSWORD IAM user credentials with write permissions to the S3 bucket. AWS Bucket Name Type: STRING Name of the S3 bucket where the files will be uploaded to. AWS Region (S3 only) Type: STRING Region where the S3 bucket is hosted. LiveRamp Audience Key",
      "Type: STRING Unique ID that identifies members of an audience. A typical audience key might be client customer IDs, email addresses, or phone numbers. See more information on LiveRamp Audience Key Identifier Data Type: OBJECT Additional data pertaining to the user to be written to the file. Hashable Identifier Data Type: OBJECT Additional data pertaining to the user to be hashed before written to the file. Use field name phone_number or email to apply LiveRamp’s specific hashing rules. Delimeter",
      "Type: STRING Character used to separate tokens in the resulting file. Filename",
      "Type: STRING Name of the CSV file to upload for LiveRamp ingestion. Limitations Audience must have at least 25 unique members, otherwise the destination will fail and the data will not be synced. This means the Actions Mapping Event Tester does not work (only one test event can be configured). Audience sync happens once per day. On a 24"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#send",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#available-actions",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#getting-started",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/",
    "title": " Connections Overview | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections Overview Connections Overview On this page Sources Destinations Warehouses Information on sources and destinations pages FAQs Connections is Segment’s core product offering: you can collect event data from your mobile apps, websites, and servers with one API, then pull in contextual data from cloud apps like your CRM, payment systems, and internal databases to build a unified picture of your customers. Sources In Segment, you create a source (or more than one!) for each website or app you want to track. We highly recommend creating a Source for each unique source of data (each site, app, or server), though this isn’t required. Sources belong to a workspace, and the URL for a source looks something like this: https://segment.com/<my-workspace>/sources/<my-source-name>/ You can create new sources using the button in the workspace view. Each source you create has a write key, which is used to send data to that source. For example, to load analytics.js , the Segment JavaScript library on your page, the snippet on the Quickstart Guide includes: analytics . load ( \" YOUR_WRITE_KEY \" ); Learn more about sources from the sources overview page . Destinations Destinations are business tools or apps that you can connect to the data flowing through Segment. Some of Segment’s most popular destinations are Google Analytics, Mixpanel, Kissmetrics, Customer.io, Intercom, and KeenIO. All of these tools run on the same data: who are your customers and what are they doing? But each tool requires that you send that data in a slightly different format, which means that you’d have to write code to track all of this information, again and again, for each tool, on each page of your app or website. Enter Segment. Do it once. Segment eliminates this process by introducing an abstraction layer. You send your data to Segment, and Segment understands how to translate it so we can send it along to any destination. You enable destinations from the catalog in the Segment App, and user data immediately starts flowing into those tools. No extra code required! Segment supports many categories of destinations, from advertising to marketing, email to customer support, CRM to user testing, and even data warehouses. You can view a complete list of available destinations or check out the destination page for a searchable list broken down by category. Warehouses A warehouse is a central repository of data collected from one or more sources. This is what commonly comes to mind when you think about a relational database: structured data that fits neatly into rows and columns. In Segment, a Warehouse is a special type of destination. Instead of streaming data to the destination all the time, we load data to them in bulk at regular intervals. When we load data, we insert and update events and objects, and automatically adjust their schema to fit the data you’ve sent to Segment. Reverse ETL With Reverse ETL , your data warehouse acts as your source, enabling you to send data from your warehouse to your destinations. Information on sources and destinations pages The Sources and Destinations pages allow each user to decide what information appears in their personal view for each page. On both pages, you can click the stack icon in the upper right-hand corner of the table to see and select Source properties to show. You can select up to five columns of properties. The following information is available for Sources: Status Environment Destinations Type Category Created At Created By On the Destinations page, you can choose among the following properties: Status Created At Type Sources Category You can then sort or filter each column to just the values you care about, by clicking on the arrow next to each displayed column. FAQs My source was disabled and it wasn’t done by anyone in my workspace Sources without any enabled destinations are auto-disabled after 14 days. However, the workspace owner is notified by email before Segment disables the source. Data that flows into Segment but does not flow to any downstream tools is not valuable to you and unnecessarily takes up space. Segment understands there may be cases to keep a source active. If you’d like to add your sources to an exception list, you can do so by filling out this Airtable form . Can I request Segment add an integration tool? Yes, you are able to submit an integration request here https://segment.com/requests/integrations/. This page was last modified: 29 Feb 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Sources Destinations Warehouses Information on sources and destinations pages FAQs Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "conceptual",
    "keywords": [
      "website",
      "streaming",
      "click",
      "visit",
      "payment",
      "javascript",
      "objects",
      "kissmetrics",
      "check",
      "source",
      "starts",
      "regular",
      "before",
      "database",
      "filling",
      "appears",
      "analytics",
      "following",
      "filter",
      "column",
      "customer",
      "there",
      "change",
      "cloud",
      "about",
      "looks",
      "integrations",
      "easiest",
      "contextual",
      "library",
      "valuable",
      "growth",
      "customers",
      "problems",
      "available",
      "searchable",
      "recommend",
      "flowing",
      "decide",
      "broken",
      "requires",
      "documentation",
      "quickstart",
      "server",
      "systems",
      "categories",
      "owner",
      "through",
      "flows",
      "introducing",
      "example",
      "category",
      "disabled",
      "corner",
      "which",
      "integrate",
      "websites",
      "using",
      "sources",
      "understands",
      "catalog",
      "testing",
      "think",
      "however",
      "notified",
      "unnecessarily",
      "process",
      "request",
      "requests",
      "improve",
      "overview",
      "modified",
      "select",
      "product",
      "arrow",
      "segment",
      "neatly",
      "warehouses",
      "pages",
      "information",
      "servers",
      "insert",
      "different",
      "table",
      "right",
      "events",
      "without",
      "space",
      "layer",
      "data",
      "among",
      "offering",
      "enabling",
      "contact",
      "update",
      "reverse",
      "databases",
      "learn",
      "destination",
      "takes",
      "complete",
      "allow",
      "clicking",
      "connect",
      "those",
      "abstraction",
      "something",
      "these",
      "assistance",
      "started",
      "personal",
      "intervals",
      "snippet",
      "choose",
      "popular",
      "helpful",
      "warehouse",
      "slightly",
      "collected",
      "downstream",
      "destinations",
      "build",
      "account",
      "creating",
      "enable",
      "eliminates",
      "central",
      "instead",
      "immediately",
      "email",
      "cases",
      "values",
      "exception",
      "button",
      "doing",
      "extra",
      "their",
      "enabled",
      "submit",
      "environment",
      "highly",
      "translate",
      "belong",
      "relational",
      "keenio",
      "created",
      "guide",
      "commonly",
      "includes",
      "special",
      "unique",
      "support",
      "status",
      "repository",
      "track",
      "workspace",
      "after",
      "https",
      "thanks",
      "google",
      "again",
      "automatically",
      "format",
      "mobile",
      "required",
      "though",
      "columns",
      "anyone",
      "airtable",
      "active",
      "upper",
      "properties",
      "structured",
      "api",
      "along",
      "picture",
      "internal",
      "comes",
      "displayed",
      "means",
      "integration",
      "schema",
      "connections",
      "intercom",
      "create",
      "questions",
      "mixpanel",
      "adjust",
      "feedback",
      "tools",
      "marketing",
      "collect",
      "write",
      "enter",
      "disables",
      "event",
      "business",
      "your_write_key",
      "advertising",
      "stack",
      "unified",
      "supports"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/protocols/",
    "title": " Protocols Overview | Segment Documentation",
    "platform": "segment",
    "content": "Home / Protocols Overview Protocols Overview Free x Team x Business ✓ + Protocols ✓ ? Protocols is available as an add-on for Business plans only. See the available plans , or contact Support . On this page There are four steps to using Protocols Learn more Protocols is only available for event stream (website, mobile, and server sources) and Engage sources. Segment helps customers collect and integrate customer data across a wide range of tools and Destinations. To do so reliably, the data Segment receives must be clean, consistent and adhere to a well thought out tracking plan. Protocols was built to automate and scale the data quality best practices developed over years of helping customers implement Segment. Investing in data quality will improve trust in your data, reduce time spent by your engineering and business teams navigating and validating data, and ultimately allow your business to grow faster. Protocols is a premium add-on feature available to Business Tier customers. If your plan includes Protocols, you can access it from the protocols path in your workspace . If your plan doesn’t include Protocols, contact your Segment account executive. There are four steps to using Protocols 1. Align teams with a Tracking Plan Good data quality starts with a well thought out Tracking Plan. With Protocols, you can define your events and corresponding properties in a Tracking Plan. This tracking plan becomes a central source of truth for product, engineering, analytics, and business teams. 2. Validate data quality with violations With your tracking plan living in Segment, you can apply it to 1 or more data sources. Any event or property that does not match the tracking plan will generate a violation. Violations are displayed in aggregated form to spot trends, and detailed form to help you quickly find and resolve discrepancies. 3. Enforce data standards with controls To maintain a high degree of quality over time, we offer strict controls to block non-conforming events. Blocked events can be forwarded to a separate quarantined Segment source for analysis and review. 4. Resolve data issues with transformations Even the most exacting data collection processes are subject to human error and organizational complexity. Transformations can be applied from within Protocols to change event and property names without touching code. Learn more Best Practices Learn more about tracking plans and why you need them. Tracking Plan Create a Tracking Plan to standardize your collected data. FAQ Get answers to Protocols questions that come up the most. Get Started: Learn more about Tracking Plans -> This page was last modified: 13 Jul 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page There are four steps to using Protocols Learn more Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "conceptual",
    "keywords": [
      "match",
      "website",
      "enforce",
      "clean",
      "issues",
      "access",
      "visit",
      "strict",
      "apply",
      "applied",
      "block",
      "generate",
      "forwarded",
      "reduce",
      "source",
      "names",
      "starts",
      "error",
      "analytics",
      "trends",
      "there",
      "change",
      "customer",
      "range",
      "standards",
      "about",
      "thought",
      "easiest",
      "becomes",
      "growth",
      "customers",
      "problems",
      "scale",
      "available",
      "define",
      "documentation",
      "aggregated",
      "server",
      "within",
      "navigating",
      "stream",
      "conforming",
      "feature",
      "review",
      "integrate",
      "faster",
      "using",
      "websites",
      "sources",
      "trust",
      "offer",
      "improve",
      "property",
      "subject",
      "helps",
      "request",
      "separate",
      "touching",
      "overview",
      "modified",
      "product",
      "years",
      "practices",
      "steps",
      "segment",
      "processes",
      "events",
      "include",
      "without",
      "premium",
      "data",
      "contact",
      "validate",
      "organizational",
      "executive",
      "truth",
      "learn",
      "adhere",
      "allow",
      "living",
      "implement",
      "these",
      "engineering",
      "assistance",
      "blocked",
      "started",
      "transformations",
      "investing",
      "answers",
      "helpful",
      "collected",
      "helping",
      "destinations",
      "reliably",
      "account",
      "standardize",
      "central",
      "collection",
      "maintain",
      "built",
      "complexity",
      "discrepancies",
      "receives",
      "resolve",
      "automate",
      "teams",
      "includes",
      "support",
      "plans",
      "quickly",
      "tracking",
      "workspace",
      "thanks",
      "mobile",
      "quality",
      "spent",
      "align",
      "engage",
      "quarantined",
      "properties",
      "across",
      "degree",
      "displayed",
      "developed",
      "doesn",
      "create",
      "questions",
      "violation",
      "human",
      "feedback",
      "tools",
      "detailed",
      "collect",
      "exacting",
      "corresponding",
      "protocols",
      "violations",
      "event",
      "analysis",
      "business",
      "consistent",
      "ultimately",
      "validating",
      "controls"
    ],
    "howto_steps": [
      "Align teams with a Tracking Plan Good data quality starts with a well thought out Tracking Plan. With Protocols, you can define your events and corresponding properties in a Tracking Plan. This tracking plan becomes a central source of truth for product, engineering, analytics, and business teams.",
      "Validate data quality with violations With your tracking plan living in Segment, you can apply it to 1 or more data sources. Any event or property that does not match the tracking plan will generate a violation. Violations are displayed in aggregated form to spot trends, and detailed form to help you quickly find and resolve discrepancies.",
      "Enforce data standards with controls To maintain a high degree of quality over time, we offer strict controls to block non-conforming events. Blocked events can be forwarded to a separate quarantined Segment source for analysis and review.",
      "Resolve data issues with transformations Even the most exacting data collection processes are subject to human error and organizational complexity. Transformations can be applied from within Protocols to change event and property names without touching code. Learn more Best Practices Learn more about tracking plans and why you need them. Tracking Plan Create a Tracking Plan to standardize your collected data. FAQ Get answers to Protocols questions that come up the most. Get Started: Learn more about Tracking Plans -> This page was last modified: 13 Jul 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page There are four steps to using Protocols Learn more Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/guides/how-to-guides/",
    "title": " How to Guides Index | Segment Documentation",
    "platform": "segment",
    "content": "Home / Guides / How to Guides Index How to Guides Index On this page Implementation Engagement and Automation Analytics Quickstart Guides Segment’s How-to Guides provide an in-depth walk through and examples of the many things you can do to implement, automate, engage with, and begin analyzing your data. We’ve also got a series of Quickstart Guides for each of our Source libraries. Implementation What are best practices for identifying users? Should I collect data on the client or server? How do I collect page views on the server side? How do I import historical data? How do I join user profiles? How do I migrate code from other analytics tools? Engagement and Automation What role does Segment play in Attribution? How do I automate multi-channel re-engagement campaigns? How do I create a push notification? How do we track customers across channels and devices? How do I set up a dynamic coupon program to reward loyal customers? How do we set up event-triggered notifications or alerts? Analytics How do I forecast Long Term Value with SQL and Excel for e-commerce? How do I measure my advertising funnel? How do I measure the ROI of my Marketing Campaigns? Quickstart Guides Analytics.js (Javascript) Quickstart Guide .NET Quickstart Guide Go Library Quickstart Guide Python Library Quickstart Guide Java Library Quickstart Guide PHP Library Quickstart Guide Node.js Library Quickstart Guide Ruby Library Quickstart Guide iOS Quickstart Guide Android Quickstart Guide This page was last modified: 25 Apr 2022 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Implementation Engagement and Automation Analytics Quickstart Guides Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "how-to",
    "keywords": [
      "dynamic",
      "visit",
      "javascript",
      "loyal",
      "multi",
      "source",
      "attribution",
      "analytics",
      "change",
      "funnel",
      "easiest",
      "notifications",
      "other",
      "library",
      "growth",
      "customers",
      "triggered",
      "problems",
      "historical",
      "devices",
      "things",
      "documentation",
      "quickstart",
      "measure",
      "server",
      "provide",
      "coupon",
      "through",
      "client",
      "index",
      "identifying",
      "integrate",
      "websites",
      "improve",
      "request",
      "excel",
      "modified",
      "python",
      "practices",
      "segment",
      "program",
      "implementation",
      "channels",
      "series",
      "data",
      "android",
      "libraries",
      "alerts",
      "contact",
      "notification",
      "depth",
      "import",
      "channel",
      "implement",
      "campaigns",
      "these",
      "assistance",
      "started",
      "helpful",
      "engagement",
      "account",
      "reward",
      "guides",
      "analyzing",
      "forecast",
      "profiles",
      "guide",
      "automate",
      "support",
      "track",
      "begin",
      "thanks",
      "mobile",
      "commerce",
      "engage",
      "across",
      "should",
      "automation",
      "migrate",
      "views",
      "create",
      "questions",
      "value",
      "feedback",
      "tools",
      "marketing",
      "collect",
      "users",
      "event",
      "advertising",
      "examples"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#engagement-and-automation",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#sources",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/protocols/transform/",
    "title": " Use Transformations to fix bad data | Segment Documentation",
    "platform": "segment",
    "content": "Home / Protocols / Use Transformations to fix bad data Use Transformations to fix bad data Free x Team x Business ✓ + Protocols ✓ ? Protocols is available as an add-on for Business plans only. See the available plans , or contact Support . On this page What is a Transformation? View all Transformations Create a Transformation Use Cases What is a Transformation? With Transformations, you can change data as it flows through Segment to either correct bad data or customize data for a specific destination. Change event and property names to align events with your Tracking Plan, or to conform to a destination-specific requirement. For example, you can create a Transformation to change an event name from completed_order to Order Completed to conform to Segment’s ecommerce spec . You can also use Segment’s Public API to transform events, properties, and property values for many use cases . Transformations are very powerful and should be applied with care. Transformations irrevocably change the event payloads flowing through Segment and immediately affect either all destinations, or a single downstream destination, depending on your settings. As soon as you apply a Transformation, the original tracking payloads are not easily recoverable. Segment’s goal is to make Transformations a powerful tool that complements a well structured Tracking Plan. Together, these features help your organization scale and achieve high data quality. For that reason Segment recommends that you start your data quality strategy with a clearly defined Tracking Plan. Without this critical component, the risk of creating conflicting or detrimental transformations increases. Other important notes Transformations cannot be applied retroactively: They only apply to data moving forward. However, you can manually extract and re-send (or even Replay ) events through a source with an active destination Transformation, which will send the transformed events to your destinations. Transformations are available to Protocols customers: If you’re interested in this feature, contact your Account Executive or CSM to learn more about the Protocols package. Source-level transformations are irrevocable: When applied at the source, a transformation permanently changes the structure of the event. The original events are not easily recoverable or Replayable . Assume that transformed data cannot be recovered. Device-mode destinations are NOT supported: Source scoped transformations will only apply to cloud-mode destinations, warehouses, and S3 destinations. Destination scoped transformations will only apply to cloud-mode destinations. Transformation order: Segment processes source-scoped transformations before the events reach destination filters. Segment processes destination-scoped transformations after the events pass through destination filters. Multiple instances of the same destination: If multiple instances of a destination are connected to a single source, then the same transformation applies across every instance. Transformation scope: Transformations can be applied to event names, properties, and traits. However, it’s important to note that transformations cannot be applied to top-level attributes like userId. View all Transformations All Protocols Transformations are listed in the Transformations tab in the Protocols section. The list view supports filtering and sorting to organize transformations by transformation type, source, and destination. Transformations can be enabled and disabled directly from the list view using the toggle. Transformations can be deleted and edited by clicking on the overflow menu. When editing a Transformation, only the resulting event or property names, and Transformation name can be edited. If you want to select a different event or source, create a separate Transformation rule. Transformations created using the Public API On the Transformations page in the Segment app, you can view and rename transformations that you created with the Public API. In some cases, you can edit these transformations in the UI. Create a Transformation To create a Transformation, navigate to the Transformations tab in Protocols and click New Transformation in the top right. A three-step wizard guides you through creating a transformation. Workspace Owner or Source Admin permissions are required to create and edit transformations.\nSource Read-only permissions are required to view transformations. Step 1: Select the transformation type To create a Transformation, you first need to select which type of transformation you want to create. For each transformation type, Segment displays a description, use cases, and example payload. Current transformation types available in your Segment workspace include: Rename track event: Rename track event name at the source or per destination. The events listed in the event names dropdown menu correspond to the events listed on the source schema view . Edit track event properties: Rename multiple properties and/or change property data structure at the source or per destination Edit identify or group event traits: Rename multiple traits and/or change trait data structure at the source or per destination View more use cases of Transformations available in both your workspace and Segment’s Public API . Step 2: Set up the transformation Depending on the transformation type you selected, relevant drop-down selectors and fields are presented to define how you want to transform the data. Multiple transformations cannot be created for the same source + type + event + destination combo. This restriction blocks circular transformations (for example, order_updated to orderUpdated to order_updated ), minimizes unexpected transformations, and enables easy filtering across each dimension. Regardless of the type of transformation selected, first select a source. Each Transformation can only apply to a single source. While this makes it more difficult to apply transformations broadly, it ensures you are only transforming data relevant to the selected source. After selecting the source, you will need to select a scope. Scope determines where Segment applies the transformation. Source-scoped Transformations only apply to cloud-mode, S3, and data warehouse destinations. Source scope: Events are transformed in all active Segment cloud-mode destinations, warehouses, and S3 destinations. This scope is best when you want to fix malformed events before sending them to all destinations. These transformations should be treated as a temporary solution to hold you over while your engineering team fixes the root event. Destination scope: Events are transformed in ONLY the selected cloud-mode destination. Device-mode destinations, S3, and data warehouses are not currently supported. Use the Destination scope when you want to customize an event to the unique requirements of a destination. These transformations can exist permanently. Depending on the type of transformation you selected, you will need to enter the relevant event, property, or trait mappings to create the transformation. Select an Event: After you select the scope, use the search box to choose the event to transform. You can only select a single track event, identify or group call. If you are renaming the event, simply enter the new name in the provided text field. Rename properties or traits: To rename properties or traits within a selected event, click + Add Property . The dropdown that appears contains the properties or traits sent with the selected event. Segment supports JSON Path notation to select nested objects up to four levels deep. For example, order.id selects the id property in the order object. Segment does not support .$. notation to select a property from an array of objects. For example, the following event, which generates products.$.product_id , is unsupported. analytics . track ( ' Example ' , { products : [{ product_id : \" 123 \" }], }) In this scenario, we do not support the transformation of product_id. After selecting a property/trait, select JSON Path or Simple String to change the property/trait. Simple string will change the name in-line, while JSON path allows you to move the property/trait in or out of an object. When you see properties that have the escape character \\ in them - this escape character \\ is added to differentiate between a property name that has a . in it, and a nested field, like so: ingredients.salad → \"ingredients\": { \"salad\": \"yum\" }\ningredients\\.salad → \"ingredients.salad\": \"yum\" Step 3: Name the transformation and enable it Enter a descriptive name to act as a label for the transformation. This label helps you organize your Transformations, and Segment recommends that you make this descriptive and focused on the problem you’re solving. For example Fix misnamed order_completed event for ecommerce spec is much better than Map order_completed . In this step, you can also choose to keep the Transformation disabled, so you can come back and edit it later. To update, enable, or disable a Transformation, click on the overflow menu and select Edit Transformation . Use Cases Here’s a list of Segment Transformations with some use case examples. Rename an event: Change an event name from viewed_product to Product Viewed . Rename a property or trait: Change the property name revenue to total for a specific destination. Update a property value: Use Segment’s Public API to transform the property currency to have the value USD . Property Transformations Assigning static values: If you want to create a new property and set a static value, use Segment’s Public API to create new_property: static_value . Segment currently supports setting static values for top-level fields, as well as fields within the context or properties object with propertyValueTransformations . However, Segment doesn’t support changing fields outside the properties or traits object with propertyRenames . You can use propertyValueTransformations on a single object to assign the same value to different fields or on multiple objects to assign a static value to the same field across objects. Casing functions: Use Segment’s Public API to transform property value casing to lowercase , uppercase , snakecase , kebabcase , or titlecase . When transforming data with casing functions, use the fqlDefinedProperties array to define the FQL you want to use and the new or existing propertyName you’d like to transform. Static and dynamic value casing: Use casing functions to transform property values to create uniform tracking data. For example, you can convert usa to USA to keep your downstream data consistent. You can transform these properties using static casing functions: fqlDefinedProperties\": [{\"fql\": \"uppercase(\"United States)\", \"propertyName\": \"properties.propertyValue1\"}] or dynamic casing functions: fqlDefinedProperties\": [{\"fql\": \"lowercase(properties.propertyValue1)\", \"propertyName\": \"properties.propertyValue1\"}] Create a new property with applied casing : Use Segment’s Public API to create a new property and set the value of the new property to the transformed value of an existing property. You can dynamically assign the value of one existing property to another, or assign the value of an existing property to a new property without applying casing functions. For example, create a new property ( prop2 ) with a value of lowercase(properties.prop1) by including the following snippet in your payload: fqlDefinedProperties\": [{\"fql\": \"lowercase(properties.prop1)\", \"propertyName\": \"properties.prop2\"}] Note that you can only assign one property to fqlDefinedProperties array. Note that you cannot use fqlDefinedProperties along with event or property rename or property value transformations. Segment displays an error if the following property conflicts occur: You create a property value transformation when one already exists for the same property value. Two property paths in propertyValueTransformations are the same. A property path in propertyValueTransformations is the same as a property name in propertyRenames . This page was last modified: 24 Jul 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page What is a Transformation? View all Transformations Create a Transformation Use Cases Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "viewed_product",
      "connected",
      "group",
      "applied",
      "supported",
      "descriptive",
      "source",
      "error",
      "paths",
      "appears",
      "transformation",
      "section",
      "array",
      "easiest",
      "between",
      "customers",
      "ingredients",
      "dropdown",
      "define",
      "documentation",
      "makes",
      "powerful",
      "disabled",
      "which",
      "improve",
      "simple",
      "separate",
      "correct",
      "warehouses",
      "contains",
      "escape",
      "levels",
      "malformed",
      "include",
      "ensures",
      "currency",
      "cannot",
      "clicking",
      "order_completed",
      "every",
      "choose",
      "helpful",
      "warehouse",
      "propertyvaluetransformations",
      "where",
      "destinations",
      "static_value",
      "creating",
      "while",
      "recommends",
      "sorting",
      "toggle",
      "field",
      "conform",
      "track",
      "prop1",
      "context",
      "quality",
      "treated",
      "package",
      "selectors",
      "should",
      "disable",
      "first",
      "permanently",
      "create",
      "existing",
      "renaming",
      "value",
      "feedback",
      "enter",
      "event",
      "total",
      "payloads",
      "reach",
      "defined",
      "dynamic",
      "directly",
      "objects",
      "apply",
      "traits",
      "permissions",
      "solving",
      "affect",
      "names",
      "notation",
      "analytics",
      "change",
      "cloud",
      "selected",
      "titlecase",
      "selects",
      "lowercase",
      "replay",
      "together",
      "unsupported",
      "integrate",
      "using",
      "websites",
      "another",
      "property",
      "circular",
      "modified",
      "temporary",
      "already",
      "processes",
      "scope",
      "salad",
      "added",
      "moving",
      "data",
      "applies",
      "scenario",
      "later",
      "string",
      "single",
      "engineering",
      "assistance",
      "snippet",
      "casing",
      "detrimental",
      "interested",
      "account",
      "better",
      "immediately",
      "uppercase",
      "object",
      "displays",
      "provided",
      "completed",
      "depending",
      "component",
      "products",
      "rename",
      "misnamed",
      "multiple",
      "product_id",
      "differentiate",
      "public",
      "identify",
      "deleted",
      "allows",
      "filters",
      "required",
      "orderupdated",
      "critical",
      "either",
      "dynamically",
      "overflow",
      "properties",
      "level",
      "across",
      "api",
      "irrevocable",
      "strategy",
      "completed_order",
      "requirements",
      "listed",
      "manually",
      "tools",
      "protocols",
      "business",
      "snakecase",
      "supports",
      "regardless",
      "click",
      "visit",
      "viewed",
      "recovered",
      "order",
      "transform",
      "following",
      "propertyrenames",
      "about",
      "clearly",
      "problems",
      "order_updated",
      "three",
      "attributes",
      "propertyname",
      "setting",
      "correspond",
      "static",
      "navigate",
      "within",
      "retroactively",
      "owner",
      "flows",
      "difficult",
      "types",
      "feature",
      "new_property",
      "assume",
      "assigning",
      "specific",
      "however",
      "fixes",
      "label",
      "uniform",
      "select",
      "product",
      "convert",
      "mappings",
      "different",
      "events",
      "without",
      "currently",
      "update",
      "executive",
      "destination",
      "reason",
      "transformations",
      "downstream",
      "enable",
      "increases",
      "exists",
      "filtering",
      "guides",
      "enabled",
      "requirement",
      "sending",
      "transforming",
      "device",
      "recoverable",
      "unique",
      "fqldefinedproperties",
      "forward",
      "workspace",
      "after",
      "changing",
      "thanks",
      "restriction",
      "mobile",
      "presented",
      "align",
      "changes",
      "ecommerce",
      "along",
      "schema",
      "combo",
      "determines",
      "doesn",
      "wizard",
      "resulting",
      "userid",
      "irrevocably",
      "enables",
      "start",
      "complements",
      "examples",
      "relevant",
      "instance",
      "customize",
      "unexpected",
      "features",
      "fields",
      "before",
      "applying",
      "organization",
      "transformed",
      "other",
      "growth",
      "states",
      "scale",
      "generates",
      "available",
      "conflicts",
      "flowing",
      "search",
      "admin",
      "minimizes",
      "through",
      "blocks",
      "example",
      "solution",
      "request",
      "helps",
      "trait",
      "assign",
      "broadly",
      "simply",
      "focused",
      "extract",
      "segment",
      "organize",
      "right",
      "functions",
      "contact",
      "dimension",
      "important",
      "learn",
      "including",
      "payload",
      "structure",
      "current",
      "these",
      "outside",
      "occur",
      "started",
      "kebabcase",
      "editing",
      "settings",
      "revenue",
      "cases",
      "exist",
      "edited",
      "original",
      "description",
      "values",
      "prop2",
      "scoped",
      "achieve",
      "created",
      "character",
      "united",
      "support",
      "plans",
      "tracking",
      "propertyvalue1",
      "instances",
      "conflicting",
      "active",
      "structured",
      "selecting",
      "replayable",
      "questions",
      "easily",
      "notes",
      "nested",
      "consistent",
      "problem"
    ],
    "howto_steps": [
      "this escape character \\ is added to differentiate between a property name that has a . in it, and a nested field, like so: ingredients.salad → \"ingredients\": { \"salad\": \"yum\" }\ningredients\\.salad → \"ingredients.salad\": \"yum\" Step 3: Name the transformation and enable it Enter a descriptive name to act as a label for the transformation. This label helps you organize your Transformations, and Segment recommends that you make this descriptive and focused on the problem you’re solving. For example Fix misnamed order_completed event for ecommerce spec is much better than Map order_completed . In this step, you can also choose to keep the Transformation disabled, so you can come back and edit it later. To update, enable, or disable a Transformation, click on the overflow menu and select Edit Transformation . Use Cases Here’s a list of Segment Transformations with some use case examples. Rename an event: Change an event name from viewed_product to Product Viewed . Rename a property or trait: Change the property name revenue to total for a specific destination. Update a property value: Use Segment’s Public API to transform the property currency to have the value USD . Property Transformations Assigning static values: If you want to create a new property and set a static value, use Segment’s Public API to create new_property: static_value . Segment currently supports setting static values for top"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#quickstart-guides",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#what-is-a-transformation",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/spec/semantic/",
    "title": " Spec: Semantic Events | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Spec / Spec: Semantic Events Spec: Semantic Events One of the core components of the Segment Spec is the Track call. It describes any arbitrary event that the user has triggered. For some industry verticals and applications, Segment has standardized event names. For Ecommerce tracking, for example, there are specific event names and properties that we recognize semantically. This semantic meaning allows Segment to specially recognize and transform key events before sending them off to each different tool. There are a few places where Segment has standardized event names and properties already: Mobile A/B Testing Ecommerce Email Live Chat Video In the future Segment plans to standardize event names from other data sources as well. This page was last modified: 21 Nov 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "track",
      "tracking",
      "example",
      "visit",
      "specially",
      "these",
      "verticals",
      "assistance",
      "specific",
      "allows",
      "testing",
      "sources",
      "thanks",
      "standardized",
      "started",
      "improve",
      "websites",
      "request",
      "applications",
      "meaning",
      "mobile",
      "where",
      "helpful",
      "names",
      "before",
      "modified",
      "account",
      "semantic",
      "transform",
      "standardize",
      "analytics",
      "segment",
      "there",
      "properties",
      "already",
      "email",
      "ecommerce",
      "semantically",
      "change",
      "integrate",
      "different",
      "connections",
      "events",
      "easiest",
      "video",
      "components",
      "questions",
      "other",
      "create",
      "growth",
      "sending",
      "recognize",
      "feedback",
      "tools",
      "triggered",
      "places",
      "describes",
      "data",
      "problems",
      "event",
      "future",
      "contact",
      "arbitrary",
      "industry",
      "documentation",
      "support",
      "plans"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/getting-started/implementation-guide/#event-anatomy-and-naming-standards",
    "title": " Getting Started Guide | Segment Documentation",
    "platform": "segment",
    "content": "Home / Getting started / Getting Started Guide Getting Started Guide On this page Basics Instrumentation Optimization Welcome to Segment! This doc mirrors Segment’s in-product guide, and walks you through each of the tasks to level up your workspace strength and become familiar with Segment. The guide is broken into three categories of tasks: Basics : These tasks allow you to send and debug your first data through Segment. Instrumentation : These tasks allow you to send additional types of data (track & identify) and give you an introduction to creating a data strategy. Optimization : These tasks guide you to expand your data coverage and optimize your workspace. Basics The tasks included in Basics help you send and debug your very first data from a Source (a library that sends data to Segment), and into a Destination (tools you use to analyze or act on your data). The Basic tasks include: Invite teammates Add a Source Add page or screen tracking Add a Destination Testing and Debugging Invite Teammates Segment allows you to invite team members to your workspace. To decide who on your team should be added to Segment, think about who might be responsible for implementing, owning, or using your data in downstream tools. For example, as a developer, you might invite: Marketing colleagues to inform what data might be needed to power campaigns or better understand conversion metrics, A data scientist or analyst to help inform data strategy and property structuring, Product managers to help debug data flow, and to connect product analytics tools To invite team members to your workspace: Go to Settings > Workspace Settings and click the Access Management tab. Click + Invite Team Member . Enter the email addresses of the team members you want to invite separated by a comma. (Optional) You can choose to Add Members to User Groups so that members inherit roles from user groups, or Add Individual Roles to bulk assign individuals roles to all invites. Click Invite . Add a Source A Source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a Source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track. To add a Source: Go to Connections . Click Add Source . Click the Source you’d like to add. Note: More than 80% of workspaces start by adding their JavaScript website. Click Add Source . Enter a name for your source as well as any information on the setup page. Click Add Source . Learn More What is a Source? Create a Source Sources Catalog Add page or screen tracking Once you’ve added your Segment Source, you’re ready to send data into Segment. The simplest data to send into Segment is a Page call (for website Sources) or Screen call (for mobile Sources). Page and screen calls send automatically once you install the Segment snippet or SDK on your website or mobile app. Page and screen calls allow you to record whenever a user sees a page of your website or screen of your app, along with any optional properties about the page or screen. Learn how to install the Segment snippet or SDK on your website or mobile app to start sending data. Learn More Install Segment Spec: Page Spec: Screen Add a Destination Destinations are the business tools or apps that Segment forwards your data to. Adding Destinations allow you to act on your data and learn more about your customers in real time. To add a Destination: Navigate to Connections . Click Add Destination . Choose the Destination you want to add and click Configure . Most users eventually add destinations for: Analytics, Advertising, Email Marketing, and/or Live Chat. Select the Source you want to connect to your Destination. Click Next . Give your Destination a name. Click Save . Configure the settings and enable your destination on the destination settings page. Learn More Sending data to destinations Destination compatibility Destination connection modes Testing and Debugging The Source Debugger is a real-time tool that helps you validate that API calls made from your website, mobile app, or servers arrive at your source. You can use the Source Debugger to make sure that your source functions properly and your events actively send. The Debugger shows a live stream of events that flow through your Segment Source, so that you can check that your events send in the correct format. When you click on a specific event, you’ll be able to see these two views of an event: The Pretty view is a recreation of the API call you made that was sent to Segment. The Raw view is the complete JSON object Segment receives from the calls you send. These calls include all the details about what is tracked: timestamps, properties, traits, ids, and contextual information Segment automatically collects the moment the data is sent. To access your Source Debugger: Navigate to Connections > Sources and choose your source. Click on the Debugger tab. Learn More Testing and Debugging Using the Source Debugger Segment University: Testing and Debugging Instrumentation The tasks in this phase help you create a data strategy and send additional types of data (identify and track calls) to get a clearer picture of who your users are and what actions they’re taking. The Instrumentation tasks include: Basics Invite Teammates Add a Source Add page or screen tracking Add a Destination Testing and Debugging Instrumentation Send an Identify call Send a Track call Choose what to track Event anatomy and naming standards Add a data warehouse Add more destinations Optimization Add more sources Add a cloud source Explore Protocols Explore Engage Send an Identify call The Identify call allows you to tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about the user, like their email, name, and address. Sending an Identify call is your first step towards understanding who your users are. An example of the types of details you might want to learn and track about your users in an Identify call are: Name Email Address Company Lifetime Value Learn More Spec: Identify Plan your identify and group calls Segment University: Identify Send a Track call The Segment Track call allows you to record any actions your users perform, along with any properties that describe the action. Sending a track call is your first step towards understanding what your users are doing. Each action that a user takes is known as an event. Each event has a name and properties. For example, the User Registered event might have properties like plan or accountType . To save time on instrumentation, be sure to check if one of Segment’s Business Specs meets your needs. Learn More Spec: Track Best practices for event calls Analytics Academy: The anatomy of a track call Segment University: The Track Method Choose what to track Segment recommends you to create and maintain a Tracking Plan to have data clarity and team alignment about what customer data you need to collect and why. It’s best to think about the measurable business outcomes you’re trying to track or improve, and then drill down to track the events needed for each business outcome. For example, if you’re looking to reduce cart abandonment, you may want to engage cart abandoners by sending emails and in-app messaging to them using Customer.io and Intercom. You also might want to track events like Product Added or Cart Viewed along this customer journey. Segment maintains a number of industry or product-specific specs to help you get started: B2B Ecommerce Video Mobile Learn More Data Collection Best Practices Analytics Academy: How to create a successful data tracking plan Segment University: Planning your implementation Event anatomy and naming standards When it comes to data collection, the best way to set your company up for success is to establish consistent naming conventions. This makes your code easier to read, and it helps everyone at your company understand what your events mean. Segment recommends the best practice of using an “Object Action” (Noun Verb) naming convention for all Track events (for example, Menu Clicked) and using noun_noun snake case for property names (for example, property_name). You can view all the event names you’re currently tracking in the Schema view to ensure you’re using consistent conventions and casing. To view your event names in the Source Schema: Navigate to Connections > Sources . Click on the Source you want to view. Click on the Schema tab.\nYour event names are listed in the table. Learn More Event naming best practices Analytics Academy: Naming conventions for clean data Add a data warehouse A data warehouse is a central location where you can store your raw customer data from multiple sources. A data warehouse gives you flexibility to query your data, which allows you to answer analytical questions that may not be possible with a standard analytics tool. A data warehouse also allows you to collect and compile data from third party tools as Cloud Sources in Segment, to help you gain a 360 view of your customer touchpoints. Learn More What’s a warehouse? Warehouse FAQs Analytics Academy: Why you should own your data Add more destinations Adding more destinations allows you to connect all your business tools to run through Segment. This gives you the confidence that they are all acting on the same data. Most users connect a variety of marketing, advertising, product, and analytics tools. With all your tools acting on the same set of customer data, you can personalize your customer engagement and deliver a consistent message across multiple channels To add more destinations: Navigate to Connections . Click Add Destination . Choose the Destination you want to add and click Configure . Most users eventually add destinations for: Analytics, Advertising, Email Marketing, and/or Live Chat. Select the Source you want to connect to your Destination. Click Next . Give you Destination a name. Click Save . Configure the settings and enable your destination on the destination settings page. Repeat steps 1-7 for each destination you want to add. Learn More Segment Blog: Recipes Automating Multi-Channel Re-Engagement Campaigns Optimization The tasks in this phase help you to optimize your Segment implementation and take it to the next level. The optimization tasks include: Add more sources Add a cloud source Explore Protocols Explore Engage Add more sources Adding any additional data sources that you might have, like a mobile app, marketing website, server, or cloud tool will give you a more complete view of your customer.\nEach touchpoint you have with your customers is a potential area to gain a better understanding of them. To add more sources: Go to Connections . Click Add Source . Click the Source you’d like to add. Click Add Source . Enter a name for your source as well as any information on the setup page. Click Add Source . Repeat steps 1-6 for all the other sources you want to add. Learn More Tracking users across channels and devices Sources catalog Add a cloud source Cloud sources allow you to pull in customer data from third-party tools (like Twilio or Stripe) into a data warehouse for complex querying. Consolidating your customer data enables you to eliminate data silos to get a single view of your customer. Before adding a cloud source, you need to make sure you: Get cloud source credentials. Get warehouse credentials. Choose your preferred sync time. Once you have the necessary credentials, to add a cloud source: Navigate to Connections and click Add Source . Click on the cloud source you want to add and click Add Source . Give your cloud source a name and click Authenticate . Enter your credentials or log in using OAuth. Enable the source. Navigate to Connections > Destinations and select your warehouse. On the Settings tab of your warehouse, enter the credentials for your warehouse if you don’t already have one connected to Segment. Learn More Cloud sources Comparing Cloud Sources Explore Protocols Protocols automate and scale the data quality best practices developed over years of helping users implement Segment. Investing in data quality improves trust in your data, reduces time spent by your engineering and business teams navigating and validating data, and allows your business to grow faster. There are steps to take when you use Protocols: Align teams with a Tracking Plan Validate data quality with violations Enforce data standards with controls Resolve data issues with transformations Learn More Protocols Overview Protocols FAQs Intro to Protocols Explore Engage Engage is a powerful personalization platform that enables you to create unified customer profiles in Segment, to build and enrich audiences, and to activate audiences across marketing tools. Engage allows you to enrich user profiles with custom traits, allowing you to create granular audiences for campaigns, advertising, and analysis. This page was last modified: 24 Jan 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Basics Instrumentation Optimization Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "how-to",
    "keywords": [
      "website",
      "clean",
      "connected",
      "group",
      "javascript",
      "moment",
      "custom",
      "source",
      "abandonment",
      "mirrors",
      "easiest",
      "customers",
      "owning",
      "analyze",
      "touchpoints",
      "property_name",
      "forwards",
      "documentation",
      "categories",
      "server",
      "arrive",
      "makes",
      "powerful",
      "which",
      "think",
      "improve",
      "members",
      "alignment",
      "correct",
      "practices",
      "invites",
      "inherit",
      "improves",
      "table",
      "variety",
      "implementation",
      "include",
      "actively",
      "collects",
      "debugger",
      "takes",
      "channel",
      "individual",
      "eliminate",
      "allowing",
      "choose",
      "implementing",
      "warehouse",
      "messaging",
      "helpful",
      "where",
      "helping",
      "destinations",
      "creating",
      "central",
      "email",
      "collection",
      "recommends",
      "explore",
      "simplest",
      "profiles",
      "receives",
      "maintains",
      "managers",
      "meets",
      "familiar",
      "track",
      "automating",
      "member",
      "install",
      "understanding",
      "automatically",
      "format",
      "quality",
      "anatomy",
      "spent",
      "emails",
      "should",
      "developed",
      "first",
      "complex",
      "individuals",
      "create",
      "video",
      "taking",
      "querying",
      "value",
      "feedback",
      "marketing",
      "enter",
      "event",
      "tasks",
      "getting",
      "eventually",
      "lifetime",
      "record",
      "traits",
      "groups",
      "clearer",
      "multi",
      "specs",
      "query",
      "might",
      "names",
      "strength",
      "configure",
      "analytics",
      "change",
      "customer",
      "cloud",
      "standards",
      "necessary",
      "planning",
      "properly",
      "standard",
      "confidence",
      "towards",
      "decide",
      "authenticate",
      "compatibility",
      "application",
      "navigating",
      "workspaces",
      "integrate",
      "using",
      "screen",
      "basic",
      "testing",
      "sources",
      "credentials",
      "trust",
      "property",
      "additional",
      "websites",
      "compile",
      "measurable",
      "modified",
      "power",
      "years",
      "steps",
      "whenever",
      "already",
      "information",
      "servers",
      "practice",
      "added",
      "flexibility",
      "store",
      "data",
      "activate",
      "successful",
      "validate",
      "timestamps",
      "recipes",
      "complete",
      "single",
      "campaigns",
      "engineering",
      "assistance",
      "snippet",
      "establish",
      "casing",
      "known",
      "engagement",
      "looking",
      "build",
      "account",
      "better",
      "trying",
      "object",
      "recreation",
      "debug",
      "structuring",
      "method",
      "outcome",
      "guide",
      "resolve",
      "acting",
      "multiple",
      "identify",
      "conventions",
      "allows",
      "abandoners",
      "analyst",
      "coverage",
      "potential",
      "academy",
      "needs",
      "properties",
      "level",
      "across",
      "api",
      "picture",
      "strategy",
      "views",
      "touchpoint",
      "listed",
      "tools",
      "protocols",
      "analysis",
      "business",
      "advertising",
      "metrics",
      "addresses",
      "issues",
      "click",
      "pretty",
      "visit",
      "repeat",
      "viewed",
      "basics",
      "easier",
      "colleagues",
      "reduce",
      "there",
      "personalization",
      "convention",
      "answer",
      "about",
      "originates",
      "contextual",
      "problems",
      "three",
      "welcome",
      "possible",
      "broken",
      "navigate",
      "accounttype",
      "stream",
      "types",
      "modes",
      "become",
      "specific",
      "number",
      "faster",
      "tracked",
      "select",
      "product",
      "events",
      "channels",
      "platform",
      "optimization",
      "comparing",
      "message",
      "scientist",
      "currently",
      "destination",
      "allow",
      "included",
      "connect",
      "address",
      "transformations",
      "downstream",
      "third",
      "optional",
      "gives",
      "enable",
      "maintain",
      "connection",
      "twilio",
      "company",
      "debugging",
      "snake",
      "sending",
      "setup",
      "comma",
      "ensure",
      "automate",
      "includes",
      "party",
      "unique",
      "workspace",
      "roles",
      "thanks",
      "mobile",
      "optimize",
      "align",
      "engage",
      "adding",
      "needed",
      "ecommerce",
      "along",
      "schema",
      "enrich",
      "teammates",
      "perform",
      "silos",
      "enables",
      "violations",
      "start",
      "unified",
      "walks",
      "management",
      "inform",
      "controls",
      "enforce",
      "access",
      "invite",
      "journey",
      "check",
      "before",
      "drill",
      "other",
      "library",
      "growth",
      "responsible",
      "naming",
      "scale",
      "devices",
      "registered",
      "phase",
      "through",
      "separated",
      "example",
      "ready",
      "catalog",
      "noun_noun",
      "request",
      "helps",
      "assign",
      "consolidating",
      "overview",
      "sends",
      "segment",
      "functions",
      "clarity",
      "success",
      "contact",
      "learn",
      "university",
      "describe",
      "implement",
      "clicked",
      "location",
      "these",
      "expand",
      "started",
      "investing",
      "settings",
      "understand",
      "calls",
      "doing",
      "their",
      "oauth",
      "introduction",
      "teams",
      "industry",
      "support",
      "tracking",
      "action",
      "preferred",
      "conversion",
      "shows",
      "actions",
      "deliver",
      "intro",
      "outcomes",
      "comes",
      "connections",
      "personalize",
      "reduces",
      "intercom",
      "questions",
      "everyone",
      "collect",
      "users",
      "developer",
      "analytical",
      "granular",
      "instrumentation",
      "stripe",
      "consistent",
      "validating",
      "audiences",
      "details"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/#optimization",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/protocols/validate/connect-sources/",
    "title": " Connect a Tracking Plan | Segment Documentation",
    "platform": "segment",
    "content": "Home / Protocols / Validate / Connect a Tracking Plan Connect a Tracking Plan Free x Team x Business ✓ + Protocols ✓ ? Protocols is available as an add-on for Business plans only. See the available plans , or contact Support . On this page Disconnect Source from Tracking Plan With your Tracking Plan complete, it’s time to apply the Tracking Plan to one or more Sources. Select Connect Source from the right hand menu for your specific Tracking Plan. From this menu, you will be redirected to a workflow to select a Source from your workspace. Note that a Source can only have one tracking plan applied to it. You can’t select a Source that already has a Tracking Plan connected to it, but you can apply a Tracking Plan to multiple sources. After selecting a Source, you will be shown the consequences of connecting your Tracking Plan. IMPORTANT: Make sure to read through the consequences of connecting a source! Disconnect Source from Tracking Plan To disconnect the Source from the Tracking Plan, go to the Tracking Plan overview page, locate the column for the tracking plan you want to disconnect, then click the icon under the Connected Sources . In the settings that appear, click Disconnect next to the Source you want to disconnect. This page was last modified: 03 Aug 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Disconnect Source from Tracking Plan Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "complete",
      "through",
      "connected",
      "click",
      "tracking",
      "workspace",
      "connect",
      "after",
      "shown",
      "locate",
      "visit",
      "apply",
      "applied",
      "consequences",
      "these",
      "integrate",
      "assistance",
      "disconnect",
      "specific",
      "thanks",
      "sources",
      "started",
      "websites",
      "improve",
      "request",
      "helpful",
      "mobile",
      "source",
      "redirected",
      "overview",
      "modified",
      "account",
      "select",
      "workflow",
      "settings",
      "connecting",
      "analytics",
      "segment",
      "already",
      "column",
      "change",
      "appear",
      "selecting",
      "right",
      "easiest",
      "multiple",
      "questions",
      "create",
      "under",
      "growth",
      "feedback",
      "tools",
      "data",
      "problems",
      "protocols",
      "contact",
      "business",
      "validate",
      "available",
      "important",
      "documentation",
      "support",
      "plans"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/getting-started/06-testing-debugging/",
    "title": " Testing and Debugging | Segment Documentation",
    "platform": "segment",
    "content": "Home / Getting started / Testing and Debugging Testing and Debugging On this page The Source Debugger Event Delivery One of the most important questions you’ll ask early on is “How do I know if Segment is working?” There are several ways to check if your data is flowing. One is the Debugger tab in each Source in the Segment web app, where you can see data coming from a source into Segment. Another is the Event Delivery tool which shows which data is arriving at specific destinations. For monitoring purposes, you’ll also see alerts in the Workspace Health tool if your sources or destinations produce repeated errors. Segment University: Debugging and Troubleshooting Want more? Check out our course on debugging and troubleshooting. (Must be logged in to access.) The Source Debugger The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive to your Segment Source, so you can troubleshoot your Segment set up even quicker. With the Debugger, you can check that you’re sending calls in the expected format, without having to wait for any data processing. The Debugger is separate from your workspace’s data pipeline and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source. To see a more complete view of all your events, we recommend that you set up either a warehouse or an S3 destination . The Debugger shows a live stream of sampled events arriving into the Source, but you can also pause the stream from displaying new events by toggling “Live” to “Pause”. Events continue to arrive to your Source while you Pause the stream. You can search in the Debugger to find a specific payload using any information you know is available in the event’s raw payload. You can also use advanced search options to limit the results to a specific event. Two views are available when viewing a payload: The Pretty view is a recreation of the API call you made that was sent to Segment. The Raw view is the complete JSON object Segment received from the calls you sent. These calls include all the details about what is being tracked: timestamps, properties, traits, ids, and contextual information Segment automatically collects the moment the data is sent. Event Delivery The Event Delivery tool helps you see if Segment is encountering issues delivering your data from your sources to their connected destinations. Segment sends billions of events to destinations every week. If our systems encounter errors when trying to deliver your data, we report them in the Event Delivery tool. Here is an example of what the Event Delivery tool looks like: Event Delivery is most useful when: When data seems to be missing in your destination. For example, you have Google Analytics set up as a destination and your recent data looks incomplete When setting up a destination for the first time. For example, you are connecting Google Analytics to your Node Source. Once you’ve entered your credentials and turned the destination on, you can use this feature to see whether events are successfully making it to GA in near realtime. You can access the Event Delivery tool from the destination Settings tab in any supported destination. Event Delivery is only available for cloud-mode destinations, which receive data through the Segment servers. Device-mode destinations receive data through an API endpoint outside the Segment servers, where we cannot monitor or report on it. Event delivery is not available for Warehouses or Amazon S3 destinations . Using Event Delivery The UI shows three parts that report on Segment’s ability to deliver your source data: Key Metrics, Error Details, and Delivery Trends. Before you begin, select a time period from the drop down menu at the right. The Event Delivery display updates to show only information about your selected time period. Key metrics This panel displays quantitative information about the destination’s data flow: Delivered: The number of messages Segment successfully delivered to the destination in the selected time period. Not Delivered: The number of messages Segment was unable to deliver. If this number is greater than zero, the reasons for these failures appear in the errors table below. P95 Latency: The time it takes for Segment to deliver the slowest 5% of your data (known as P95 latency). The latency reported is end-to-end: from the event being received through the Segment API, to the event being delivered to partner API. This helps tell you if there is a delay in your data pipeline, and how severe it is. Error details The Error details table displays a summary of the errors in a given period, and the most important information about them. You can click any row in the table to expand it to show more information. The Error Details view gives you as much information as possible to help you resolve the issue. The example below shows an example Error Details panel. This view includes: Description The event delivery UI provides a human-friendly summary of the error, based on the payload Segment received back from the partner. Actions These are actions you can take, based on what Segment knows about the issue. More Info Links to any documentation that might be helpful to you. Sample payloads To help you debug, Segment provides sample payloads from every step of the data’s journey: You Sent - the data you sent to Segment’s API. Request to Destination - the request Segment made to the Partner API. This payload will likely be different from what you sent it because Segment is mapping your event to the partner’s spec to ensure the message is successfully delivered. Response from Destination - the response Segment received from the Partner API. This will have the raw partner error. If you need to troubleshoot an issue with a Partner’s Success team, this is usually something they’ll want to see. View Segment’s list of Integration Error Codes for more information about what might cause an error. Trends When debugging, it’s helpful to see when issues start, stop and how they trend over time. The Event Delivery view shows a graph with the following information: Delivered : The number of events that were successfully delivered in the time period you selected. Not delivered : The number of events that were not successfully delivered in the time period you selected. The Latency view shows the end-to-end P95 latency during the time period you selected. back Sending data to Destinations Unlock the power of Segment with Destinations next What's next? Learn about what you can do next with Segment This page was last modified: 06 Jul 2022 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page The Source Debugger Event Delivery Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "working",
      "website",
      "toggling",
      "received",
      "issues",
      "access",
      "pretty",
      "connected",
      "monitor",
      "click",
      "codes",
      "visit",
      "updates",
      "partner",
      "traits",
      "journey",
      "moment",
      "billions",
      "check",
      "supported",
      "provides",
      "troubleshooting",
      "likely",
      "source",
      "might",
      "error",
      "before",
      "based",
      "analytics",
      "failures",
      "trends",
      "following",
      "there",
      "change",
      "cloud",
      "useful",
      "because",
      "graph",
      "about",
      "entered",
      "looks",
      "easiest",
      "selected",
      "websites",
      "options",
      "contextual",
      "growth",
      "troubleshoot",
      "being",
      "problems",
      "three",
      "friendly",
      "setting",
      "available",
      "possible",
      "recommend",
      "flowing",
      "search",
      "documentation",
      "systems",
      "arrive",
      "through",
      "example",
      "stream",
      "exhaustive",
      "feature",
      "which",
      "integrate",
      "specific",
      "testing",
      "using",
      "sources",
      "credentials",
      "another",
      "number",
      "turned",
      "improve",
      "request",
      "helps",
      "tracked",
      "encounter",
      "messages",
      "issue",
      "separate",
      "modified",
      "power",
      "purposes",
      "delivery",
      "repeated",
      "results",
      "sends",
      "connecting",
      "select",
      "unable",
      "segment",
      "below",
      "links",
      "information",
      "warehouses",
      "servers",
      "delivered",
      "displaying",
      "quantitative",
      "table",
      "different",
      "monitoring",
      "right",
      "events",
      "confirm",
      "implementation",
      "include",
      "response",
      "without",
      "realtime",
      "receive",
      "data",
      "coming",
      "errors",
      "message",
      "success",
      "summary",
      "early",
      "alerts",
      "collects",
      "contact",
      "validate",
      "debugger",
      "timestamps",
      "report",
      "missing",
      "important",
      "cannot",
      "destination",
      "takes",
      "learn",
      "complete",
      "limit",
      "payload",
      "produce",
      "university",
      "incomplete",
      "recent",
      "whether",
      "these",
      "reasons",
      "something",
      "every",
      "outside",
      "started",
      "expand",
      "assistance",
      "knows",
      "helpful",
      "warehouse",
      "known",
      "where",
      "delivering",
      "destinations",
      "processing",
      "gives",
      "account",
      "settings",
      "health",
      "great",
      "endpoint",
      "having",
      "amazon",
      "severe",
      "given",
      "while",
      "trying",
      "object",
      "latency",
      "displays",
      "description",
      "recreation",
      "debug",
      "calls",
      "trend",
      "debugging",
      "their",
      "slowest",
      "usually",
      "sending",
      "ensure",
      "viewing",
      "ability",
      "device",
      "receives",
      "resolve",
      "panel",
      "includes",
      "making",
      "greater",
      "during",
      "support",
      "course",
      "period",
      "cause",
      "quicker",
      "workspace",
      "fired",
      "begin",
      "arriving",
      "thanks",
      "google",
      "automatically",
      "format",
      "mobile",
      "continue",
      "mapping",
      "successfully",
      "shows",
      "logged",
      "either",
      "actions",
      "deliver",
      "properties",
      "api",
      "display",
      "appear",
      "advanced",
      "integration",
      "views",
      "first",
      "pause",
      "questions",
      "create",
      "unlock",
      "parts",
      "human",
      "feedback",
      "seems",
      "tools",
      "encountering",
      "expected",
      "event",
      "start",
      "several",
      "reported",
      "metrics",
      "pipeline",
      "delay",
      "sample",
      "payloads",
      "sampled",
      "details"
    ],
    "howto_steps": [
      "the data you sent to Segment’s API. Request to Destination",
      "the request Segment made to the Partner API. This payload will likely be different from what you sent it because Segment is mapping your event to the partner’s spec to ensure the message is successfully delivered. Response from Destination",
      "the response Segment received from the Partner API. This will have the raw partner error. If you need to troubleshoot an issue with a Partner’s Success team, this is usually something they’ll want to see. View Segment’s list of Integration Error Codes for more information about what might cause an error. Trends When debugging, it’s helpful to see when issues start, stop and how they trend over time. The Event Delivery view shows a graph with the following information: Delivered : The number of events that were successfully delivered in the time period you selected. Not delivered : The number of events that were not successfully delivered in the time period you selected. The Latency view shows the end"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/getting-started/03-planning-full-install/#shortcut-check-if-a-business-spec-meets-your-needs",
    "title": " Planning a Full Installation | Segment Documentation",
    "platform": "segment",
    "content": "Home / Getting started / Planning a Full Installation Planning a Full Installation On this page Define Business Objectives Decide what to collect Create naming conventions Develop a tracking plan Plan for destination tools Now that you’ve seen Segment in action, step back and think through what a full implementation of Segment for your organization would look like. Figuring out what events to track in Segment can feel overwhelming. You should expect this planning process to have the following steps: Define Business Objectives Decide what to collect Shortcut: Check if a Business Spec meets your needs B2B Spec Ecommerce Spec Mobile Spec Video Spec Create naming conventions Develop a Tracking Plan Plan your Identify and Group calls Plan your Track events Define your Track event properties Plan for destination tools Be prepared to invest time deciding with stakeholders how to track your data, and planning how you’ll analyze it. The time you spend here will save you lots of time in the future, as following Segment’s best practices allows you to easily change your tracking later. Define Business Objectives Tracking is about learning and taking action. Think about what you want to know about your product or customers. Think about what assumptions need to be tested and what theories need to be proven true or false. Think about the unknowns. Here are some helpful questions to get started: What kind of events or data best illustrate or explain how your customers use your product? How do people discover, start using, and paying for your product? What are the most important steps in a customer’s journey? While it may seem obvious, we highly recommend documenting your high-level business objectives. More specifically, ask yourself: what are the measurable business outcomes you want to achieve this year? Do you want to acquire new customers? Generate more new sign-ups, drive more incremental revenue among your current customer base? The best way to answer this question is to interview stakeholders in your organization who will consume the data. With your business goals documented, the next step is to map user actions to those business goals. For example, if one of your goals is to activate new signups, you want to think about which activities are related to a signup. Ask yourself, what actions do people take before signing up? Do specific actions predict a user signing up? As an example, you might end up with a list like this: Ad Campaign Clicked Link Clicked Article Completed Campaign Opened Form Initiated Form Submitted User Signed Up While this list represents a tiny fraction of the user actions you could track, it gives a list focused on your top business objectives. This helps break up the huge project of data collection into smaller chunks. Decide what to collect With your business objectives documented and mapped to user actions, it’s time to build standards that you can use when deciding what to track. With your stakeholders, make a list of the actual events (page or screen views, and user actions) that you want to track. Think about all of the ways your users can interact with your site or app When you’re first starting out, we recommend that you limit your tracking plan to a few core events, but add lots of properties to provide context about them. We generally see more success with the “less is more” philosophy of tracking data, but you might also decide to take a more liberal “track more and analyze later” approach. Like everything, each alternative has pros and cons that are important to consider especially as it relates to your company’s needs. Shortcut: Check if a Business Spec meets your needs Segment maintains several “Business Specs”, which are recommendations based on your type of business that give recommendations on what to track, what additional traits or properties to collect, and how to format them. The two most common are the B2B (business-to-business) Spec, Ecommerce Spec, and Mobile and Video specs. If these specs meet your business needs, you’re in luck. These specs are built into Segment tracking plan templates, so you don’t need to start from a blank slate. B2B Spec If your organization sells a product or services to other businesses, you might have different analytics and marketing needs than most companies. You need to understand your customer behaviors both at the user-level, and also at the company or team-level.  You can read more about how Segment thinks about B2B tracking , and read more about the B2B Spec . Ecommerce Spec If your organization sells products online, the E-commerce Spec covers the customer’s journey as they browse your store, click on promotions, view products, add those products to a cart, and complete a purchase. It also provides recommendations about off-page interactions, including interactions with email promotions, coupons, and other systems. You can read more about why companies need an Ecommerce Spec , read more about Ecommerce tracking plans , and dive directly into our Ecommerce Spec . Mobile Spec The native Mobile Spec is a common blueprint for the mobile user lifecycle. The Spec outlines the most important events for mobile apps to track, and automatically collects many of these events when you use the Segment Android and iOS SDKs . Read more about the benefits of the native mobile spec , or read through the Native Mobile Spec directly. Video Spec Segment’s video spec helps you understand how customers engage with your video and ad content, including playback events, types of media displayed, and performance metrics. You can read more about our Video Spec . Create naming conventions Regardless of approach, here are some important best practices to keep in mind: Pick a casing convention: We recommend Title Case for event names and snake_case for property names. Make sure you pick a casing standard and enforce it across your events and properties. Pick an event name structure: As you may have noticed from our specs , we’re big fans of the Object ( Blog Post ) + Action ( Read ) framework for event names. Pick a convention and stick to it. Don’t create event names dynamically: Avoid creating events that pull a dynamic value into the event name (for example, User Signed Up (11-01-2019) ). If and when you send these to a warehouse for analysis, you end up with huge numbers of tables and schema bloat. Don’t create events to track properties: Avoid adding values to event names when they could be a property. Instead, add values as a property. For example, rather than having an event called “Read Blog Post - Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like \"blog_post_title\":\"Best Tracking Plans Ever\" . Don’t create property keys dynamically: Avoid creating property names like \"feature_1\":\"true\" , \"feature_2\":\"false\" as these are ambiguous and very difficult to analyze Got all that? Great. You’re now ready to develop a Tracking Plan. Develop a tracking plan A tracking plan clarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective). A good tracking plan represents the single source of truth about what data you collect, and why. Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking-plan tool, Protocols ), and serves as a project management tool to get your organization in agreement about what data to use to make decisions. A tracking plan helps build a shared understanding of the data among marketers, product managers, engineers, analysts, and any other data users. Plan your Identify and Group calls The Identify call updates all records of the user with a set of traits, and so is extremely important for building your understanding of your users. But how do you choose which traits to include?\nThe example below shows an Identify call using analytics.js ) for Segment: analytics . identify ({ name : ' Jane Kim ' , email : ' janekim@example.com ' , login : ' janekay ' , type : ' user ' , created : ' 2016-11-07T16:40:52.238Z ' , }); The traits represent dimensions in your data that you can group or pivot on. For example, in the above, you can easily create cohorts of all types that are users or accounts created within a time window of your choosing. When you plan your deployment, think about what information you can collect as traits that would be useful to you when grouping users together, and plan how you will collect that information. The Group call is similar to the Identify call, but it adds traits associated with a parent account to the user’s profile. If your organization is a B2B company, you should also plan the group traits to collect, and how you’ll use them once they’re applied to a user account. Plan your Track events We recommend starting with fewer events that are directly tied to one of your business objectives , to help avoid becoming overwhelmed by endless number of possible actions to track. As you get more comfortable, you can add more events to your tracking plan that can answer more specialized questions. At Segment, we started out tracking these events: User Signed Up Source Data Sent Subscription Started Then we added some peripheral events to to better understand how we’re performing, for the following reasons: User Invited When users invite more people to their organization, it’s a good indicator that they’re engaged and serious about using the product. This helps us measure growth in organizations. Destination Enabled Turning on a destination is a key value driver for our customers. Debugger Call Expanded When we see that a certain customer has used the live event stream feature a number of times, we can contact see if we can help them debug. For an Ecommerce company, however, the main events might be something like: Account Created Product Added Order Completed Tip : As mentioned above , Segment has a set of “reserved” event names specifically for ecommerce, called the Ecommerce Spec . Check it out to see which events Segment covers and how they are used in downstream destinations. An online community, on the other hand, has an entirely different set of actions that indicate engagement, as listed below. For example, a community might want to track actions like: Content Viewed Content Shared Comment Submitted Content Produced Content Curated With these actions tracked, the community can develop metrics around engagement, and understand how users move towards their ultimate conversion events. You can read more in this article from the online community GrowthHackers about the events they track and why. Define your Track event properties Each Track call can accept an optional dictionary of properties, which can contain any key-value pair. These properties act as dimensions that allow destination tools to group, filter, and analyze the events. They give you additional detail on broader events. Events should be generic and high-level, but properties should be specific and detailed. For example, at Segment, Business Tier Workspace Created is a horrible event name. Instead, we used Workspace Created with a property of account_tier and value of business : analytics . track ( ' Workspace Created ' , { account_tier : ' business ' }) Similar to the traits in the Identify call, the properties provide a column that you can pivot against or filter on in your analytics tools or allow you to create a cohort of users in email tools. Don’t create dynamically generated property names in the properties dictionary. Each key creates a new column in your downstream tools, and dynamically generated keys clutter your tools with fragmented data that makes it difficult and confusing to use later. Here is Segment’s Lead Captured Track call: analytics . track ( userId , ' Lead Captured ' , { email : ' email ' , location : ' header navbar ' url : ' https://segment.com/ ' }); The high-level event is Lead Captured , and all of the details appear in the properties dictionary. Because of this, we can easily see in our downstream tools how many leads were captured, and from which parts of the site. If you want to learn more about how properties are used by downstream tools, check out The Anatomy of a Track Call . Plan for destination tools Once you’ve completed your tracking plan, there’s one more step you might want to do before you move on to actually implementing Segment. The Segment destination catalog contains hundreds of tools, many of which you’ll be familiar with already. If your organization has an established set of analytics tools, look for those tools in the catalog and bookmark their documentation pages. These docs pages contain important information about how Segment transforms data for the destination tool, and they also contain useful details about troubleshooting, set-up, and implementation considerations. Once you have an initial list of the destination tools your organization uses, you can also check which Segment methods those tools accept . This helps you at implementation time to ensure that the calls you use can be consumed by the tools they’re intended for. Additionally, you should check which connection modes each tool supports , so you know ahead of time which destinations may need to be bundled. Tip : If you know you’re looking for a tool for a specific purpose, but haven’t chosen one yet, you can also check the Connection Modes by category page to see which tools might be compatible with the least implementation changes. back A simple Segment installation Walk through a disposable, demo implementation. next A full Segment implementation Take your plans, and make them real. This page was last modified: 30 Mar 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Define Business Objectives Decide what to collect Create naming conventions Develop a tracking plan Plan for destination tools Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "feature_1",
      "group",
      "performing",
      "applied",
      "troubleshooting",
      "source",
      "overwhelming",
      "growthhackers",
      "project",
      "entirely",
      "community",
      "title",
      "easiest",
      "templates",
      "accounts",
      "customers",
      "services",
      "illustrate",
      "analyze",
      "recommend",
      "define",
      "benefits",
      "documentation",
      "makes",
      "stakeholders",
      "category",
      "which",
      "think",
      "improve",
      "simple",
      "practices",
      "lifecycle",
      "pages",
      "contains",
      "overwhelmed",
      "yourself",
      "unknowns",
      "implementation",
      "include",
      "among",
      "fraction",
      "intended",
      "collects",
      "content",
      "against",
      "sells",
      "debugger",
      "certain",
      "invest",
      "serious",
      "submitted",
      "goals",
      "haven",
      "question",
      "additionally",
      "choose",
      "helpful",
      "warehouse",
      "implementing",
      "where",
      "destinations",
      "actual",
      "creating",
      "while",
      "email",
      "collection",
      "article",
      "online",
      "window",
      "engineers",
      "serves",
      "figuring",
      "maintains",
      "managers",
      "meets",
      "familiar",
      "track",
      "represents",
      "invited",
      "pivot",
      "understanding",
      "context",
      "automatically",
      "hundreds",
      "format",
      "businesses",
      "commerce",
      "anatomy",
      "indicate",
      "should",
      "appear",
      "first",
      "create",
      "video",
      "taking",
      "value",
      "feedback",
      "marketing",
      "mentioned",
      "event",
      "predict",
      "actually",
      "documenting",
      "generated",
      "parent",
      "getting",
      "dynamic",
      "directly",
      "incremental",
      "specifically",
      "generic",
      "traits",
      "specs",
      "provides",
      "might",
      "liberal",
      "names",
      "analytics",
      "change",
      "customer",
      "around",
      "useful",
      "false",
      "standards",
      "planning",
      "everything",
      "objectives",
      "standard",
      "signed",
      "contain",
      "tested",
      "documented",
      "probably",
      "together",
      "purpose",
      "towards",
      "decide",
      "expect",
      "provide",
      "approach",
      "discover",
      "integrate",
      "using",
      "screen",
      "bookmark",
      "blog_post_title",
      "websites",
      "property",
      "additional",
      "related",
      "measurable",
      "modified",
      "endless",
      "stick",
      "steps",
      "already",
      "deployment",
      "information",
      "performance",
      "added",
      "store",
      "philosophy",
      "chosen",
      "people",
      "numbers",
      "data",
      "activate",
      "later",
      "interact",
      "common",
      "acquire",
      "tables",
      "complete",
      "limit",
      "single",
      "assistance",
      "avoid",
      "casing",
      "blank",
      "engagement",
      "clarifies",
      "generally",
      "reserved",
      "build",
      "account",
      "looking",
      "great",
      "better",
      "drive",
      "paying",
      "signup",
      "object",
      "debug",
      "cohort",
      "bloat",
      "completed",
      "products",
      "analysts",
      "identify",
      "conventions",
      "ahead",
      "allows",
      "explain",
      "spreadsheet",
      "covers",
      "dynamically",
      "needs",
      "properties",
      "level",
      "across",
      "views",
      "listed",
      "tools",
      "fewer",
      "slate",
      "protocols",
      "analysis",
      "bundled",
      "business",
      "produced",
      "metrics",
      "engaged",
      "behaviors",
      "supports",
      "unless",
      "regardless",
      "click",
      "visit",
      "mapped",
      "viewed",
      "order",
      "methods",
      "following",
      "smaller",
      "filter",
      "there",
      "answer",
      "convention",
      "indicator",
      "about",
      "times",
      "interview",
      "peripheral",
      "leads",
      "develop",
      "ambiguous",
      "problems",
      "dimensions",
      "obvious",
      "consider",
      "possible",
      "broader",
      "turning",
      "within",
      "measure",
      "rather",
      "comfortable",
      "difficult",
      "types",
      "stream",
      "feature",
      "creates",
      "compatible",
      "modes",
      "specific",
      "number",
      "however",
      "snake_case",
      "noticed",
      "tracked",
      "grouping",
      "product",
      "below",
      "different",
      "least",
      "events",
      "curated",
      "native",
      "established",
      "building",
      "android",
      "blueprint",
      "similar",
      "header",
      "initiated",
      "prepared",
      "navbar",
      "destination",
      "interactions",
      "allow",
      "consumed",
      "account_tier",
      "ultimate",
      "break",
      "would",
      "detail",
      "signing",
      "downstream",
      "optional",
      "gives",
      "learning",
      "07t16",
      "connection",
      "company",
      "enabled",
      "media",
      "marketers",
      "highly",
      "ensure",
      "recommendations",
      "accept",
      "workspace",
      "cohorts",
      "https",
      "thanks",
      "decisions",
      "mobile",
      "engage",
      "adding",
      "agreement",
      "changes",
      "ecommerce",
      "browse",
      "schema",
      "considerations",
      "parts",
      "profile",
      "activities",
      "detailed",
      "userid",
      "start",
      "thinks",
      "management",
      "janekim",
      "signups",
      "enforce",
      "invite",
      "installation",
      "updates",
      "specialized",
      "journey",
      "generate",
      "check",
      "captured",
      "before",
      "transforms",
      "based",
      "column",
      "organization",
      "because",
      "initial",
      "extremely",
      "opened",
      "starting",
      "other",
      "called",
      "assumptions",
      "perspective",
      "growth",
      "naming",
      "records",
      "associated",
      "confusing",
      "feature_2",
      "campaign",
      "could",
      "systems",
      "through",
      "coupons",
      "example",
      "ready",
      "playback",
      "catalog",
      "request",
      "helps",
      "process",
      "chunks",
      "focused",
      "segment",
      "horrible",
      "companies",
      "maintained",
      "relates",
      "success",
      "contact",
      "important",
      "truth",
      "learn",
      "deciding",
      "shared",
      "janekay",
      "including",
      "those",
      "structure",
      "shortcut",
      "clicked",
      "current",
      "these",
      "choosing",
      "reasons",
      "something",
      "clutter",
      "started",
      "location",
      "alternative",
      "spend",
      "revenue",
      "having",
      "instead",
      "understand",
      "values",
      "calls",
      "built",
      "subscription",
      "achieve",
      "their",
      "driver",
      "organizations",
      "fragmented",
      "created",
      "framework",
      "represent",
      "outlines",
      "support",
      "plans",
      "login",
      "dictionary",
      "tracking",
      "purchase",
      "action",
      "comment",
      "conversion",
      "shows",
      "actions",
      "above",
      "becoming",
      "outcomes",
      "displayed",
      "questions",
      "consume",
      "disposable",
      "proven",
      "easily",
      "collect",
      "theories",
      "users",
      "future",
      "several",
      "especially",
      "promotions",
      "expanded",
      "details"
    ],
    "howto_steps": [
      "Best Tracking Plans Ever”, create a “Blog Post Read” event and with a property like \"blog_post_title\":\"Best Tracking Plans Ever\" . Don’t create property keys dynamically: Avoid creating property names like \"feature_1\":\"true\" , \"feature_2\":\"false\" as these are ambiguous and very difficult to analyze Got all that? Great. You’re now ready to develop a Tracking Plan. Develop a tracking plan A tracking plan clarifies what events to track, where those events live in the code base, and why you’re tracking those events (from a business perspective). A good tracking plan represents the single source of truth about what data you collect, and why. Your tracking plan is probably maintained in a spreadsheet (unless you use Segment’s tracking"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/protocols/faq/",
    "title": " Protocols Frequently Asked Questions | Segment Documentation",
    "platform": "segment",
    "content": "Home / Protocols / Protocols Frequently Asked Questions Protocols Frequently Asked Questions Free x Team x Business ✓ + Protocols ✓ ? Protocols is available as an add-on for Business plans only. See the available plans , or contact Support . On this page Protocols Notifications Protocols Tracking Plan Protocols Validation Protocols Enforcement Protocols Transformations Protocols Notifications How can I subscribe to Protocols notifications? You can subscribe to a variety of Protocols specific alerts through the workspace Activity Feed settings. To subscribe, visit your workspace Settings > User Preferences > Activity Notifications > Protocols . How can I get notified when someone makes a change to my tracking plan? You can forward notifications from Protocols to a new Segment source, which can then send them to notification tools such as Slack webhook. You can also forward these Protocols alerts to any (cloud-mode) Segment destination that accepts Track calls, including data warehouses. Most customers record these activity feed events to a data warehouse for analysis. How do I get notified when new violations are generated? Can I create custom violation notifications? You can enable violation event forwarding to start delivering violations as Track calls to a Segment source. From there, you can forward the events to any Segment destination that accepts Track calls. You can also use the Slack Actions destination to set event triggers for context fields, meaning events with violations are sent as Track calls directly from the source. Protocols Tracking Plan What is the Segment Consent Preference Updated event, and who added it to my Tracking Plans? Consent Management users see the Segment Consent Preference Updated event automatically added to all existing Tracking Plans after they create their first consent category, or when they create a new Tracking Plan after configuring Consent Management. Segment recommends that you do not remove this event. How do I add Page and Screen events to my Tracking Plan? To consolidate the views in the Schema tab, Segment automatically converts page and screen calls into Page Viewed and Screen Viewed events that appear in the Schema Events view. Segment recommends adding a Page Viewed or Screen Viewed event to your Tracking Plan with any properties you want to validate against. At this time, to validate that a specific named page/screen ( analytics.page('Homepage') | analytics.screen('Home') ) has a specific set of required properties, you will need to use the JSON Schema . How can I see who made changes to my Tracking Plan? Each Tracking Plan includes a Changelog, which shows which changes were made by which users. To view it, open a Tracking Plan, click the … button (also known as the dot-dot-dot, or ellipses menu) next to the Edit Tracking Plan button, and click View Changelog . How many Sources can I connect to a Tracking Plan? The Tracking Plan to Source relationship is a one-to-many relationship. This means you can connect as many Sources to a Tracking Plan as you need. However Segment recommends connecting 1-3 Sources per Tracking Plan, because it’s rare to have more than three Sources that share an identical set of events, especially when tracking events across platforms. For example, many Segment mobile SDKs (iOS and Android) automatically collect events that would not make sense to collect in a web app. Segment doesn’t recommend including events in a Tracking Plan that would never be tracked in a Source. Can I duplicate a Tracking Plan in the Segment UI? You can duplicate Tracking Plans in the Segment web app by following the instructions to copy a tracking plan . You can also use the Public API to copy the underlying JSON schema from one Tracking Plan to another. How do I handle versioning with mobile apps? Segment currently supports the ability to create multiple versions of an event in a Tracking Plan. This is ideal for mobile apps, where a breaking change like adding a new required property to an event could cause all previous app versions on user devices to generate violations. You must manually add a context.protocols.event_version property to the specific track call so that Segment can correctly validate the event against the defined version. Learn more in the Tracking Plan event versioning documentation . How do I handle null property values? In the Tracking Plan editor, click on the data type dropdown for a given property and toggle “Allow Null Values”. Enabling null values means only null values will be accepted for that property. Can I group specific events in a Tracking Plan? Yes. Tracking Plan Labels are an excellent way to organize events in a Tracking Plan by priority, platform, product, or similar metadata for each event. How do I send someone a specific event or group of events to implement? You can search in a Tracking Plan to find a specific event, and then copy the URL for the search results page and share it. You can also filter by label to share a group of events. The person you send the URL to must have access to the Workspace and tracking plan to see the results page. (See the Access Management documentation for more details.) Can I create a master Tracking Plan that supersedes all other Tracking Plans? Yes. Tracking Plan Libraries makes it easy to create groups of events or properties that can be easily imported into multiple Tracking plans. Can I copy a Tracking Plan into a library? No. Unfortunately it’s not yet possible to automatically transfer events from a Tracking Plan to Libraries. To import events into a new event library, import them directly from a source. Can I transfer a Tracking Plan between production and staging environments? Yes. Using the Public API , you can copy the underlying JSON schema from a Tracking Plan in one Workspace to a Tracking Plan in another Workspace. If you discarded events as a part of your original Tracking Plan, you must connect to the same Source and configure identical Schema Controls in your other Workspace so that blocked events behave as expected. Can I connect a Source to more than one Tracking Plan? Unfortunately, Sources cannot be connected to more than one Tracking Plan. If you were able to connect more than one Tracking Plan to a Source, it could create conflict if events overlapped. How do Tracking Plans work? Segment’s code uses built-in logic to verify if an event exists in the Tracking Plan. If an event does not exist, it will follow the configuration the Schema Configuration settings for each source connected to the Tracking Plan. Why are my unplanned properties still getting sent to my destinations even though I’ve set the dropdown to “Omit Properties”? Unplanned property omission is only supported for cloud-mode destinations. Unplanned properties will not be omitted when they’re sent to device-mode destinations. Why do I have two different Tracking Plan IDs? When you access a Tracking Plan, you’ll come across two IDs: tp_ and rs_ . Segment uses the two IDs to identify your Tracking Plan in the two APIs you can use to manage your workspace: the Public API and the Config API . To view the two IDs for your Tracking Plan, navigate to the Tracking Plan you’d like to view the ID for and select the dropdown next to Tracking Plan ID . If you’re using the Public API, you’ll need the ID that starts with tp_ . If you’re using the Config API, you’ll need the ID that starts with rs . How do I import events from a Source Schema into a Tracking Plan? When you first create your Tracking Plan, you can add events from your Source Schema by selecting the Import events from Source button on the Tracking Plan editor page. You can manually add these events after you’ve connected your Source Schema to your Tracking Plan by clicking the (+) next to the event on your Source Schema page. Can I import events from my Source Schema into a Tracking Plan? When you initially create your Tracking Plan, you can import events into it from a Source Schema. Manually add these events by clicking the the (+) next to the event in your Source Schema page after connecting your Tracking Plan. Can I recover a Tracking Plan that was deleted? You cannot recover a deleted Tracking Plan and Segment cannot recover it on your behalf. Please delete Tracking Plans with caution. Protocols Validation What is the difference between Violations Emails and the Violations page in the Segment UI? Violations Daily Digest The Violations Daily Digest is a great way to keep informed of new violations that might be easy to overlook on the Protocols Violations page. The digest sends one email digest per source, every day at approximately 12AM EST. You cannot currently opt in or out of specific sources. The digest contains all violations for that source that are unique in the previous 48 hours. For example, if an event testEvent had violations on the first day of the month, then those violations won’t appear in the digest until the third of the month. The email includes information about the violation to help you track down its source and correct it. It includes the event name and property name fields, the violation type, the number of times that specific type of violation was seen, and the last time it was seen. Protocols Violations Page The Protocols Violations page shows a live count for violations. You can adjust the timeframe to show violations in the last hour, the last 24 hours, or the last seven days. You might see a difference between the count on the Violations page and the count in the Violations email digests. This can happen due to differences between the time periods available (24 hours in in the live page, 48 hours in the daily digest email), and the fact that the digest only shows unique violations. The fields displayed on the Violations page are more detailed than those included in the email digest. Why do I see root listed on my Violations page? You may see violations related to (root). For example: ( root ) Must validate all the schemas // Or ( root ) Must validate \" then \" as \" if \" was valid These violations are related to your common JSON Schema if you’ve applied custom rules. In this instance (root), refers to the top level of the JSON object (Segment event). Protocols Enforcement Why can’t I use the Schema to filter my events? The schema functionality is a reactive way to clean up your data, where the Tracking Plan functionality is a proactive , intentional way to clean and unify all future data. Segment has found that the best data driven companies invest the time required to build strong processes and controls around their data. The investment pays off exponentially. That being said, there are plenty of scenarios where the reactive Schema functionality solves immediate needs for customers. Often times, customers will use both Schema Controls and Tracking Plan functionality across their Segment Sources. For smaller volume Sources with less important data, the Schema functionality often works perfectly. If I enable blocking, what happens to the blocked events? Are events just blocked from specific Destinations or the entire Segment pipeline? Blocked events are blocked from sending to all Segment Destinations, including warehouses and streaming Destinations. When an Event is blocked using a Tracking Plan, it does not count towards your MTU limit. They will, however, count toward your MTU limit if you enable blocked event forwarding in your Source settings. If I omit unplanned properties or properties that generate JSON schema violations, what happens to them? Segment doesn’t store unplanned properties and properties omitted due to JSON Schema Violations in Segment logs. Segment drops omitted properties from the events. You can find the omitted properties in the context.violations object of an event payload. If you forward Violations to a new source, then you can also see the omitted properties in the Violation Generated event under violationField in the properties object. Segment only stores fully blocked events for 30 days. Why am I seeing unplanned properties/traits in the payload when violations are triggered, despite using schema controls to omit them? If you’re seeing unplanned properties/traits in your payload despite using Schema Controls, you might want to select a new degree of blocking controls. Segment’s Schema Controls provide three options to omit properties/traits. Select the one that aligns with your requirements: Standard Schema Controls/”Unplanned Properties/Traits” : Segment checks the names of incoming properties/traits against your Tracking Plan. Standard Schema Controls/”JSON Schema Violations” : Segment checks the names and evaluates the values of properties/traits. This is useful if you’ve specified a pattern or a list of acceptable values in the JSON schema for each Track event listed in the Tracking Plan. Advanced Blocking Controls/”Common JSON Schema Violations” : Segment evaluates incoming events thoroughly, including event names, context field names and values, and the names and values of properties/traits, against the Common JSON schema in your Tracking Plan. Why am I still seeing unplanned properties in my Source Schema when I’ve added the properties to a new version of my Tracking Plan? The source schema only validates events against the oldest event version in a Tracking Plan. If, for example, you have a version 1 and version 2 of your Tracking Plan, the schema only checks against version 1 of your Tracking Plan. Do blocked and discarded events count towards my MTU counts? Blocking events within a Source Schema or Tracking Plan excludes them from API call and MTU calculations, as the events are discarded before they reach the pipeline that Segment uses for calculations. Do warehouse connectors use the data type definitions when creating a warehouse schema? Warehouse connectors don’t use data type definitions for schema creation. The data types for columns are inferred from the first event that comes in from the source. Can I use schema controls to block events forwarded to my source from another source? You can only use schema controls to block events at the point that they are ingested into Segment. When you forward an event that Segment has previously ingested from another source, that event bypasses the pipeline that Segment uses to block events and cannot be blocked a second time. Protocols Transformations Do transformations work with Segment replays? If you create a destination scoped transformation and request a replay for that destination, the transformation will transform events into the destination. Segment doesn’t recommended requesting a replay to resend events to a destination as that will likely result in duplicate events in the destination. Why can’t I create multiple transformations of the same type for the same event? To reduce the risk of creating circular and conflicting transformations, Segment only allows a single transformation to be created for each distinct source, event, destination and type pairing. That means you cannot create two Rename track event transformations for a order_completed event. This eliminates the possibility of different stakeholders creating conflicting transformations to satisfy their own needs. It also simplifies the Transformations list view, making it much easier to sort and filter by source, event, destination, etc. Why can’t I select multiple events or destinations in a single transformation? In early transformations prototypes, Segment allowed users to select multiple events and destinations for a single transformation rule. Segment realized, however, that this created a structure that was impossible to scale, and likely to generate unintended consequences. For example, if Segment allows multiple track events to be selected for a property name change, it’d be possible to create conflicting changes. Instead, by enforcing a single event, Segment can check to see if a transformation rule exists and smartly link you to that rule using a warning. What permissions are required to create and edit transformations? Only workspace admins are allowed to create transformations. What permissions are required to view transformations? All users with Protocols admin or read-only permissions can view transformations. Why can’t Segment support transformations for device-mode destinations? Transformations introduce advanced logic that at scale may impact performance of client-side libraries. If you are interested in testing new functionality which supports device-mode destination transformations in analytics.js, contact your account rep. Are Destination Filters applied before or after my Protocols Transformations? That depends. If you are working with source-level Transformations, the Protocols conversion will come first. If you are dealing with a destination scoped transformation (which is set to only impact data going to a specific destination), Destination Filters will be applied prior to Protocols Transformations. Why do I need Protocols to use transformations? Transformations are but one tool among many to help you improve data quality. Segment highly recommends that all customers interested in improving data quality start with a well defined Tracking Plan. The Tracking Plan serves as a roadmap for how you want to collect data. Without a clear roadmap, it’s nearly impossible to build alignment around how transformations should be used to improve data quality, leading to more data quality issues than it solves. Are transformations applied when using the Event Tester? Transformations are not applied to events sent through the Event Tester . The Event Tester operates independently from the Segment pipeline, focusing solely on testing specific connections to a destination. For a transformation to take effect, the event must be processed through the Segment pipeline. Why am I getting the error “rules must contain less than or equal to 200 items” when using the Public API? Can I increase this limit? This error occurs because there is a limit of 200 rules per API update. This restriction is by design to ensure stable API performance. Segment is not able to increase this limit on your behalf. To work around this, split your update into smaller batches, each with 200 or fewer rules. This page was last modified: 08 Jan 2025 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Protocols Notifications Protocols Tracking Plan Protocols Validation Protocols Enforcement Protocols Transformations Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "underlying",
      "working",
      "connected",
      "clean",
      "correctly",
      "group",
      "labels",
      "applied",
      "block",
      "supported",
      "forwarded",
      "custom",
      "meaning",
      "source",
      "error",
      "tester",
      "transformation",
      "evaluates",
      "master",
      "easiest",
      "notifications",
      "options",
      "between",
      "recover",
      "customers",
      "blocking",
      "aligns",
      "triggered",
      "dropdown",
      "until",
      "excludes",
      "recommend",
      "solely",
      "documentation",
      "makes",
      "stakeholders",
      "category",
      "triggers",
      "which",
      "overlook",
      "entire",
      "differences",
      "improve",
      "alignment",
      "correct",
      "processed",
      "warehouses",
      "contains",
      "counts",
      "variety",
      "among",
      "validates",
      "early",
      "against",
      "increase",
      "unintended",
      "invest",
      "notification",
      "cannot",
      "clicking",
      "toward",
      "order_completed",
      "every",
      "blocked",
      "platforms",
      "helpful",
      "warehouse",
      "where",
      "activity",
      "overlapped",
      "destinations",
      "creating",
      "eliminates",
      "distinct",
      "email",
      "digests",
      "recommends",
      "serves",
      "behave",
      "batches",
      "toggle",
      "works",
      "identical",
      "field",
      "making",
      "stable",
      "cause",
      "track",
      "configuration",
      "context",
      "automatically",
      "quality",
      "emails",
      "incoming",
      "prototypes",
      "appear",
      "should",
      "advanced",
      "relationship",
      "first",
      "create",
      "consolidate",
      "existing",
      "feedback",
      "immediate",
      "event",
      "subscribe",
      "pipeline",
      "still",
      "generated",
      "reach",
      "defined",
      "getting",
      "directly",
      "record",
      "violationfield",
      "traits",
      "groups",
      "permissions",
      "likely",
      "might",
      "names",
      "configure",
      "analytics",
      "change",
      "cloud",
      "around",
      "useful",
      "clear",
      "despite",
      "accepts",
      "selected",
      "standard",
      "scenarios",
      "pattern",
      "contain",
      "roadmap",
      "replay",
      "towards",
      "provide",
      "valid",
      "someone",
      "dealing",
      "recommended",
      "integrate",
      "screen",
      "using",
      "sources",
      "testing",
      "another",
      "hours",
      "proactive",
      "property",
      "strong",
      "websites",
      "month",
      "circular",
      "testevent",
      "related",
      "modified",
      "transfer",
      "results",
      "oldest",
      "share",
      "information",
      "performance",
      "processes",
      "added",
      "store",
      "homepage",
      "data",
      "libraries",
      "validate",
      "common",
      "frequently",
      "limit",
      "import",
      "single",
      "assistance",
      "known",
      "depends",
      "difference",
      "happen",
      "intentional",
      "interested",
      "build",
      "account",
      "inferred",
      "great",
      "drops",
      "object",
      "checks",
      "changelog",
      "acceptable",
      "items",
      "button",
      "consent",
      "investment",
      "rename",
      "stores",
      "please",
      "multiple",
      "count",
      "effect",
      "public",
      "identify",
      "deleted",
      "nearly",
      "conflict",
      "allows",
      "excellent",
      "versioning",
      "filters",
      "required",
      "leading",
      "needs",
      "properties",
      "level",
      "across",
      "api",
      "views",
      "going",
      "requirements",
      "introduce",
      "digest",
      "listed",
      "tools",
      "manually",
      "fewer",
      "protocols",
      "expected",
      "analysis",
      "business",
      "specified",
      "remove",
      "supports",
      "issues",
      "click",
      "visit",
      "forwarding",
      "viewed",
      "improving",
      "easier",
      "reactive",
      "reduce",
      "starts",
      "bypasses",
      "transform",
      "following",
      "there",
      "filter",
      "updated",
      "smaller",
      "about",
      "times",
      "instructions",
      "requesting",
      "under",
      "environments",
      "thoroughly",
      "being",
      "asked",
      "problems",
      "three",
      "possible",
      "previously",
      "timeframe",
      "navigate",
      "within",
      "smartly",
      "types",
      "initially",
      "enforcing",
      "specific",
      "however",
      "notified",
      "number",
      "definitions",
      "operates",
      "tracked",
      "label",
      "omission",
      "select",
      "product",
      "impossible",
      "functionality",
      "different",
      "replays",
      "events",
      "without",
      "platform",
      "editor",
      "never",
      "ideal",
      "enabling",
      "android",
      "currently",
      "alerts",
      "similar",
      "update",
      "logic",
      "destination",
      "validation",
      "allow",
      "included",
      "connect",
      "focusing",
      "transformations",
      "would",
      "delivering",
      "simplifies",
      "third",
      "point",
      "informed",
      "enable",
      "admins",
      "perfectly",
      "given",
      "exists",
      "satisfy",
      "plenty",
      "sending",
      "highly",
      "ensure",
      "omitted",
      "daily",
      "device",
      "includes",
      "occurs",
      "unique",
      "workspace",
      "forward",
      "after",
      "behalf",
      "pairing",
      "thanks",
      "restriction",
      "split",
      "mobile",
      "though",
      "columns",
      "adding",
      "realized",
      "happens",
      "changes",
      "creation",
      "means",
      "result",
      "schema",
      "doesn",
      "enforcement",
      "duplicate",
      "violation",
      "ingested",
      "warning",
      "schemas",
      "person",
      "detailed",
      "violations",
      "start",
      "management",
      "event_version",
      "controls",
      "calculations",
      "streaming",
      "instance",
      "access",
      "unify",
      "versions",
      "generate",
      "converts",
      "check",
      "fields",
      "design",
      "before",
      "preference",
      "because",
      "sense",
      "unplanned",
      "other",
      "library",
      "fully",
      "growth",
      "refers",
      "scale",
      "previous",
      "devices",
      "available",
      "preferences",
      "accepted",
      "ellipses",
      "search",
      "slack",
      "admin",
      "could",
      "breaking",
      "through",
      "client",
      "example",
      "consequences",
      "follow",
      "seven",
      "request",
      "connecting",
      "config",
      "delete",
      "sends",
      "segment",
      "organize",
      "webhook",
      "companies",
      "periods",
      "second",
      "priority",
      "caution",
      "driven",
      "exponentially",
      "equal",
      "contact",
      "important",
      "learn",
      "supersedes",
      "independently",
      "metadata",
      "including",
      "payload",
      "those",
      "configuring",
      "implement",
      "structure",
      "handle",
      "these",
      "started",
      "unfortunately",
      "connectors",
      "possibility",
      "settings",
      "rules",
      "seeing",
      "instead",
      "exist",
      "original",
      "values",
      "calls",
      "built",
      "scoped",
      "their",
      "allowed",
      "impact",
      "approximately",
      "ability",
      "created",
      "version",
      "solves",
      "support",
      "plans",
      "staging",
      "manage",
      "tracking",
      "imported",
      "conversion",
      "shows",
      "conflicting",
      "resend",
      "actions",
      "discarded",
      "degree",
      "displayed",
      "verify",
      "comes",
      "found",
      "selecting",
      "prior",
      "connections",
      "often",
      "questions",
      "adjust",
      "easily",
      "collect",
      "users",
      "volume",
      "named",
      "future",
      "especially",
      "production",
      "details"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/#protocols-validation",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/getting-started/02-simple-install/",
    "title": " A Basic Segment Installation | Segment Documentation",
    "platform": "segment",
    "content": "Home / Getting started / A Basic Segment Installation A Basic Segment Installation On this page Before you begin Create a Segment source Find your write key Installing Segment Test that it’s working Set up your first destination When you implement Segment, you add Segment code to your website, app, or server. This code generates messages based on specific triggers you define. In a basic implementation, the code can be a snippet of JavaScript that you copy and paste into the HTML of a website to track page views. It can also be as complex as Segment calls embedded in a React mobile app to send messages when the app is opened or closed, when the user performs different actions, or when time based conditions are met (for example “ticket reservation expired” or “cart abandoned after 2 hours”). The best way to learn about how Segment works is to see it in action. This tutorial walks you through an installation using one of Segment’s libraries: JavaScript, PHP, or the iOS library. Before you begin Before you start your Segment implementation, you need: A Segment user account and a workspace. If you’re not already part of an organization with a Segment Workspace, you can sign up for a free account and workspace . Access to the code for a basic website, PHP website, or an iOS app. Tip ! If you don’t have any of those things, consider creating a simple GitHub Pages website . Create separate dev and prod sources When you develop and test sources, Segment recommends you to create and use separate sources for each of your environments (production, development, staging) to prevent testing and development activities from filling production systems with invalid data. You can give each source an environment label when you create it, and Segment strongly suggests that you use these labels to sort your sources. When you create a source during the steps below, make sure you enter an environment label. Double-check when you enter write keys for dev and production environments to make sure that you send the right data to the right place. Create a Segment source To create a Segment source: Go to your Segment workspace, and navigate to the Sources catalog . Select your source. You can choose from either the Javascript source , the PHP source , or the iOS source . Click Add Source . Enter a name for the source. Segment recommends that you include the word demo , test , or quickstart in the name so you can easily find and delete this source later. (Optional) Add an Environment label of dev to the source in the Labels field. Segment recommends you do this so that you know this demo source isn’t part of a production installation. (Optional) Add the website URL. Segment provides this field so that you can flag the website being tracked to the source. Segment does not use this URL anywhere else. Find your write key The write key is a unique identifier for a source that tells Segment which source the data comes from, to which workspace the data belongs, and which destinations should receive the data. To find your write key: Go to Connections > Sources and select your source. Click the Settings tab for the source and click API Keys . Make note of or write down your write key, as you’ll need it in the next steps. Any time you change a library’s settings in the Segment App, the write key regenerates. Cloud-sources do not have write keys, as they use a token or key from your account with that service. Cloud-sources have other considerations and aren’t part of this tutorial. Installing Segment Click a tab below to see the tutorial content for the specific library you chose. Javascript quickstart iOS Mobile quickstart PHP quickstart Step 1: Copy the Snippet Navigate Connections > Sources > JavaScript in the Segment app and copy the snippet from the JavaScript Source overview page and paste it into the <head> tag of your site. That snippet loads Analytics.js onto the page asynchronously , so it won’t affect your page load speed. Once the snippet runs on your site, you can turn on destinations from the destinations page in your workspace and data starts loading on your site automatically. Note: If you only want the most basic Google Analytics setup you can stop reading right now. You’re done! Just toggle on Google Analytics from the Segment App. The Segment snippet version history available on GitHub . Segment recommends that you use the latest snippet version whenever possible. Step 2: Identify Users The identify method is how you tell Segment who the current user is. It includes a unique User ID and any optional traits you know about them. You can read more about it in the identify method reference . Note: You don’t need to call identify for anonymous visitors to your site. Segment automatically assigns them an anonymousId , so just calling page and track works just fine without identify . Here’s an example of what a basic call to identify might look like: analytics . identify ( ' f4ca124298 ' , { name : ' Michael Brown ' , email : ' mbrown@example.com ' }); This identifies Michael by his unique User ID (in this case, f4ca124298 , which is what you know him by in your database) and labels him with name and email traits. When you put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. To do that, Segment recommends that you use a backend template to inject an identify call into the footer of every page of your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to call identify if your unique identifier ( userId ) is not known. Depending on your templating language, your actual identify call might look something like this: analytics . identify ( ' {{user.id}} ' , { name : ' {{user.fullname}} ' , email : ' {{user.email}} ' }); With that call in your page footer, you successfully identify every user that visits your site. Note: If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it. Step 3: Track Actions The track method is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. You can read more about track in the track method reference . Here’s an example of what a call to track might look like when a user signs up: analytics . track ( ' Signed Up ' , { plan : ' Enterprise ' }); This example shows that your user triggered the Signed Up event and chose your hypothetical 'Enterprise' plan. Properties can be anything you want to record, for example: analytics . track ( ' Article Bookmarked ' , { title : ' Snow Fall ' , subtitle : ' The Avalanche at Tunnel Creek ' , author : ' John Branch ' }); If you’re just getting started, some of the events you should track are events that indicate the success of your site, like Signed Up , Item Purchased or Article Bookmarked . Segment recommends that you track a few important events as you can always add more later. Once you add a few track calls, you’re done with setting up Segment. You successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment App. Step 1: Install the SDK To install Analytics-iOS, Segment recommends you to use CocoaPods , because it allows you to create a build with specific bundled destinations, and because it makes it simple to install and upgrade. 1) Add the Analytics dependency to your Podfile by adding the following line: pod 'Analytics' , '~> 3.0' 2) In your application delegate’s - application:didFinishLaunchingWithOptions: method, set up the SDK like so: SEGAnalyticsConfiguration * configuration = [ SEGAnalyticsConfiguration configurationWithWriteKey : @\"YOUR_WRITE_KEY\" ]; configuration . trackApplicationLifecycleEvents = YES ; // Enable this to record certain application events automatically! configuration . recordScreenViews = YES ; // Enable this to record screen views automatically! [ SEGAnalytics setupWithConfiguration : configuration ]; You don’t need to use initialization config parameters to track lifecycle events ( Application Opened , Application Installed , Application Updated ) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events. 3) Import the SDK in the files that you use it by adding the following line: #import <Analytics/SEGAnalytics.h> Bundling Client Side SDKs To keep the Segment SDK lightweight, the Analytics pod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the data from Segment . Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions on how to bundle the destination tools . Now that the SDK is installed and set up, you’re ready to start making calls. Step 2: Identify Users The identify method is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in the identify reference . Here’s an example of what a basic call to identify might look like: [[ SEGAnalytics sharedAnalytics ] identify : @\"f4ca124298\" traits: @{ @\"name\" : @\"Michael Brown\" , @\"email\" : @\"mbrown@example.com\" }]; This call identifies Michael by his unique User ID ( f4ca124298 , which is the one you know him by in your database) and labels him with name and email traits. Note: When you put that code in your iOS app, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. Step 3: Track Actions The track method is how you tell Segment about the actions your users are performing in your app. Every action triggers what we call an “event”, which can also have associated properties. You can read more about track in the track method reference . The Segment iOS SDK can automatically track a few important common events, such as Application Installed , Application Updated , and Application Opened . You can enable this option during initialization by adding the following lines: SEGAnalyticsConfiguration * configuration = [ SEGAnalyticsConfiguration configurationWithWriteKey : @\"YOUR_WRITE_KEY\" ]; configuration . trackApplicationLifecycleEvents = YES ; [ SEGAnalytics setupWithConfiguration : configuration ]; You should also track events that indicate success in your mobile app, like Signed Up , Item Purchased , or Article Bookmarked . Segment recommends that you track a few important events as you can always add more later. Here’s what a track call might look like when a user signs up: [[ SEGAnalytics sharedAnalytics ] track : @\"Signed Up\" properties: @{ @\"plan\" : @\"Enterprise\" }]; This tells us that your user triggered the Signed Up event, and chose your hypothetical 'Enterprise' plan. Properties can be anything you want to record, for example: [[ SEGAnalytics sharedAnalytics ] track : @\"Article Bookmarked\" properties: @{ @\"title\" : @\"Snow Fall\" , @\"subtitle\" : @\"The Avalanche at Tunnel Creek\" , @\"author\" : @\"John Branch\" }]; Once you’ve added a few track calls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace. Step 1: Download the library To install the library: 1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user, you can use this .) git clone https://github.com/segmentio/analytics-php /my/application/folders/ 2) Add the following to your PHP script to load the Segment analytics library in your code: require_once ( \"/path/to/analytics-php/lib/Segment.php\" ); use Segment\\Segment ; 3) In your initialization script, make the following call (In the example, Segment first renames this module to Analytics for convenience): # Set up our Segment tracking and # alias to Analytics for convenience class_alias ( 'Segment' , 'Analytics' ); Segment :: init ( \"YOUR_WRITE_KEY\" ); 4) Replace YOUR_WRITE_KEY with the actual write key, which you can find in Segment under your project settings. Otherwise, all that data goes straight to /dev/null . You only need to call init once when your php file is requested. All of your files then have access to the same Analytics client. Note: The default PHP consumer is the libcurl consumer . If this is not working well for you, or if you have a high-volume project, you might try one of Segment’s other consumers like the fork-curl consumer . Step 2: Identify Users The identify method is how you tell Segment who the current user is. It includes a unique User ID and any optional traits that you might know about them. Here’s what a basic call to identify might look like: Segment :: identify ( array ( \"userId\" => \"f4ca124298\" , \"traits\" => array ( \"name\" => \"Michael Brown\" , \"email\" => \"mbrown@example.com\" ) )); This identifies Michael by his unique User ID (in this case, f4ca124298 , which is what you know him by in your database) and labels him with name and email traits. Note: When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. The easiest way in PHP is to keep a $user variable in memory. Segment :: identify ( array ( \"userId\" => $user -> id , \"traits\" => array ( \"name\" => $user -> fullname , \"email\" => $user -> email ) )); With that call on the page, you’re now identifying every user that visits your site. If you only want to use a basic CRM set up, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it. Step 3: Track Actions The track method is how you tell Segment about the actions your users are performing on your site. Every action triggers what Segment calls an “event”, which can also have associated properties. Here’s what a call to track might look like when a user signs up: Segment :: track ( array ( \"userId\" => \"f4ca124298\" , \"event\" => \"Signed Up\" , \"properties\" => array ( \"plan\" => \"Enterprise\" ) )); This tells us that the user triggered the Signed Up event, and chose your hypothetical Enterprise plan. Properties can be anything you want to record, for example: Segment :: track ( array ( \"userId\" => \"f4ca124298\" , \"event\" => \"Article Bookmarked\" , \"properties\" => array ( \"title\" => \"Snow Fall\" , \"subtitle\" => \"The Avalanche at Tunnel Creek\" , \"author\" => \"John Branch\" ) )); If you’re just getting started, some of the events you should track are events that indicate the success of your site, like Signed Up , Item Purchased or Article Bookmarked . To get started, Segment recommends you to track track a few important events as you can always add more later. Step 4: Flush the data Call the Segment flush() method. This manually sends all the queued call data to make sure it makes it to the Segment servers. This is normally done automatically by the runtime, but some PHP installations won’t do it for you, so it’s worth calling at the end of your script, just to be safe. Segment :: flush (); You’ve successfully installed PHP tracking. Now you’re ready to turn on any destination from the Segment App. Test that it’s working Once you’ve set up your Segment library, and instrumented at least one call, you can look at the Debugger tab for the Source to check that it produces data as you expected. The Source Debugger is a real-time tool that helps you confirm that API calls made from your website, mobile app, or servers arrive at your Segment Source, so you can quickly see how calls are received by your Segment source, so you can troubleshoot quickly without having to wait for data processing. The Debugger is separate from your workspace’s data pipeline, and is not an exhaustive view of all the events ever sent to your Segment workspace. The Debugger only shows a sample of the events that the Source receives in real time, with a cap of 500 events. The Debugger is a great way to test specific parts of your implementation to validate that events are being fired successfully and arriving to your Source. Tip : To see a more complete view of all your events, you might consider setting up either a warehouse or an S3 destination . The Debugger shows a live stream of sampled events arriving at the Source, but you can also toggle from “Live” to “Pause” to stop the stream and prevent it from displaying new events. Events continue to arrive to your Source while you Pause the stream, they just are not displayed. You can search on any information you know is available in an event payload to search in the Debugger and show only matching payloads. You can also use advanced search options to limit the results to a specific event. Two views are available when viewing a payload: The Pretty view is a recreation of the API call you made that was sent to Segment. The Raw view is the complete JSON object Segment received from the calls you sent. These calls include all the details about what is being tracked: timestamps, properties, traits, ids, and contextual information Segment automatically collects the moment the data is sent. Set up your first destination Once you’re satisfied that data is arriving from your new source, it’s time to set up your first destination! As long as you have page or screen data coming from the source, you can quickly enable Google Analytics to look at the page view statistics. If you don’t have a Google Analytics account, you can either set up a free account, or look at the Destination Catalog for a different destination to enable. You’ll need a tracking ID for Google Analytics (either a “website” or “serverside” tracking ID), or another API key if you’re substituting another destination. Make a note of this ID or key as you’ll need it to connect your destination. To set up your first destination: Go to your Segment workspace, click Destinations , and click Add Destination to go to the Catalog . Search for the destination you want to add. In this case, search for Google Analytics . Click the tile for the destination to see information about it. Click Configure Google Analytics . Select the source that you set up earlier in this quickstart, then click Confirm Source . On the settings page, locate the setting line for the tracking ID or other API key to connect to your destination. Enter the ID or API key and click Save . Click Back to Destination , then click the toggle to enable the destination. Congratulations! Data is now flowing from the source you set up, to the first destination. Do some test browsing on your site or app, then log in to your downstream tool to see the data in place. You can click around and load pages to see your Segment calls in action, watch them arrive in the Debugger, and see them arrive in the destination tool. Note: When you’re done with this test source and destination, you can delete them. This prevents you from getting unplanned “demo” data in your production environment later. back What is Segment The basics of the Segment platform and what you can do with it. next Planning a Full Installation Think through your goals, plan your calls, and set yourself up for success. This page was last modified: 13 Aug 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Before you begin Create a Segment source Find your write key Installing Segment Test that it’s working Set up your first destination Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "working",
      "website",
      "javascript",
      "configurationwithwritekey",
      "labels",
      "performing",
      "moment",
      "forwarded",
      "source",
      "libcurl",
      "filling",
      "database",
      "project",
      "array",
      "author",
      "title",
      "easiest",
      "options",
      "closed",
      "triggered",
      "belongs",
      "anonymous",
      "define",
      "documentation",
      "quickstart",
      "server",
      "makes",
      "arrive",
      "identifying",
      "templating",
      "triggers",
      "which",
      "think",
      "composer",
      "improve",
      "suggests",
      "simple",
      "installing",
      "variable",
      "separate",
      "alias",
      "lifecycle",
      "latest",
      "calling",
      "pages",
      "tunnel",
      "yourself",
      "option",
      "implementation",
      "include",
      "didfinishlaunchingwithoptions",
      "clone",
      "content",
      "collects",
      "debugger",
      "certain",
      "takes",
      "mbrown",
      "identified",
      "goals",
      "every",
      "choose",
      "bookmarked",
      "helpful",
      "warehouse",
      "seganalyticsconfiguration",
      "where",
      "destinations",
      "actual",
      "creating",
      "email",
      "while",
      "browsing",
      "recommends",
      "article",
      "desired",
      "installs",
      "toggle",
      "receives",
      "normally",
      "works",
      "bundling",
      "field",
      "making",
      "during",
      "track",
      "fired",
      "fullname",
      "configuration",
      "install",
      "document",
      "automatically",
      "continue",
      "successfully",
      "development",
      "delegate",
      "indicate",
      "upgrade",
      "should",
      "advanced",
      "first",
      "complex",
      "f4ca124298",
      "pause",
      "create",
      "feedback",
      "write",
      "enter",
      "queued",
      "event",
      "actually",
      "pipeline",
      "sample",
      "payloads",
      "getting",
      "record",
      "locate",
      "traits",
      "provides",
      "affect",
      "creek",
      "might",
      "configure",
      "analytics",
      "change",
      "cloud",
      "around",
      "react",
      "congratulations",
      "planning",
      "system",
      "troubleshoot",
      "signed",
      "things",
      "application",
      "exhaustive",
      "folders",
      "integrate",
      "using",
      "testing",
      "basic",
      "sources",
      "screen",
      "hours",
      "another",
      "websites",
      "additional",
      "modified",
      "download",
      "results",
      "steps",
      "whenever",
      "already",
      "dependency",
      "information",
      "servers",
      "recordscreenviews",
      "added",
      "avalanche",
      "data",
      "service",
      "libraries",
      "assigns",
      "later",
      "validate",
      "timestamps",
      "common",
      "github",
      "podfile",
      "complete",
      "limit",
      "token",
      "import",
      "identifies",
      "assistance",
      "matter",
      "snippet",
      "otherwise",
      "known",
      "account",
      "build",
      "great",
      "object",
      "recreation",
      "method",
      "place",
      "depending",
      "viewing",
      "class_alias",
      "setupwithconfiguration",
      "repository",
      "identify",
      "convenience",
      "subtitle",
      "allows",
      "logged",
      "sharedanalytics",
      "either",
      "properties",
      "api",
      "views",
      "consumers",
      "regenerates",
      "tools",
      "manually",
      "expected",
      "bundled",
      "replace",
      "strongly",
      "prevent",
      "sampled",
      "click",
      "expired",
      "pretty",
      "visit",
      "basics",
      "memory",
      "lines",
      "starts",
      "identifier",
      "following",
      "updated",
      "embedded",
      "about",
      "instructions",
      "contextual",
      "under",
      "environments",
      "signs",
      "develop",
      "being",
      "problems",
      "consider",
      "directory",
      "possible",
      "setting",
      "bundle",
      "worth",
      "navigate",
      "michael",
      "variables",
      "hypothetical",
      "stream",
      "loading",
      "speed",
      "produces",
      "specific",
      "tracked",
      "messages",
      "label",
      "select",
      "invalid",
      "below",
      "coded",
      "different",
      "displaying",
      "least",
      "events",
      "without",
      "platform",
      "consumer",
      "flush",
      "inject",
      "currently",
      "earlier",
      "installed",
      "destination",
      "connect",
      "lands",
      "visits",
      "downstream",
      "optional",
      "ticket",
      "enable",
      "seganalytics",
      "files",
      "sending",
      "setup",
      "highly",
      "matching",
      "language",
      "device",
      "includes",
      "accept",
      "unique",
      "substituting",
      "require_once",
      "quickly",
      "workspace",
      "salesforce",
      "after",
      "arriving",
      "https",
      "thanks",
      "google",
      "anonymousid",
      "mobile",
      "adding",
      "means",
      "considerations",
      "parts",
      "chose",
      "activities",
      "performs",
      "installations",
      "userid",
      "start",
      "renames",
      "footer",
      "brown",
      "walks",
      "statistics",
      "received",
      "access",
      "installation",
      "script",
      "check",
      "double",
      "before",
      "reading",
      "initialization",
      "based",
      "watch",
      "organization",
      "because",
      "tutorial",
      "opened",
      "unplanned",
      "other",
      "library",
      "growth",
      "associated",
      "generates",
      "enterprise",
      "require",
      "cocoapods",
      "available",
      "search",
      "flowing",
      "systems",
      "through",
      "client",
      "example",
      "ready",
      "catalog",
      "request",
      "helps",
      "trait",
      "reservation",
      "overview",
      "config",
      "delete",
      "sends",
      "segment",
      "conditions",
      "right",
      "abandoned",
      "confirm",
      "loads",
      "module",
      "receive",
      "success",
      "coming",
      "contact",
      "purchased",
      "important",
      "learn",
      "payload",
      "those",
      "implement",
      "current",
      "these",
      "something",
      "started",
      "lightweight",
      "processing",
      "settings",
      "straight",
      "having",
      "instead",
      "history",
      "visitors",
      "cases",
      "branch",
      "prevents",
      "always",
      "values",
      "calls",
      "segmentio",
      "environment",
      "satisfied",
      "serverside",
      "represent",
      "trackapplicationlifecycleevents",
      "version",
      "staging",
      "support",
      "tracking",
      "backend",
      "begin",
      "action",
      "instrumented",
      "default",
      "shows",
      "asynchronously",
      "reference",
      "actions",
      "requested",
      "comes",
      "displayed",
      "connections",
      "tells",
      "intercom",
      "questions",
      "template",
      "runtime",
      "easily",
      "parameters",
      "collect",
      "users",
      "volume",
      "anywhere",
      "anything",
      "your_write_key",
      "skips",
      "paste",
      "production",
      "details"
    ],
    "howto_steps": [
      "application:didFinishLaunchingWithOptions: method, set up the SDK like so: SEGAnalyticsConfiguration",
      "configuration = [ SEGAnalyticsConfiguration configurationWithWriteKey : @\"YOUR_WRITE_KEY\" ]; configuration . trackApplicationLifecycleEvents = YES ; // Enable this to record certain application events automatically! configuration . recordScreenViews = YES ; // Enable this to record screen views automatically! [ SEGAnalytics setupWithConfiguration : configuration ]; You don’t need to use initialization config parameters to track lifecycle events ( Application Opened , Application Installed , Application Updated ) and screen views automatically, but Segment highly recommends that you do, so you can start off already tracking some important core events. 3) Import the SDK in the files that you use it by adding the following line: #import <Analytics/SEGAnalytics.h> Bundling Client Side SDKs To keep the Segment SDK lightweight, the Analytics pod only installs the Segment library. This means all of the data goes first to Segment’s servers, and is then forwarded to any destination tools which accept the data from Segment . Some destinations don’t accept data from the Segment servers, and instead require that you collect the data from the device. In these cases you must bundle some additional destination code with the Segment SDK. This document skips over this part, but you can see the instructions on how to bundle the destination tools . Now that the SDK is installed and set up, you’re ready to start making calls. Step 2: Identify Users The identify method is how you tell Segment who the current user is. It takes a unique User ID, and any optional traits you know about them. You can read more about it in the identify reference . Here’s an example of what a basic call to identify might look like: [[ SEGAnalytics sharedAnalytics ] identify : @\"f4ca124298\" traits: @{ @\"name\" : @\"Michael Brown\" , @\"email\" : @\"mbrown@example.com\" }]; This call identifies Michael by his unique User ID ( f4ca124298 , which is the one you know him by in your database) and labels him with name and email traits. Note: When you put that code in your iOS app, you need to replace those hard",
      "configuration = [ SEGAnalyticsConfiguration configurationWithWriteKey : @\"YOUR_WRITE_KEY\" ]; configuration . trackApplicationLifecycleEvents = YES ; [ SEGAnalytics setupWithConfiguration : configuration ]; You should also track events that indicate success in your mobile app, like Signed Up , Item Purchased , or Article Bookmarked . Segment recommends that you track a few important events as you can always add more later. Here’s what a track call might look like when a user signs up: [[ SEGAnalytics sharedAnalytics ] track : @\"Signed Up\" properties: @{ @\"plan\" : @\"Enterprise\" }]; This tells us that your user triggered the Signed Up event, and chose your hypothetical 'Enterprise' plan. Properties can be anything you want to record, for example: [[ SEGAnalytics sharedAnalytics ] track : @\"Article Bookmarked\" properties: @{ @\"title\" : @\"Snow Fall\" , @\"subtitle\" : @\"The Avalanche at Tunnel Creek\" , @\"author\" : @\"John Branch\" }]; Once you’ve added a few track calls, you’re all set. You successfully instrumented your app, and can enable destinations from your Segment workspace. Step 1: Download the library To install the library: 1) Clone the repository from GitHub into your desired application directory. (If you’re a composer user, you can use this .) git clone https://github.com/segmentio/analytics"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/#the-source-debugger",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/segment-app/iam/",
    "title": " Identity & Access Management Overview | Segment Documentation",
    "platform": "segment",
    "content": "Home / Segment app / Identity & Access Management Overview Identity & Access Management Overview Free x Team x Business ✓ Add-on x ? Advanced Access Management is available for all Business plans. See the available plans , or contact Support . On this page Exporting a workspace’s user list Twilio Unified Login Quick links Segment’s access management tools let Workspace Owners manage which users can access different parts of their Segment workspaces. The Access Management page has three tabs: Users (team members) , User Groups , and Tokens . Access settings are applied at the workspace level. A Segment user can have access to one or more workspaces and can have different roles in each workspace.\nUsers access their Segment account with either email/password credentials, their Twilio credentials , or by using Single Sign On . Exporting a workspace’s user list Workspace Owners can download a CSV list of users who have access to a specific workspace (including their roles) from the Access Management page in the Segment app. You can select a user in the table to see their roles . Check out the Roles documentation for more details. Twilio Unified Login With Twilio Unified Login, Twilio users can use their Twilio email, password, and authentication settings to access several Twilio products, including Twilio Messaging, SendGrid, and Segment. You can also use Sign up With Google to create your Twilio account. Once you link your Segment account to your Twilio credentials, you can access Segment directly from the Twilio console using the Twilio Product Switcher . Twilio Sign Up Segment invitations and sign ups that are redirected to Twilio’s sign up page must adhere to Twilio’s minimum password and 2FA requirements . To learn more, view Twilio’s Account Management documentation. Any existing Segment user must adhere to existing password requirements and 2FA settings set at the Workspace level. Twilio Product Switcher You can access Segment from the Twilio Console using the Product Switcher. For more information, view the Twilio support article Getting Started with the Unified Login and Product Switcher . User settings Twilio Unified Login users can manage their Segment user settings, including name, email, password, and 2FA settings, directly in their Twilio account. To learn more about Twilio’s user and password policies, review Twilio’s Account Management documentation. Segment Users and SSO/SCIM Existing Segment users can still use their credentials to access Segment. Segment continues to support SSO and SCIM, as users who need to access an SSO enabled workspace will be directed to authenticate through the configured Identity Provider. Quick links Invite a team member to your workspace Create a User Group Update a team member’s access Remove a team member from a workspace Add a new user with Single Sign On Invite and manage workspace members Learn how to add members to your workspace, and manage their permissions. Organize Users with User Groups Learn manage workspace members in bulk. This page was last modified: 22 Feb 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Exporting a workspace’s user list Twilio Unified Login Quick links Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "conceptual",
    "keywords": [
      "getting",
      "directly",
      "access",
      "invite",
      "minimum",
      "group",
      "visit",
      "applied",
      "groups",
      "permissions",
      "check",
      "configured",
      "analytics",
      "change",
      "about",
      "easiest",
      "identity",
      "growth",
      "exporting",
      "problems",
      "three",
      "available",
      "authenticate",
      "documentation",
      "through",
      "review",
      "directed",
      "workspaces",
      "which",
      "integrate",
      "specific",
      "credentials",
      "using",
      "websites",
      "improve",
      "request",
      "members",
      "overview",
      "download",
      "modified",
      "select",
      "product",
      "links",
      "segment",
      "information",
      "organize",
      "different",
      "table",
      "invitations",
      "data",
      "contact",
      "continues",
      "update",
      "console",
      "learn",
      "adhere",
      "including",
      "single",
      "sendgrid",
      "these",
      "assistance",
      "started",
      "messaging",
      "helpful",
      "account",
      "settings",
      "email",
      "switcher",
      "article",
      "twilio",
      "their",
      "enabled",
      "quick",
      "products",
      "tokens",
      "password",
      "manage",
      "redirected",
      "login",
      "support",
      "plans",
      "policies",
      "workspace",
      "roles",
      "thanks",
      "google",
      "authentication",
      "member",
      "mobile",
      "provider",
      "either",
      "level",
      "advanced",
      "create",
      "requirements",
      "questions",
      "existing",
      "parts",
      "feedback",
      "tools",
      "users",
      "several",
      "owners",
      "business",
      "unified",
      "still",
      "management",
      "remove",
      "details"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/segment-app/iam/concepts/#team-members",
    "title": " Access Management Concepts | Segment Documentation",
    "platform": "segment",
    "content": "Home / Segment app / Iam / Access Management Concepts Access Management Concepts Free x Team x Business ✓ Add-on x ? Advanced Access Management is available for all Business plans. See the available plans , or contact Support . On this page Team Members User Groups Tokens Resources Labels Team Members A Segment Team Member is an individual with access to a workspace. A Segment user can be associated with one or more workspaces, either as an owner or member of each.\nCheck out the roles documentation for a complete list of roles. The user session for a Segment Team Member is 7 days. Team Members in a HIPAA eligible workspace have a 15 minute user session across all workspaces. If you are a Team Member in a HIPAA eligible workspace and want to access a non-HIPAA eligible workspace with a 7 day user session, you can create an alias (for example name+workspace@gmail.com ). User Groups A User Group is a set of Team Members with a set of shared policies. A Segment Team Member can be a member of one or many Groups. All roles in the Segment App are additive, which means that group membership can be assigned in addition to individual roles for a single team member. For example, a single user could inherit roles from a Group definition AND have access to additional resources through individually assigned roles. Tokens You can generate tokens to programmatically access Segment resources using the Segment Public API . Resources Resources are the building blocks of Segment, and represent the different parts of your Segment deployment to which you can grant access. These include: Workspaces Sources Destinations Warehouses Spaces Protocols Tracking Plans Labels Workspace owners can use Labels to grant users access to groups of resources. When you add a Label to a Source or Spaces, any users who are granted access to that Label gain access to those resources. To create or configure labels, go to the Labels tab in your workspace settings. Only workspace Owners can manage labels for the entire workspace. Quick Links: Label-based Access Management Labels Best Practices This page was last modified: 23 Oct 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Team Members User Groups Tokens Resources Labels Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "conceptual",
    "keywords": [
      "assigned",
      "access",
      "visit",
      "group",
      "labels",
      "groups",
      "generate",
      "check",
      "source",
      "configure",
      "based",
      "analytics",
      "change",
      "easiest",
      "session",
      "growth",
      "eligible",
      "spaces",
      "additive",
      "problems",
      "associated",
      "available",
      "documentation",
      "owner",
      "could",
      "through",
      "blocks",
      "example",
      "workspaces",
      "which",
      "integrate",
      "entire",
      "using",
      "websites",
      "sources",
      "improve",
      "additional",
      "request",
      "members",
      "label",
      "modified",
      "alias",
      "links",
      "practices",
      "segment",
      "inherit",
      "deployment",
      "warehouses",
      "different",
      "include",
      "building",
      "data",
      "contact",
      "membership",
      "shared",
      "complete",
      "single",
      "those",
      "individual",
      "these",
      "assistance",
      "started",
      "helpful",
      "resources",
      "destinations",
      "account",
      "granted",
      "settings",
      "grant",
      "quick",
      "concepts",
      "individually",
      "tokens",
      "represent",
      "definition",
      "support",
      "plans",
      "manage",
      "policies",
      "public",
      "workspace",
      "tracking",
      "roles",
      "thanks",
      "member",
      "mobile",
      "either",
      "gmail",
      "across",
      "api",
      "advanced",
      "hipaa",
      "means",
      "create",
      "questions",
      "parts",
      "addition",
      "feedback",
      "tools",
      "programmatically",
      "users",
      "protocols",
      "owners",
      "business",
      "minute",
      "management"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/segment-app/iam/membership/#team-management-with-single-sign-on",
    "title": " Manage Workspace Access | Segment Documentation",
    "platform": "segment",
    "content": "Home / Segment app / Iam / Manage Workspace Access Manage Workspace Access Free x Team x Business ✓ Add-on x ? Advanced Access Management is available for all Business plans. See the available plans , or contact Support . On this page Invite a new team member Change a team member’s access Create a new User Group Add a team member to a User Group Remove a team member from a User Group Remove a team member from your workspace Team Management with Single Sign On Request Access Remove invalid or expired Invite This page explains how to add Team Members and User Groups to your team’s workspace, how to assign them roles , and how to remove them. Note : Only Workspace Owners can change a workspace’s Access Management settings. Invite a new team member Note : Workspaces that are on Free or Team plans can only grant the workspace owner and source admin roles. Navigate to the Workspace settings then to Access management . (Only Workspace owners can access this section.) Click Invite Team Member . Enter the user’s email address and choose their roles, OR assign them to a user group (if available). Select the roles to grant to the user, and choose any specific resources to grant them access to. See the Roles documentation for more information. Change a team member’s access Navigate to the Workspace settings > Access management and click the Users tab. Enter the user’s name or email to search for their member record. Review the current permissions in the table. Click the member to see details. Select or deselect roles, and choose the specific resources to grant access to. Tip : You can also grant the role for all current and future resources. For admin roles, this includes the ability to create new resources. Create a new User Group Workspace Owners can manage permissions for groups of team members who should have similar access using “user groups”. Navigate to the Workspace settings > Access management and click the Groups tab. Click Create User Group . Enter a name for the group. Select or deselect roles, and choose the specific resources to grant the group access to. Add team members to the group.\nYou can search by name or email to locate the team member(s). Review the group permissions in the panel on the right, and click Create User Group to save the new group. Add a team member to a User Group You can make changes to group membership from two places in the Segment App: From the Edit Team Member page (the user’s individual access page), and from the Edit User Group page, where you can see all members of the group. To add a team member from the Edit Team Member page: Navigate to the Workspace settings > Access management and click the Members tab. Select the team member you would like to add to the group. Click Add User Group . Select the user group(s) to add the team member to. Click Save . Tip : This method is best when adding a single team member to one or more user groups. To add a team member from the Edit User Group page: Navigate to the Workspace settings > Access management and click the Groups tab. Select the User Group you want to add new users to. Click Edit User Group in the panel on the right. Click the Members tab and click + Add . Add team members to the group. Search by name or email to locate the team member(s). Click Save . Tip : This method is best when adding more than one user to a single user group at the same time Remove a team member from a User Group Navigate to the Workspace settings > Access management and click the Groups tab. Select the User Group you would like to modify. Click Edit User Group in the panel on the right. Navigate to the Members tab and select the team members you would like to remove. Click Save . Remove a team member from your workspace Open the member details and click Remove Team Member at the top. Team Management with Single Sign On If you are on a Business plan and choose to use Single Sign On (SSO), you grant implicit access to your workspace by assigning team members access to Segment from your identity provider. By default, you grant these users minimal workspace access . Segment supports “Just-In-Time” user provisioning using SSO. Any users with access to the application as defined in your IDP can seamlessly create a Segment account when they first log in. By default, all automatically-provisioned users created this way are created as Workspace Members with Minimal Workspace Access. Once they have been created, Workspace Owners can update these users’ access from the Access Management page in the Segment App. Segment does not support programmatic de-provisioning at this time. However, if your workspace uses SSO, a user that cannot authenticate to your IDP cannot view or edit any of your workspaces or their contents. Request Access If you are a workspace member , you might encounter a section of the Segment App that you do not have access to view. If you need expanded permissions, you can request access directly in the Segment App. Once submitted, Access requests are sent to all workspace owners by email. To review an access request, workspace owners click the link in the access request email to go to their workspace’s Access Management Settings. The requestor’s access request message appears on the Segment Access Management page, and the workspace owner can adjust the user’s permissions. The access request message disappears after the permissions are updated. Remove invalid or expired Invite When you send an invitation to an incorrect email address or the token included in the email invite link expires, the invite might still show up as “Invite Pending” in the Segment App. In these cases, you can revoke the invite to remove it and resend the invite if needed. The invitation will expire within a few days. Therefore, if a user accepts an invite with an expired link, Segment does not grant them access. To revoke invite: Navigate to the Workspace settings > Access management Click on the invite that you would like to remove, which also shows Invite Pending Click Edit Invite in the panel on the right. Click the Revoke Invite on the top right side to remove the invite This page was last modified: 03 Aug 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Invite a new team member Change a team member’s access Create a new User Group Add a team member to a User Group Remove a team member from a User Group Remove a team member from your workspace Team Management with Single Sign On Request Access Remove invalid or expired Invite Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "defined",
      "directly",
      "access",
      "invite",
      "group",
      "expired",
      "click",
      "record",
      "locate",
      "visit",
      "groups",
      "permissions",
      "provisioning",
      "incorrect",
      "source",
      "might",
      "expanded",
      "appears",
      "analytics",
      "section",
      "change",
      "updated",
      "programmatic",
      "disappears",
      "accepts",
      "easiest",
      "identity",
      "growth",
      "invitation",
      "problems",
      "available",
      "search",
      "authenticate",
      "admin",
      "navigate",
      "documentation",
      "seamlessly",
      "owner",
      "application",
      "within",
      "contents",
      "review",
      "workspaces",
      "assigning",
      "which",
      "specific",
      "using",
      "however",
      "integrate",
      "websites",
      "improve",
      "request",
      "requests",
      "members",
      "encounter",
      "assign",
      "modified",
      "select",
      "invalid",
      "segment",
      "information",
      "provisioned",
      "table",
      "right",
      "revoke",
      "data",
      "message",
      "therefore",
      "contact",
      "similar",
      "update",
      "membership",
      "cannot",
      "token",
      "submitted",
      "included",
      "single",
      "individual",
      "pending",
      "current",
      "these",
      "address",
      "assistance",
      "started",
      "choose",
      "would",
      "helpful",
      "resources",
      "where",
      "account",
      "requestor",
      "settings",
      "cases",
      "email",
      "grant",
      "implicit",
      "their",
      "method",
      "places",
      "expires",
      "ability",
      "created",
      "panel",
      "includes",
      "manage",
      "support",
      "plans",
      "workspace",
      "after",
      "roles",
      "deselect",
      "modify",
      "thanks",
      "member",
      "automatically",
      "minimal",
      "default",
      "mobile",
      "shows",
      "provider",
      "resend",
      "expire",
      "adding",
      "changes",
      "needed",
      "should",
      "advanced",
      "first",
      "create",
      "questions",
      "adjust",
      "explains",
      "feedback",
      "tools",
      "enter",
      "users",
      "future",
      "owners",
      "business",
      "still",
      "management",
      "remove",
      "supports",
      "details"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/segment-app/iam/concepts/#user-groups",
    "title": " Access Management Concepts | Segment Documentation",
    "platform": "segment",
    "content": "Home / Segment app / Iam / Access Management Concepts Access Management Concepts Free x Team x Business ✓ Add-on x ? Advanced Access Management is available for all Business plans. See the available plans , or contact Support . On this page Team Members User Groups Tokens Resources Labels Team Members A Segment Team Member is an individual with access to a workspace. A Segment user can be associated with one or more workspaces, either as an owner or member of each.\nCheck out the roles documentation for a complete list of roles. The user session for a Segment Team Member is 7 days. Team Members in a HIPAA eligible workspace have a 15 minute user session across all workspaces. If you are a Team Member in a HIPAA eligible workspace and want to access a non-HIPAA eligible workspace with a 7 day user session, you can create an alias (for example name+workspace@gmail.com ). User Groups A User Group is a set of Team Members with a set of shared policies. A Segment Team Member can be a member of one or many Groups. All roles in the Segment App are additive, which means that group membership can be assigned in addition to individual roles for a single team member. For example, a single user could inherit roles from a Group definition AND have access to additional resources through individually assigned roles. Tokens You can generate tokens to programmatically access Segment resources using the Segment Public API . Resources Resources are the building blocks of Segment, and represent the different parts of your Segment deployment to which you can grant access. These include: Workspaces Sources Destinations Warehouses Spaces Protocols Tracking Plans Labels Workspace owners can use Labels to grant users access to groups of resources. When you add a Label to a Source or Spaces, any users who are granted access to that Label gain access to those resources. To create or configure labels, go to the Labels tab in your workspace settings. Only workspace Owners can manage labels for the entire workspace. Quick Links: Label-based Access Management Labels Best Practices This page was last modified: 23 Oct 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Team Members User Groups Tokens Resources Labels Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "conceptual",
    "keywords": [
      "assigned",
      "access",
      "visit",
      "group",
      "labels",
      "groups",
      "generate",
      "check",
      "source",
      "configure",
      "based",
      "analytics",
      "change",
      "easiest",
      "session",
      "growth",
      "eligible",
      "spaces",
      "additive",
      "problems",
      "associated",
      "available",
      "documentation",
      "owner",
      "could",
      "through",
      "blocks",
      "example",
      "workspaces",
      "which",
      "integrate",
      "entire",
      "using",
      "websites",
      "sources",
      "improve",
      "additional",
      "request",
      "members",
      "label",
      "modified",
      "alias",
      "links",
      "practices",
      "segment",
      "inherit",
      "deployment",
      "warehouses",
      "different",
      "include",
      "building",
      "data",
      "contact",
      "membership",
      "shared",
      "complete",
      "single",
      "those",
      "individual",
      "these",
      "assistance",
      "started",
      "helpful",
      "resources",
      "destinations",
      "account",
      "granted",
      "settings",
      "grant",
      "quick",
      "concepts",
      "individually",
      "tokens",
      "represent",
      "definition",
      "support",
      "plans",
      "manage",
      "policies",
      "public",
      "workspace",
      "tracking",
      "roles",
      "thanks",
      "member",
      "mobile",
      "either",
      "gmail",
      "across",
      "api",
      "advanced",
      "hipaa",
      "means",
      "create",
      "questions",
      "parts",
      "addition",
      "feedback",
      "tools",
      "programmatically",
      "users",
      "protocols",
      "owners",
      "business",
      "minute",
      "management"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/pricing",
    "title": "Twilio Segment Plans & Pricing | Twilio Segment",
    "platform": "segment",
    "content": "Pricing that scales Find the right plan and add-ons to enable your engineering, marketing, and product teams to power adaptive, personalized customer experiences with good data. Get a demo Connections Collect real-time event data from 450+ pre-built sources, including the warehouse, and send unified customer data to your favorite marketing and analytics tools. Plans: Free, Team, and Business Learn about Connections plans What you can do with Connections: Enable engineering teams to: Collect and unify real-time events with customer data in the warehouse Send customer data to 450+ destinations Govern data for quality and compliance Optional add-on Advanced data governance Automatically enforce data quality at scale Customer Data Platform (CDP) The most complete, extensible, and scalable CDP that enables technical and business users to create unified profiles, build audiences, orchestrate personalized journeys in real-time, and enhance every experience with data from your warehouse. Plans: Unify and Engage Learn about CDP plans Everything in Connections AND: Enable engineering teams to: Automatically generate identity-resolved profiles Collect and unify real-time events with customer data in the warehouse Enrich and activate unified profile data to downstream tools Govern data for quality and compliance Enable marketing teams to: Get a complete view of the customer Create and manage audiences Orchestrate customer journeys and campaigns Leverage predictive and generative AI Join the 25,000+ companies using the Segment platform Dominos Pizza logo Log Me In Clear Score Intuit logo Drift Allergan logo Abin Bev Digital Ocean logo IBM logo Artificial Intelligence Segment makes it easier than ever to understand, predict, and generate 1:1 customer engagement in real time and at scale. Predictive AI Predict customer behavior using a no-code builder to power more timely, targeted, and precise personalized experiences on every channel. Available with Unify and Engage plans. Generative AI for Marketers Create and launch complex audiences in minutes with a simple text prompt. Available with Engage plans. Generative AI for Developers Generate and optimize code in minutes from natural language prompts (with rETL support for Functions) to create custom integrations and capabilities faster than ever. Available with all CDP and Connections Business plans. Get a demo Learn more about AI Solutions FAQs Is there a free trial of the paid plans? An icon of a plus symbol An icon of a minus symbol Yes! There is a 14-day free trial for Connections. Learn more here . For CDP plans, please contact us. Do I need to purchase a Connections and a CDP plan? An icon of a plus symbol An icon of a minus symbol No! Connections capabilities are included in all Customer Data Platform (CDP) plans. For teams only focused on collecting and sending customer data to downstream destinations, Connections plans are a great place to start and can be upgraded to a CDP plan when your team is ready. Are the artificial intelligence capabilities included in plans? An icon of a plus symbol An icon of a minus symbol Predictive and Generative AI capabilities are available in all Customer Data Platform (CDP) plans. Recommended Audiences and Recommendation Traits are included in Engage plans. Learn more about CDP plans. How can I buy Protocols, Unify or Twilio Engage? An icon of a plus symbol An icon of a minus symbol Protocols is included in all Customer Data Platform (CDP) plans and an optional add-on for Connections Business plans. Unify and Twilio Engage are available CDP plans. Learn more about CDP plans, or contact us to determine which plan is best for you. Getting started is easy Whether your team is personalizing experiences in real time or building foundational data pipelines, Segment enables advanced use cases and customizations with low-code solutions. Get a CDP demo Start with Connections for free An icon of a right chevron",
    "type": "general",
    "keywords": [
      "symbol",
      "intelligence",
      "enforce",
      "getting",
      "unify",
      "governance",
      "favorite",
      "traits",
      "easier",
      "generate",
      "upgraded",
      "custom",
      "determine",
      "leverage",
      "developers",
      "analytics",
      "there",
      "customer",
      "digital",
      "about",
      "ocean",
      "clear",
      "foundational",
      "integrations",
      "everything",
      "personalizing",
      "pipelines",
      "experiences",
      "identity",
      "score",
      "scale",
      "generative",
      "available",
      "precise",
      "makes",
      "ready",
      "natural",
      "recommended",
      "which",
      "customizations",
      "faster",
      "using",
      "sources",
      "experience",
      "simple",
      "extensible",
      "trial",
      "power",
      "product",
      "focused",
      "dominos",
      "segment",
      "journeys",
      "companies",
      "prompt",
      "right",
      "resolved",
      "events",
      "drift",
      "launch",
      "platform",
      "functions",
      "data",
      "building",
      "activate",
      "prompts",
      "govern",
      "contact",
      "recommendation",
      "behavior",
      "learn",
      "complete",
      "including",
      "included",
      "channel",
      "whether",
      "minus",
      "campaigns",
      "pizza",
      "engineering",
      "every",
      "started",
      "warehouse",
      "downstream",
      "engagement",
      "destinations",
      "intuit",
      "optional",
      "build",
      "enable",
      "great",
      "understand",
      "personalized",
      "cases",
      "builder",
      "built",
      "twilio",
      "capabilities",
      "chevron",
      "technical",
      "marketers",
      "sending",
      "place",
      "language",
      "profiles",
      "teams",
      "please",
      "collecting",
      "manage",
      "plans",
      "support",
      "compliance",
      "purchase",
      "pricing",
      "artificial",
      "automatically",
      "scalable",
      "quality",
      "predictive",
      "minutes",
      "orchestrate",
      "optimize",
      "engage",
      "advanced",
      "connections",
      "solutions",
      "timely",
      "complex",
      "adaptive",
      "create",
      "enhance",
      "allergan",
      "profile",
      "enrich",
      "tools",
      "marketing",
      "collect",
      "users",
      "targeted",
      "enables",
      "scales",
      "protocols",
      "event",
      "predict",
      "start",
      "business",
      "unified",
      "audiences"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#remove-a-team-member-from-your-workspace",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#create-a-new-user-group",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#remove-a-team-member-from-a-user-group",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/guides/intro-impl/",
    "title": " Segment for Developers | Segment Documentation",
    "platform": "segment",
    "content": "Home / Guides / Segment for Developers Segment for Developers On this page What does Segment do? Types of Segment messages Anatomy of a Segment message Message schemas, Blocks, and Specs Sources and Destinations Connection modes Planning your Segment implementation How do I test if it’s working? How do I filter my data? Troubleshooting Segment Terraform Provider This guide explains all you need to know to get started with your Segment implementation, and directs you to more resources depending on your specific needs. If you haven’t already, you should read the detailed explanation of Segment on the previous page! Segment University: Segment in Action See a quick example of Segment working on an ecommerce website. (Must be logged in to access.) What does Segment do? Segment sends messages about activities in your mobile apps, websites or servers, receives those messages, and translates and forwards the message content to Destination tools. It also can send the contents of those messages to a bulk storage destination for archiving. In more complicated implementations, Segment can serve as a wrapper to trigger messages directly to other APIs, and can inspect, correct, classify and block the message contents. Types of Segment messages Segment’s libraries generate and send messages to our tracking API in JSON format, and provide a standard structure for the basic API calls. We also provide recommended JSON structure (also known as a schema, or ‘Spec’) that helps keep the most important parts of your data consistent, while allowing great flexibility in what other information you collect and where. There are six calls in the basic tracking API, which answer specific questions: Identify : Who is the user? Track : What are they doing? Page : What web page are they on? Screen : What app screen are they on? Group : What account or organization are they part of? Alias : What was their past identity? Among these calls, you can think of Identify, Group, and Alias as similar types of calls, all to do with updating our understanding of the user who is triggering Segment messages. You can think of these calls as adding information to, or updating an object record in a database. Objects are described using “traits”, which you can collect as part of your calls. The other three, Track, Page, and Screen, can be considered as increasingly specific types of events. Events can occur multiple times, but generate separate records which append to a list, instead of being updated over time. A Track call is the most basic type of call, and can represent any type of event. Page and Screen are similar and are triggered by a user viewing a page or screen, however Page calls can come from both web and mobile-web views, while Screen calls only occur on mobile devices. Because of the difference in platform, the context information collected is very different between the two types of calls. Tip ! Segment recommends that you always use the Page and Screen calls when recording a page-view, rather than creating a “Page Viewed” event, because the Page/Screen calls automatically collect much better context information. Anatomy of a Segment message The most basic Segment message requires only a userID or anonymousID ; all other fields are optional to allow for maximum flexibility. However, a normal Segment message has three main parts: the common fields , the “context” object , and the properties (if it’s an event) or traits (if it’s an object). The common fields include information specific to how the call was generated, like the timestamp and library name and version. The fields in the context object are usually generated by the library, and include information about the environment in which the call was generated: page path, user agent, OS, locale settings, etc. The properties and traits are optional and are where you customize the information you want to collect for your implementation. Another common part of a Segment message is the integrations object , which you can use to explicitly filter which destinations the call is forwarded to. However this object is optional, and is often omitted in favor of non-code based filtering options. Message schemas, Blocks, and Specs The Segment “Specs” provide recommended message schemas - the information we recommend that you collect - for each type of call. These are recommendations not requirements, but if you follow these schema guidelines the Segment servers can more easily identify parts of your messages, and translate them to downstream tools. In addition to the recommended message schemas, Segment also provides “blocks”: recommendations on what information to collect and how to format it, for different industries and use cases. These are recommendations only, but by collecting all of the information in these blocks, you can ensure that common tools used in that use-case have the information they need to function. A third section of the Spec is the “industry specs” which provide recommendations that include an explicit translation or mapping in the Segment servers, to best power the downstream Destinations commonly used in these industries. Sources and Destinations When you start out, you create a Workspace, which serves as a container for all of your Sources and Destinations. Segment has Sources and Destinations . Sources send data into Segment, while Destinations receive data from Segment. Segment has five types of sources: Web (Analytics.js), Mobile, Server, and Cloud App, plus a fifth type: User-created Source Functions . Web, Mobile, and Server sources send first-party data from your digital properties. Cloud-app sources send data about your users from your connected web apps, for example a ticketing system such as Zendesk , a payments system such as Stripe , or a marketing tool like Braze . Connection modes Segment has several types of sources, and many destinations can accept data from all of them. However, some are only compatible with specific source types (for example, web only, or server only). To find out which source types a specific destination can accept data from, check the documentation for that destination for a “Supported Sources and Connection Modes” section. Segment’s web source (Analytics.js), and native client-side libraries (iOS, Android, React-native) allow you to choose how you send data to Segment from your website or app. There are two ways to send data: Cloud-mode : The sources send data directly to the Segment servers, which then translate it for each connected downstream destination, and send it on. Translation is done on the Segment servers, keeping your page size, method count, and load time small. Healthcare and Life Sciences (HLS) customers can encrypt data flowing into their destinations HLS customers with a HIPAA eligible workspace can encrypt data in fields marked as Yellow in the Privacy Portal before they flow into an event stream, cloud-mode destination. To learn more about data encryption, see the HIPAA Eligible Segment documentation Device-mode : You include additional code on your website or mobile app which allows Segment to use the data you collect on the device to make calls directly to the destination tool’s API, without sending it to the Segment servers first . (You still send your data to the Segment servers, but this occurs asynchronously.) This is also called wrapping or bundling , and it might be required when the source has to be loaded on the page to work, or loaded directly on the device to function correctly. When you use Analytics.js, you can change the device-mode destinations that a specific source sends from within the Segment web app, without touching any code. If you use Server source libraries, they only send data directly to Segment in Cloud-mode. Server library implementations operate in the server backend, and can't load additional destination SDKs. To learn more about connection modes and when you should use each, see the details in the Destinations docs . Planning your Segment implementation The journey of a thousand miles begins, ideally, with a plan. Regardless of if you’re a new company just implementing analytics for the first time, or a multi–national corporation modernizing your analytics stack, it’s a great idea to start with a Tracking Plan . For new implementations, this can be as simple as a document where you write down these four things for each item you track: What am I tracking? (What is the event name or type?) Why am I tracking it? (What questions does this data answer?) For whom am I tracking it? (Who owns this question, tool, or business area?) Where (which destination tools) do I want to send this data to? If you’re a large or long-established organization and you’re replacing existing tools, you’ll want to spend more time on this to maintain analytic parity and continuity of tooling. We highly recommend reading up on tracking plans and schemas for Protocols , our tool for managing and sharing tracking plans and enforcing schemas. Regardless of your organization’s size or age, you’ll want to take an inventory of the destination tools you’ll be using with Segment, and make a list of the connection modes each one accepts. This makes it easier to check off when you’ve implemented each one, so you’re not missing anything. How do I test if it’s working? There are several ways to check if your data is flowing. One is the Debugger tab in each Source in the Segment web app, where you can see data coming from a source into Segment. Another is the Event Delivery tool which shows which data is arriving at specific destinations. For monitoring purposes, you’ll also see alerts in the Workspace Health tool if your sources or destinations produce repeated errors. How do I filter my data? There are several different ways to ensure that you can collect your data once, but filter it out of specific destinations. See Filtering Data for a list of the available methods and descriptions. Troubleshooting If you’re seeing errors thrown by your destinations, you might have an implementation issue. See the Integration Error Codes list or contact our Success engineering team for help. Have suggestions for things to add to this guide? Drop us a line . Segment Terraform Provider Segment has a Terraform provider, powered by the Public API, that you can use to manage Segment resources, automate cloud deployments, and change control. Take a look at the Segment provider documentation on Terraform to see what’s supported. This page was last modified: 09 Apr 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page What does Segment do? Types of Segment messages Anatomy of a Segment message Message schemas, Blocks, and Specs Sources and Destinations Connection modes Planning your Segment implementation How do I test if it’s working? How do I filter my data? Troubleshooting Segment Terraform Provider Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "working",
      "website",
      "codes",
      "connected",
      "group",
      "correctly",
      "block",
      "supported",
      "troubleshooting",
      "wrapping",
      "forwarded",
      "source",
      "error",
      "database",
      "keeping",
      "section",
      "digital",
      "easiest",
      "favor",
      "options",
      "identity",
      "between",
      "eligible",
      "customers",
      "normal",
      "triggered",
      "wrapper",
      "forwards",
      "recommend",
      "begins",
      "documentation",
      "server",
      "makes",
      "translates",
      "sharing",
      "which",
      "think",
      "improve",
      "simple",
      "separate",
      "touching",
      "correct",
      "alias",
      "portal",
      "repeated",
      "ticketing",
      "modernizing",
      "monitoring",
      "implementation",
      "include",
      "function",
      "among",
      "errors",
      "national",
      "content",
      "debugger",
      "missing",
      "haven",
      "question",
      "allowing",
      "choose",
      "explicit",
      "implementing",
      "collected",
      "helpful",
      "where",
      "destinations",
      "marked",
      "creating",
      "health",
      "while",
      "recommends",
      "inspect",
      "serves",
      "locale",
      "receives",
      "bundling",
      "track",
      "understanding",
      "context",
      "document",
      "automatically",
      "format",
      "anatomy",
      "should",
      "first",
      "create",
      "existing",
      "feedback",
      "marketing",
      "write",
      "encryption",
      "event",
      "replacing",
      "terraform",
      "still",
      "control",
      "generated",
      "directly",
      "objects",
      "record",
      "traits",
      "operate",
      "multi",
      "specs",
      "provides",
      "might",
      "encrypt",
      "analytics",
      "change",
      "cloud",
      "react",
      "suggestions",
      "planning",
      "implementations",
      "accepts",
      "system",
      "standard",
      "things",
      "provide",
      "loaded",
      "recommended",
      "sciences",
      "integrate",
      "websites",
      "screen",
      "sources",
      "basic",
      "using",
      "another",
      "additional",
      "continuity",
      "storage",
      "modified",
      "power",
      "purposes",
      "analytic",
      "already",
      "information",
      "servers",
      "powered",
      "flexibility",
      "explicitly",
      "data",
      "libraries",
      "common",
      "braze",
      "privacy",
      "produce",
      "engineering",
      "assistance",
      "known",
      "difference",
      "fifth",
      "account",
      "great",
      "better",
      "object",
      "method",
      "usually",
      "tooling",
      "depending",
      "classify",
      "translate",
      "viewing",
      "guide",
      "multiple",
      "count",
      "public",
      "identify",
      "allows",
      "mapping",
      "required",
      "provider",
      "logged",
      "needs",
      "properties",
      "api",
      "integration",
      "views",
      "requirements",
      "ideally",
      "tools",
      "protocols",
      "business",
      "considered",
      "industries",
      "regardless",
      "visit",
      "viewed",
      "easier",
      "methods",
      "explanation",
      "filter",
      "there",
      "updated",
      "answer",
      "about",
      "times",
      "payments",
      "integrations",
      "descriptions",
      "being",
      "problems",
      "three",
      "agent",
      "recording",
      "requires",
      "within",
      "rather",
      "compatible",
      "stream",
      "types",
      "modes",
      "enforcing",
      "specific",
      "however",
      "messages",
      "issue",
      "implemented",
      "delivery",
      "trigger",
      "different",
      "miles",
      "events",
      "without",
      "platform",
      "native",
      "established",
      "message",
      "thousand",
      "inventory",
      "android",
      "alerts",
      "similar",
      "thrown",
      "destination",
      "allow",
      "append",
      "downstream",
      "third",
      "optional",
      "timestamp",
      "maintain",
      "filtering",
      "connection",
      "guides",
      "company",
      "sending",
      "highly",
      "ensure",
      "omitted",
      "device",
      "automate",
      "recommendations",
      "party",
      "accept",
      "occurs",
      "guidelines",
      "workspace",
      "arriving",
      "thanks",
      "anonymousid",
      "mobile",
      "adding",
      "ecommerce",
      "hipaa",
      "schema",
      "parts",
      "addition",
      "schemas",
      "activities",
      "detailed",
      "userid",
      "serve",
      "start",
      "triggering",
      "access",
      "small",
      "customize",
      "journey",
      "archiving",
      "generate",
      "check",
      "fields",
      "before",
      "developers",
      "reading",
      "based",
      "organization",
      "because",
      "deployments",
      "other",
      "library",
      "called",
      "growth",
      "records",
      "previous",
      "devices",
      "available",
      "flowing",
      "client",
      "contents",
      "blocks",
      "example",
      "follow",
      "helps",
      "request",
      "sends",
      "segment",
      "yellow",
      "functions",
      "receive",
      "success",
      "coming",
      "maximum",
      "contact",
      "managing",
      "important",
      "learn",
      "those",
      "university",
      "structure",
      "these",
      "translation",
      "occur",
      "started",
      "large",
      "resources",
      "container",
      "spend",
      "settings",
      "zendesk",
      "seeing",
      "instead",
      "directs",
      "cases",
      "always",
      "calls",
      "doing",
      "their",
      "environment",
      "quick",
      "created",
      "parity",
      "commonly",
      "represent",
      "version",
      "industry",
      "collecting",
      "manage",
      "plans",
      "support",
      "tracking",
      "backend",
      "action",
      "complicated",
      "corporation",
      "shows",
      "asynchronously",
      "healthcare",
      "described",
      "increasingly",
      "often",
      "questions",
      "updating",
      "explains",
      "easily",
      "collect",
      "users",
      "several",
      "anything",
      "stripe",
      "consistent",
      "stack",
      "details"
    ],
    "howto_steps": [
      "the information we recommend that you collect",
      "for each type of call. These are recommendations not requirements, but if you follow these schema guidelines the Segment servers can more easily identify parts of your messages, and translate them to downstream tools. In addition to the recommended message schemas, Segment also provides “blocks”: recommendations on what information to collect and how to format it, for different industries and use cases. These are recommendations only, but by collecting all of the information in these blocks, you can ensure that common tools used in that use"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/#what-does-segment-do",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#how-do-i-filter-my-data",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#how-do-i-test-if-its-working",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/integration_error_codes/",
    "title": " Integration Error Codes | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Integration Error Codes Integration Error Codes Error Codes Reason errors.discarded.400 Bad request - Refer to the error message to see which fields in your events might be invalid errors.discarded.401 Unauthorized - Your credentials are either invalid or have expired. Re-authenticate your account with the partner and update your authentication settings in Segment. errors.discarded.403 Forbidden - You no longer have sufficient privilege to access the partner’s API. Re-authenticate your account with the partner and update your auth settings in Segment. errors.discarded.INVALID_SETTINGS Your configurations in Segment are invalid. Refer to the error message for more details. errors.discarded.MESSAGE_REJECTED Your events are missing one or more required fields. Refer to the error message for more details. errors.awaiting-retry.429 Rate limit exceeded. contact the partner to raise your limit or avoid sending events in burst. errors.awaiting-retry.5xx The partner’s API report an internal error. Consider disabling this integration or contact the integration partner to address this issue. errors.awaiting-retry.ENOTFOUND errors.awaiting-retry.ECONNREFUSED errors.awaiting-retry.ECONNRESET errors.awaiting-retry.ECONNABORTED errors.awaiting-retry.EHOSTUNREACH errors.awaiting-retry.EAI_AGAIN Segment is unable to establish a connection with the partner’s server. This could mean your Segment configurations contain some invalid settings or that the integration is no longer operational.  If your configurations are valid, consider disabling this integration or contact the integration partner to address this issue. Others Refer to the error message you receive for more information. See the article, Testing Connections for more debugging help. This page was last modified: 06 Jul 2022 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "codes",
      "access",
      "expired",
      "visit",
      "partner",
      "longer",
      "fields",
      "eai_again",
      "might",
      "ehostunreach",
      "error",
      "analytics",
      "change",
      "configurations",
      "disabling",
      "easiest",
      "growth",
      "contain",
      "problems",
      "consider",
      "authenticate",
      "documentation",
      "others",
      "server",
      "could",
      "valid",
      "retry",
      "econnreset",
      "which",
      "integrate",
      "credentials",
      "testing",
      "websites",
      "improve",
      "request",
      "exceeded",
      "issue",
      "modified",
      "invalid",
      "unable",
      "segment",
      "information",
      "forbidden",
      "events",
      "receive",
      "errors",
      "message",
      "data",
      "contact",
      "update",
      "report",
      "missing",
      "unauthorized",
      "burst",
      "limit",
      "reason",
      "these",
      "address",
      "assistance",
      "avoid",
      "started",
      "establish",
      "helpful",
      "account",
      "operational",
      "settings",
      "sufficient",
      "connection",
      "article",
      "debugging",
      "sending",
      "raise",
      "refer",
      "enotfound",
      "support",
      "invalid_settings",
      "thanks",
      "authentication",
      "awaiting",
      "mobile",
      "required",
      "either",
      "discarded",
      "api",
      "internal",
      "integration",
      "privilege",
      "connections",
      "econnaborted",
      "questions",
      "create",
      "feedback",
      "tools",
      "econnrefused",
      "message_rejected",
      "details"
    ],
    "howto_steps": [
      "Refer to the error message to see which fields in your events might be invalid errors.discarded.401 Unauthorized",
      "Your credentials are either invalid or have expired. Re",
      "You no longer have sufficient privilege to access the partner’s API. Re"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/#segment-terraform-provider",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/test-connections/",
    "title": " Event Tester | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Event Tester Event Tester On this page Use Cases Ensuring an event is successfully making it to a specific destination FAQ Segment has an Event Tester that enables you to test your connections between Segment and your destination. You can access the Event Tester from your Source Debugger, or from your destination settings. Available for server-side event streaming destinations only This feature is only available for server-side integrations (also known as cloud-mode destinations). You can’t use this for client-side integrations (also known as device-mode destinations). Use Cases There are two scenarios where you might want to use the Event Tester: ensuring an event is successfully making it to a specific destination ensuring your new destination is configured correctly Ensuring an event is successfully making it to a specific destination 1. Choose an event from the Source Debugger that you want to debug and select “Validate” Go to your Source Debugger, select an event and in the top right hand side of the debugger view, select “Validate”. 2. Choose the destination you want to test with Select the destination that you want to test this event with. At this time, you can only use the Event Tester for cloud-mode (server side) destinations. 3. Send event to destination The event payload from your debugger that you just selected will automatically load in the JSON view. You have the option to edit the payload if you want. Assuming it looks good, select “Send Event” at the bottom right of the screen. 4. Ensure you’re happy to send the test event to the destination This is a real event that will appear in your end tool alongside your existing data. If you’re not comfortable with this, then select “Cancel” and do not send the event. 5. View the Partner API response On the right hand side of the Event Tester you will see the response from the partner API. At the top, Segment provide of summary of the response. Below is the raw response payload Segment received that you can use for further debugging if necessary. If you are receiving an error and are unsure how to fix the issue, visit the partner docs (for example https://developers.google.com/analytics/devguides/reporting/core/v3/errors ) or contact the partner support team. FAQ Why can’t I see the Event Tester when I log into my workspace? The Event Tester is only accessible to users with write access in their Segment workspace (read-only users will not see the Event Tester in their workspace). The Event Tester experienced an error when sending my event. Why did this happen? If you experience an error, let Segment know and the Segment team will help you troubleshoot the issue. Is this feature available for Data Lakes? The Event Tester is not available for Data Lakes. Why are my destination filters being ignored? Events passed into the Event Tester bypass destination filters. Destination filters are applied to events as they are sent to specific destinations. However, the Event Tester is designed to help you troubleshoot your Sources, their configuration, and their downstream destinations by showing a sample of the data available. It allows you to check that data is being sent, and that it’s in the correct format without the filters being applied. This means that when you use the Event Tester, you’re seeing the data before any destination filters or other processing rules are applied, providing a clear view of the raw event data as it comes from the source. This page was last modified: 13 Jun 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Use Cases Ensuring an event is successfully making it to a specific destination FAQ Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "received",
      "streaming",
      "access",
      "visit",
      "correctly",
      "partner",
      "applied",
      "check",
      "reporting",
      "source",
      "might",
      "error",
      "configured",
      "developers",
      "cancel",
      "before",
      "tester",
      "analytics",
      "there",
      "change",
      "cloud",
      "necessary",
      "clear",
      "looks",
      "integrations",
      "providing",
      "selected",
      "easiest",
      "other",
      "between",
      "scenarios",
      "troubleshoot",
      "growth",
      "being",
      "problems",
      "ensuring",
      "available",
      "devguides",
      "documentation",
      "server",
      "provide",
      "client",
      "comfortable",
      "example",
      "feature",
      "integrate",
      "specific",
      "screen",
      "however",
      "sources",
      "websites",
      "accessible",
      "improve",
      "experience",
      "request",
      "issue",
      "modified",
      "correct",
      "select",
      "below",
      "experienced",
      "segment",
      "option",
      "right",
      "events",
      "response",
      "without",
      "bypass",
      "data",
      "errors",
      "summary",
      "contact",
      "validate",
      "debugger",
      "ignored",
      "destination",
      "unsure",
      "payload",
      "these",
      "assistance",
      "started",
      "choose",
      "helpful",
      "known",
      "where",
      "downstream",
      "destinations",
      "happen",
      "processing",
      "account",
      "settings",
      "rules",
      "seeing",
      "cases",
      "debug",
      "debugging",
      "their",
      "passed",
      "showing",
      "sending",
      "ensure",
      "further",
      "device",
      "designed",
      "making",
      "receiving",
      "support",
      "workspace",
      "configuration",
      "assuming",
      "https",
      "allows",
      "google",
      "thanks",
      "automatically",
      "format",
      "mobile",
      "filters",
      "bottom",
      "successfully",
      "api",
      "appear",
      "comes",
      "means",
      "connections",
      "questions",
      "create",
      "existing",
      "feedback",
      "tools",
      "write",
      "users",
      "enables",
      "happy",
      "lakes",
      "event",
      "alongside",
      "sample"
    ],
    "howto_steps": [
      "Choose an event from the Source Debugger that you want to debug and select “Validate” Go to your Source Debugger, select an event and in the top right hand side of the debugger view, select “Validate”.",
      "Choose the destination you want to test with Select the destination that you want to test this event with. At this time, you can only use the Event Tester for cloud-mode (server side) destinations.",
      "Send event to destination The event payload from your debugger that you just selected will automatically load in the JSON view. You have the option to edit the payload if you want. Assuming it looks good, select “Send Event” at the bottom right of the screen.",
      "Ensure you’re happy to send the test event to the destination This is a real event that will appear in your end tool alongside your existing data. If you’re not comfortable with this, then select “Cancel” and do not send the event.",
      "View the Partner API response On the right hand side of the Event Tester you will see the response from the partner API. At the top, Segment provide of summary of the response. Below is the raw response payload Segment received that you can use for further debugging if necessary. If you are receiving an error and are unsure how to fix the issue, visit the partner docs (for example https://developers.google.com/analytics/devguides/reporting/core/v3/errors ) or contact the partner support team. FAQ Why can’t I see the Event Tester when I log into my workspace? The Event Tester is only accessible to users with write access in their Segment workspace (read-only users will not see the Event Tester in their workspace). The Event Tester experienced an error when sending my event. Why did this happen? If you experience an error, let Segment know and the Segment team will help you troubleshoot the issue. Is this feature available for Data Lakes? The Event Tester is not available for Data Lakes. Why are my destination filters being ignored? Events passed into the Event Tester bypass destination filters. Destination filters are applied to events as they are sent to specific destinations. However, the Event Tester is designed to help you troubleshoot your Sources, their configuration, and their downstream destinations by showing a sample of the data available. It allows you to check that data is being sent, and that it’s in the correct format without the filters being applied. This means that when you use the Event Tester, you’re seeing the data before any destination filters or other processing rules are applied, providing a clear view of the raw event data as it comes from the source. This page was last modified: 13 Jun 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Use Cases Ensuring an event is successfully making it to a specific destination FAQ Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#faq",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#use-cases",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/",
    "title": " Sources Catalog | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Sources Catalog Sources Catalog Below is a list of the available sources on the Segment platform. Website Javascript Shopify (by Littledata) Mobile Apple Factual Engine Beta Flutter Beta Kotlin (Android) React Native Unity Xamarin Server .NET Clojure Go HTTP API Java Kotlin PHP Pixel Tracking API Python Ruby A/B Testing ConfigCat Beta Insider LaunchDarkly Leanplum Statsig Beta Advertising Facebook Ads Google Ads ProveSource Analytics Amplitude Cohorts Beamer Candu GWEN Webhooks Beta Looker Mixpanel Cohorts Moesif API Analytics Navattic Beta Pendo Shopify - Powered by Fueled Upollo Beta Attribution Shopify - Powered by Fueled CRM Aircall Freshchat Beta HubSpot Moesif API Analytics OneTrust Beta Paytronix Beta Salesforce Custom Amazon S3 Customer Success Aircall Beamer Candu CommandBar Gladly Moesif API Analytics ProveSource Refiner Email Marketing ActiveCampaign AutopilotHQ Blueshift Braze Customer.io Drip Facebook Lead Ads Beta Inflection Insider Intercom Iterable Klaviyo Klenty Leanplum Listrak Mailchimp Mailjet Mailmodo Beta Mandrill Marketo MoEngage (Source) Nudgespot Paytronix Beta Salesforce Marketing Cloud Selligent Marketing Cloud SendGrid SendGrid Marketing Campaigns Beta Vero Yotpo Beta Enrichment Alloy Flow Beta Bluedot Factual Engine Beta Foursquare Movement Herow LiveLike (Source) Beta One Creation Beta Quin AI Beta Radar Refiner Feature Flagging ConfigCat Beta LaunchDarkly Helpdesk Aircall Gladly Zendesk Learning Management System Synap Beta WorkRamp Livechat Blip Beta Chatlio Freshchat Beta Marketing Automation Airship Antavo Beta Bluedot CleverTap Foursquare Movement Friendbuy Inflection Insider Listrak Mailmodo Beta MoEngage (Source) Paytronix Beta ProveSource Pushwoosh Source Beta Selligent Marketing Cloud SendGrid Marketing Campaigns Beta Voucherify Beta White Label Loyalty Beta Yotpo Beta Ott Roku (alpha) Payments Stripe Performance Monitoring Moesif API Analytics Synap Beta Personalization Bluedot Candu CleverTap CommandBar Elastic Path Beta Elastic Path CX Studio Beta Foursquare Movement GWEN Webhooks Beta Insider Leanplum LiveLike (Source) Beta One Creation Beta Paytronix Beta ProveSource Pushwoosh Source Beta Qualtrics Quin AI Beta Upollo Beta UserGuiding Beta White Label Loyalty Beta Raw Data Alloy Flow Beta Authvia Beta Elastic Path Beta Elastic Path CX Studio Beta Referrals Friendbuy Voucherify Beta SMS & Push Notifications Airship Beamer Braze Insider Leanplum OneSignal Beta Selligent Marketing Cloud Twilio Surveys Beamer Delighted Jebbit Qualtrics Refiner UserGuiding Beta Virtual Assistant IBM Watson Assistant On this page Website Mobile Server A/B Testing Advertising Analytics Attribution CRM Custom Customer Success Email Marketing Enrichment Feature Flagging Helpdesk Learning Management System Livechat Marketing Automation Ott Payments Performance Monitoring Personalization Raw Data Referrals SMS & Push Notifications Surveys Virtual Assistant Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "authvia",
      "website",
      "clojure",
      "livelike",
      "javascript",
      "onesignal",
      "custom",
      "antavo",
      "source",
      "xamarin",
      "klenty",
      "iterable",
      "attribution",
      "analytics",
      "commandbar",
      "factual",
      "engine",
      "leanplum",
      "customer",
      "personalization",
      "cloud",
      "looker",
      "react",
      "payments",
      "notifications",
      "synap",
      "system",
      "insider",
      "friendbuy",
      "studio",
      "klaviyo",
      "available",
      "white",
      "flutter",
      "assistant",
      "documentation",
      "workramp",
      "server",
      "freshchat",
      "provesource",
      "feature",
      "userguiding",
      "mailmodo",
      "testing",
      "catalog",
      "sources",
      "refiner",
      "improve",
      "marketo",
      "qualtrics",
      "label",
      "python",
      "clevertap",
      "pushwoosh",
      "below",
      "segment",
      "moesif",
      "performance",
      "powered",
      "monitoring",
      "alpha",
      "platform",
      "pixel",
      "native",
      "jebbit",
      "success",
      "data",
      "unity",
      "selligent",
      "android",
      "mailjet",
      "watson",
      "fueled",
      "referrals",
      "radar",
      "livechat",
      "enrichment",
      "braze",
      "sendgrid",
      "campaigns",
      "webhooks",
      "alloy",
      "helpful",
      "listrak",
      "airship",
      "voucherify",
      "surveys",
      "zendesk",
      "amazon",
      "movement",
      "email",
      "configcat",
      "amplitude",
      "learning",
      "upollo",
      "blueshift",
      "twilio",
      "foursquare",
      "autopilothq",
      "activecampaign",
      "virtual",
      "flagging",
      "pendo",
      "mandrill",
      "helpdesk",
      "onetrust",
      "launchdarkly",
      "statsig",
      "tracking",
      "salesforce",
      "cohorts",
      "littledata",
      "facebook",
      "google",
      "bluedot",
      "delighted",
      "chatlio",
      "paytronix",
      "thanks",
      "nudgespot",
      "mobile",
      "shopify",
      "candu",
      "moengage",
      "api",
      "automation",
      "creation",
      "connections",
      "loyalty",
      "kotlin",
      "intercom",
      "mixpanel",
      "beamer",
      "gladly",
      "apple",
      "feedback",
      "marketing",
      "yotpo",
      "inflection",
      "advertising",
      "stripe",
      "elastic",
      "aircall",
      "mailchimp",
      "herow",
      "navattic",
      "management",
      "hubspot"
    ],
    "howto_steps": [
      "Powered by Fueled Upollo Beta Attribution Shopify",
      "Powered by Fueled CRM Aircall Freshchat Beta HubSpot Moesif API Analytics OneTrust Beta Paytronix Beta Salesforce Custom Amazon S3 Customer Success Aircall Beamer Candu CommandBar Gladly Moesif API Analytics ProveSource Refiner Email Marketing ActiveCampaign AutopilotHQ Blueshift Braze Customer.io Drip Facebook Lead Ads Beta Inflection Insider Intercom Iterable Klaviyo Klenty Leanplum Listrak Mailchimp Mailjet Mailmodo Beta Mandrill Marketo MoEngage (Source) Nudgespot Paytronix Beta Salesforce Marketing Cloud Selligent Marketing Cloud SendGrid SendGrid Marketing Campaigns Beta Vero Yotpo Beta Enrichment Alloy Flow Beta Bluedot Factual Engine Beta Foursquare Movement Herow LiveLike (Source) Beta One Creation Beta Quin AI Beta Radar Refiner Feature Flagging ConfigCat Beta LaunchDarkly Helpdesk Aircall Gladly Zendesk Learning Management System Synap Beta WorkRamp Livechat Blip Beta Chatlio Freshchat Beta Marketing Automation Airship Antavo Beta Bluedot CleverTap Foursquare Movement Friendbuy Inflection Insider Listrak Mailmodo Beta MoEngage (Source) Paytronix Beta ProveSource Pushwoosh Source Beta Selligent Marketing Cloud SendGrid Marketing Campaigns Beta Voucherify Beta White Label Loyalty Beta Yotpo Beta Ott Roku (alpha) Payments Stripe Performance Monitoring Moesif API Analytics Synap Beta Personalization Bluedot Candu CleverTap CommandBar Elastic Path Beta Elastic Path CX Studio Beta Foursquare Movement GWEN Webhooks Beta Insider Leanplum LiveLike (Source) Beta One Creation Beta Paytronix Beta ProveSource Pushwoosh Source Beta Qualtrics Quin AI Beta Upollo Beta UserGuiding Beta White Label Loyalty Beta Raw Data Alloy Flow Beta Authvia Beta Elastic Path Beta Elastic Path CX Studio Beta Referrals Friendbuy Voucherify Beta SMS & Push Notifications Airship Beamer Braze Insider Leanplum OneSignal Beta Selligent Marketing Cloud Twilio Surveys Beamer Delighted Jebbit Qualtrics Refiner UserGuiding Beta Virtual Assistant IBM Watson Assistant On this page Website Mobile Server A/B Testing Advertising Analytics Attribution CRM Custom Customer Success Email Marketing Enrichment Feature Flagging Helpdesk Learning Management System Livechat Marketing Automation Ott Payments Performance Monitoring Personalization Raw Data Referrals SMS & Push Notifications Surveys Virtual Assistant Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/getting-started/",
    "title": " What is Segment? | Segment Documentation",
    "platform": "segment",
    "content": "Home / What is Segment? What is Segment? With Segment, you can collect, transform, send, and archive your first-party customer data . Segment simplifies the process of collecting data and connecting new tools, allowing you to spend more time using your data, and less time trying to collect it. You can use Segment to track events that happen when a user interacts with the interfaces. “Interfaces” is Segment’s generic word for any digital properties you own: your website, mobile apps, and processes that run on a server or OTT device. When you capture interaction data in Segment, you can send it (often in real-time) to your marketing, product, and analytics tools, as well as to data warehouses. In most cases, you won’t even need to touch your tracking code to connect to new tools. next Ready to get started? Let's walk through the steps to get up and running on Segment. Let's go! This page was last modified: 14 Dec 2021 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "website",
      "through",
      "track",
      "tracking",
      "ready",
      "connect",
      "visit",
      "generic",
      "these",
      "integrate",
      "assistance",
      "touch",
      "using",
      "allowing",
      "started",
      "thanks",
      "websites",
      "improve",
      "request",
      "mobile",
      "process",
      "helpful",
      "simplifies",
      "happen",
      "interfaces",
      "modified",
      "account",
      "spend",
      "interaction",
      "transform",
      "product",
      "connecting",
      "analytics",
      "steps",
      "segment",
      "properties",
      "customer",
      "trying",
      "digital",
      "warehouses",
      "cases",
      "change",
      "first",
      "processes",
      "interacts",
      "often",
      "events",
      "easiest",
      "questions",
      "archive",
      "create",
      "growth",
      "capture",
      "feedback",
      "tools",
      "marketing",
      "data",
      "collect",
      "problems",
      "device",
      "contact",
      "party",
      "collecting",
      "running",
      "documentation",
      "support",
      "server"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/academy/",
    "title": "Academy | Twilio Segment",
    "platform": "segment",
    "content": "Analytics Academy The right place to learn analytics Learn from top industry experts and level-up your analytics knowledge through these six free courses, with 38 lessons that include real-life examples and data. Please provide your company email address. Please enter a valid email address. Please provide an individual corporate email address. Subscribe We’ll share a copy of this guide and send you content and updates about Twilio Segment’s products as we continue to build the world’s leading CDP. We use your information according to our privacy policy . You can update your preferences at any time. Thanks! You'll be hearing from us soon. We are really sorry. There was an error processing your submission. Try reloading your browser, and submitting again. A preview of what you’ll learn from our courses Our handcrafted courses include basics of analytics as well as more advanced processes and strategies, to help your business grow faster. Loading Loading Loading Loading Loading Loading Available Courses Intro to analytics Course 1 • 7 Lessons In this course you’ll learn: Choosing metrics that matter How to think about analytics Customer Data Guide: How to Make the Most of Your Data Measuring product-market fit The analytics quickstart guide When to Use (and Not Use) SQL for Analysis: A Complete Guide Why you should own your data Loading All lessons in this course An icon of a plus symbol An icon of a minus symbol Loading Loading Loading Loading Loading Loading Collecting the right data Course 2 • 8 Lessons In this course you’ll learn: Customer data and the GDPR Data Tracking: How to Create a Successful Data Tracking Plan Leveraging interaction data Naming Conventions: Why You Need Them for Clean Data Ensuring Consistent, High-Quality Data at Scale The anatomy of a `.track()` call Tracking plans for B2B companies Client vs Server-Side Tracking: What Is It & When to Track Each Loading All lessons in this course An icon of a plus symbol An icon of a minus symbol Loading Loading Loading Loading Loading Loading Loading Choosing the right stack Course 3 • 7 Lessons In this course you’ll learn: How stacks evolve How to choose the best attribution provider 9 Best Application Performance Monitoring Tools Compared How to choose the right business intelligence tool How to choose the right data warehouse How to navigate the sea of customer data tools Choosing an ESP service Loading All lessons in this course An icon of a plus symbol An icon of a minus symbol Loading Loading Loading Loading Loading Loading Building a data driven company Course 4 • 5 Lessons In this course you’ll learn: 7 launch day data mistakes to avoid Driving team performance with metrics Motivating your team with data Setting company strategy with data Using Analytics to Set OKRS: Keys to Data-Driven OKRs Loading All lessons in this course An icon of a plus symbol An icon of a minus symbol Loading Loading Loading Loading Grow using data Course 5 • 7 Lessons In this course you’ll learn: Boosting return on ad spend Finding growth opportunities in your product with data How to create the best audiences for your campaigns What is a Growth Model? + How to Identify Your Company’s Personalize your campaigns with your data warehouse The quickest wins in SEO Three simple email campaigns that can help improve retention Loading All lessons in this course An icon of a plus symbol An icon of a minus symbol Loading Loading Loading Loading Loading Loading Advanced analytics Course 6 • 2 Lessons In this course you’ll learn: A Guide to Multi-Touch Attribution: What It Is and How to Do It Product Usability: How to Measure and Improve it Loading All lessons in this course An icon of a plus symbol An icon of a minus symbol Loading Get every lesson delivered to your inbox Enter your email below and we’ll send lessons directly to you so you can learn at your own pace. Please provide your company email address. Please enter a valid email address. Please provide an individual corporate email address. Subscribe We’ll share a copy of this guide and send you content and updates about Twilio Segment’s products as we continue to build the world’s leading CDP. We use your information according to our privacy policy . You can update your preferences at any time. Thanks! You'll be hearing from us soon. We are really sorry. There was an error processing your submission. Try reloading your browser, and submitting again. We empower every team with good data Segment is a customer data platform that helps your entire company become analytics experts. We collect user events from your web and mobile apps, and make it possible for every team to use that data to make decisions, power tools, and drive growth. Learn more An icon of a right chevron The best companies are built on unified customer data Digital Ocean logo Atlassian logo Fox Sanofi logo box logo Craftjack IBM logo",
    "type": "general",
    "keywords": [
      "symbol",
      "intelligence",
      "model",
      "clean",
      "directly",
      "updates",
      "basics",
      "multi",
      "error",
      "attribution",
      "analytics",
      "there",
      "measuring",
      "customer",
      "digital",
      "about",
      "ocean",
      "lessons",
      "stacks",
      "growth",
      "motivating",
      "naming",
      "scale",
      "experts",
      "ensuring",
      "three",
      "submitting",
      "setting",
      "available",
      "possible",
      "preferences",
      "navigate",
      "quickstart",
      "handcrafted",
      "server",
      "provide",
      "application",
      "through",
      "valid",
      "client",
      "measure",
      "compared",
      "loading",
      "return",
      "hearing",
      "faster",
      "using",
      "think",
      "touch",
      "usability",
      "entire",
      "become",
      "improve",
      "simple",
      "helps",
      "driving",
      "power",
      "product",
      "below",
      "segment",
      "share",
      "information",
      "delivered",
      "performance",
      "companies",
      "processes",
      "right",
      "monitoring",
      "events",
      "include",
      "courses",
      "launch",
      "platform",
      "data",
      "building",
      "service",
      "driven",
      "successful",
      "opportunities",
      "content",
      "update",
      "learn",
      "complete",
      "policy",
      "privacy",
      "minus",
      "individual",
      "campaigns",
      "quickest",
      "these",
      "address",
      "choosing",
      "every",
      "avoid",
      "matter",
      "inbox",
      "browser",
      "choose",
      "warehouse",
      "processing",
      "corporate",
      "build",
      "spend",
      "drive",
      "email",
      "market",
      "really",
      "built",
      "twilio",
      "atlassian",
      "chevron",
      "company",
      "reloading",
      "empower",
      "place",
      "according",
      "products",
      "knowledge",
      "sorry",
      "guide",
      "please",
      "industry",
      "collecting",
      "plans",
      "course",
      "track",
      "tracking",
      "identify",
      "conventions",
      "finding",
      "mistakes",
      "submission",
      "thanks",
      "again",
      "retention",
      "decisions",
      "mobile",
      "continue",
      "quality",
      "preview",
      "leveraging",
      "provider",
      "academy",
      "evolve",
      "sanofi",
      "interaction",
      "anatomy",
      "leading",
      "intro",
      "level",
      "should",
      "advanced",
      "strategy",
      "strategies",
      "personalize",
      "create",
      "craftjack",
      "world",
      "tools",
      "enter",
      "collect",
      "subscribe",
      "analysis",
      "lesson",
      "business",
      "boosting",
      "stack",
      "consistent",
      "metrics",
      "examples",
      "unified",
      "audiences"
    ],
    "howto_steps": [
      "7 Lessons In this course you’ll learn: Choosing metrics that matter How to think about analytics Customer Data Guide: How to Make the Most of Your Data Measuring product",
      "8 Lessons In this course you’ll learn: Customer data and the GDPR Data Tracking: How to Create a Successful Data Tracking Plan Leveraging interaction data Naming Conventions: Why You Need Them for Clean Data Ensuring Consistent, High",
      "7 Lessons In this course you’ll learn: How stacks evolve How to choose the best attribution provider 9 Best Application Performance Monitoring Tools Compared How to choose the right business intelligence tool How to choose the right data warehouse How to navigate the sea of customer data tools Choosing an ESP service Loading All lessons in this course An icon of a plus symbol An icon of a minus symbol Loading Loading Loading Loading Loading Loading Building a data driven company Course 4",
      "5 Lessons In this course you’ll learn: 7 launch day data mistakes to avoid Driving team performance with metrics Motivating your team with data Setting company strategy with data Using Analytics to Set OKRS: Keys to Data",
      "7 Lessons In this course you’ll learn: Boosting return on ad spend Finding growth opportunities in your product with data How to create the best audiences for your campaigns What is a Growth Model? + How to Identify Your Company’s Personalize your campaigns with your data warehouse The quickest wins in SEO Three simple email campaigns that can help improve retention Loading All lessons in this course An icon of a plus symbol An icon of a minus symbol Loading Loading Loading Loading Loading Loading Advanced analytics Course 6",
      "2 Lessons In this course you’ll learn: A Guide to Multi"
    ],
    "metadata": {
      "last_updated": null,
      "category": "user_management",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#custom",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#crm",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/cloud-apps/klenty",
    "title": " Klenty Source | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Cloud apps / Klenty Source Klenty Source On this page Getting Started Events Event Properties Adding Destinations Source Info The Klenty Source is an Event Cloud source. This means that it sends data as events, which are behaviors or occurrences tied to a user and a point in time. Data from these sources can be loaded into your Segment warehouses, and also sent to  Segment streaming destinations. Learn more about cloud sources. Partner Owned This integration is partner owned. Please reach out to the partner's support for any issues. This source is supported in US data processing regions. The Klenty  source is only supported in workspaces configured to process data in the US region. Workspaces configured with data processing regions outside of the US cannot connect to this source. For more information, see Regional Segment . Klenty helps sales teams to send personalized emails and automated follow-ups at scale. With Klenty, your sales team can completely automate their email outreach and focus on closing more deals. This source is maintained by Klenty. For any issues with the destination, contact the Klenty Support team . This document is about a source which is in beta This means that the Klenty Source is in active development, and some functionality may change before it becomes generally available. Getting Started From your Segment UI’s Sources page click on “Add Source”. Search for “Klenty” within the Sources Catalog and confirm by clicking “Connect”. Give the Source a nickname and follow the set up flow to “Add Source”. The nickname is a label used in the Segment interface, and Segment creates a related schema name which you query against in your warehouse. The nickname can be whatever you like, but we recommend sticking to something that reflects the source itself and distinguishes amongst your environments (Eg. SourceName_Prod, SourceName_Staging, SourceName_Dev). Copy the Write key from the Segment UI and log in to your Klenty account - navigate to Settings > Integrations > Segment Integration and paste the key to connect. Events Below is a table of events that Klenty sends to Segment. These events will show up as tables in your warehouse, and as regular events in your other Destinations. Klenty will send through the userId if available. Event Name Description Email Sent Email has been sent successfully Email Opened Prospect has opened the email Link Clicked Prospect has clicked the tracking link Email Replied Prospect has replied to the email sent Email Bounced Email was rejected by the email servers Email Unsubscribed Prospect has clicked the unsubscribe link Event Properties Below are tables outlining the properties included in the events listed above. Property Name Description event Email event type userId Prospect email ID email_id ID of the email fromId Sender email ID email_subject Subject line of the email link URL of the link clicked Adding Destinations Now that your Source is set up, you can connect it with Destinations. Log into your downstream tools and check to see that your events are populating and they contains all the properties you expect. If all your events and properties are not showing up, refer to the Destination docs for troubleshooting. If you experience any issues with how the events arrive in Segment, contact the Klenty team . This page was last modified: 07 Aug 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Events Event Properties Adding Destinations Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "streaming",
      "issues",
      "click",
      "visit",
      "partner",
      "rejected",
      "check",
      "supported",
      "troubleshooting",
      "query",
      "bounced",
      "source",
      "interface",
      "klenty",
      "before",
      "configured",
      "regular",
      "analytics",
      "change",
      "cloud",
      "about",
      "opened",
      "integrations",
      "easiest",
      "other",
      "becomes",
      "sender",
      "growth",
      "environments",
      "problems",
      "scale",
      "outlining",
      "available",
      "recommend",
      "search",
      "email_id",
      "expect",
      "documentation",
      "within",
      "navigate",
      "unsubscribed",
      "arrive",
      "through",
      "loaded",
      "creates",
      "outreach",
      "workspaces",
      "which",
      "integrate",
      "distinguishes",
      "websites",
      "catalog",
      "sources",
      "subject",
      "property",
      "region",
      "helps",
      "process",
      "follow",
      "experience",
      "label",
      "improve",
      "related",
      "request",
      "modified",
      "below",
      "sends",
      "email_subject",
      "segment",
      "functionality",
      "warehouses",
      "information",
      "contains",
      "servers",
      "populating",
      "amongst",
      "table",
      "sourcename_staging",
      "maintained",
      "events",
      "confirm",
      "data",
      "itself",
      "prospect",
      "contact",
      "against",
      "completely",
      "occurrences",
      "regions",
      "tables",
      "learn",
      "destination",
      "cannot",
      "included",
      "clicking",
      "connect",
      "clicked",
      "these",
      "something",
      "assistance",
      "outside",
      "started",
      "sales",
      "helpful",
      "warehouse",
      "downstream",
      "destinations",
      "processing",
      "point",
      "generally",
      "account",
      "sticking",
      "settings",
      "owned",
      "regional",
      "personalized",
      "email",
      "reflects",
      "description",
      "sourcename_prod",
      "focus",
      "sourcename_dev",
      "their",
      "showing",
      "nickname",
      "whatever",
      "automate",
      "teams",
      "refer",
      "please",
      "support",
      "tracking",
      "closing",
      "thanks",
      "document",
      "automated",
      "mobile",
      "fromid",
      "successfully",
      "development",
      "above",
      "active",
      "adding",
      "properties",
      "emails",
      "means",
      "integration",
      "schema",
      "connections",
      "questions",
      "create",
      "replied",
      "listed",
      "unsubscribe",
      "feedback",
      "tools",
      "write",
      "userid",
      "event",
      "deals",
      "behaviors",
      "paste",
      "reach"
    ],
    "howto_steps": [
      "navigate to Settings > Integrations > Segment Integration and paste the key to connect. Events Below is a table of events that Klenty sends to Segment. These events will show up as tables in your warehouse, and as regular events in your other Destinations. Klenty will send through the userId if available. Event Name Description Email Sent Email has been sent successfully Email Opened Prospect has opened the email Link Clicked Prospect has clicked the tracking link Email Replied Prospect has replied to the email sent Email Bounced Email was rejected by the email servers Email Unsubscribed Prospect has clicked the unsubscribe link Event Properties Below are tables outlining the properties included in the events listed above. Property Name Description event Email event type userId Prospect email ID email_id ID of the email fromId Sender email ID email_subject Subject line of the email link URL of the link clicked Adding Destinations Now that your Source is set up, you can connect it with Destinations. Log into your downstream tools and check to see that your events are populating and they contains all the properties you expect. If all your events and properties are not showing up, refer to the Destination docs for troubleshooting. If you experience any issues with how the events arrive in Segment, contact the Klenty team . This page was last modified: 07 Aug 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Events Event Properties Adding Destinations Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/cloud-apps/statsig",
    "title": " Statsig Source | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Cloud apps / Statsig Source Statsig Source On this page Getting Started Events Event Properties Add Destinations Source Info The Statsig Source is an Event Cloud source. This means that it sends data as events, which are behaviors or occurrences tied to a user and a point in time. Data from these sources can be loaded into your Segment warehouses, and also sent to  Segment streaming destinations. Learn more about cloud sources. This source is in Beta Partner Owned This integration is partner owned. Please reach out to the partner's support for any issues. Statsig helps companies safely A/B test features in production before rolling them out, avoiding product debates and costly mistakes when shipping out new features. Statsig serves all your experimentation needs with a unified platform that connects what you build with the impact you deliver. Statsig powers A/B tests and experiments on any device, in any part of the application stack, at any scale. Statsig gives you a comprehensive 360° view of how your product is performing. The Statsig integration enables custom events and exposure events to be forwarded from Statsig to Segment without any additional work on the client — this is a pure server-to-server integration. This is an Event Cloud Source which can not only forward data into your Segment warehouse, but they can also federate the exported data into your other enabled Segment Destinations. This source is maintained by Statsig. For any issues with the source, contact their Support team . Getting Started From the Segment dashboard, navigate to Catalog and search for Statsig on the Sources tab. Click the Statsig tile, and then click on the blue Add Source button. Name the instance of this source click Add Source . Locate your Write Key on the Source Overview page and copy it. Log into the Statsig console and navigate to the Integrations page. Click the Segment card. Click the Outgoing tab. Paste the Write Key captured on step #4” and click “Enable”. Now, configure how data should be mapped and which events to include. The “Event Filtering” screen allows you to select which events & event types Statsig sends to Segment. The “Map Identifiers” configuration will map Statsig identifiers to a corresponding Segment allocation of your choice. Press “Confirm” and you will see an “Integration Updated” dialogue ✅ Within a few minutes, you can observe your statsig events being ingested in Segment within the “Debugger” panel as shown below. Events The table below lists events that Statsig sends to Segment. These events appear as tables in your warehouse, and as regular events in other Destinations. Statsig will include the userId if available. More details on event payloads can be found in Statsig’s documentation . Event Description statsig::config_exposure User was exposed to a set of configuration values statsig::experiment_exposure User was exposed to an experiment statsig::gate_exposure User was exposed to a gate custom_event Any custom event name tracked Event Properties The table below lists the properties included in the events listed above. More details on event payloads can be found in Statsig’s documentation . Property Name Description event Name of the event userId ID of the user (may not always be present) email Email of the user anonymousId An anonymous identifier, typically the Statsig stableID . This can be controlled in the Statsig mapping settings shown in step #7 above. properties.metadata Any other contextual event metadata properties.value Value associated with the event originalTimestamp Timestamp the event was triggered receivedAt Timestamp the event was received Add Destinations Now that your Source is set up, you can connect it with Destinations. Log into your downstream tools and check to see that your events appear as expected, and that they contain all of the properties you expect. If your events and properties don’t appear, check the Event Delivery tool, and refer to the Destination docs for each tool for troubleshooting. If there are any issues with how the events are arriving to Segment, contact the Statsig support team . This page was last modified: 30 Oct 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Events Event Properties Add Destinations Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "received",
      "streaming",
      "issues",
      "connects",
      "click",
      "instance",
      "custom_event",
      "visit",
      "locate",
      "mapped",
      "partner",
      "performing",
      "stableid",
      "check",
      "troubleshooting",
      "features",
      "forwarded",
      "custom",
      "captured",
      "source",
      "debates",
      "before",
      "regular",
      "configure",
      "gate_exposure",
      "experiments",
      "analytics",
      "identifier",
      "there",
      "change",
      "updated",
      "cloud",
      "outgoing",
      "about",
      "integrations",
      "easiest",
      "other",
      "contextual",
      "growth",
      "contain",
      "triggered",
      "being",
      "problems",
      "scale",
      "associated",
      "available",
      "anonymous",
      "search",
      "expect",
      "documentation",
      "navigate",
      "server",
      "application",
      "choice",
      "within",
      "client",
      "loaded",
      "originaltimestamp",
      "types",
      "tests",
      "which",
      "controlled",
      "integrate",
      "screen",
      "catalog",
      "sources",
      "websites",
      "improve",
      "property",
      "additional",
      "helps",
      "tracked",
      "request",
      "exposed",
      "overview",
      "modified",
      "select",
      "product",
      "below",
      "delivery",
      "sends",
      "experiment",
      "segment",
      "warehouses",
      "table",
      "companies",
      "maintained",
      "powers",
      "events",
      "include",
      "confirm",
      "without",
      "platform",
      "data",
      "experiment_exposure",
      "typically",
      "receivedat",
      "contact",
      "debugger",
      "dialogue",
      "occurrences",
      "console",
      "tables",
      "learn",
      "destination",
      "metadata",
      "included",
      "observe",
      "connect",
      "shown",
      "federate",
      "identifiers",
      "these",
      "assistance",
      "started",
      "present",
      "helpful",
      "warehouse",
      "downstream",
      "destinations",
      "exposure",
      "point",
      "build",
      "gives",
      "timestamp",
      "enable",
      "settings",
      "account",
      "owned",
      "email",
      "avoiding",
      "always",
      "description",
      "values",
      "dashboard",
      "filtering",
      "button",
      "enabled",
      "their",
      "serves",
      "impact",
      "press",
      "config_exposure",
      "shipping",
      "device",
      "panel",
      "refer",
      "please",
      "support",
      "costly",
      "statsig",
      "forward",
      "configuration",
      "arriving",
      "safely",
      "mistakes",
      "allows",
      "thanks",
      "anonymousid",
      "mapping",
      "mobile",
      "minutes",
      "above",
      "needs",
      "deliver",
      "properties",
      "exported",
      "allocation",
      "should",
      "appear",
      "found",
      "means",
      "integration",
      "lists",
      "connections",
      "questions",
      "create",
      "ingested",
      "comprehensive",
      "listed",
      "value",
      "feedback",
      "rolling",
      "tools",
      "write",
      "corresponding",
      "enables",
      "userid",
      "expected",
      "event",
      "stack",
      "unified",
      "behaviors",
      "experimentation",
      "paste",
      "production",
      "payloads",
      "reach",
      "details"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/cloud-apps/commandbar",
    "title": " CommandBar Source | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Cloud apps / CommandBar Source CommandBar Source On this page Getting Started Events Event Properties Adding Destinations Source Info The CommandBar Source is an Event Cloud source. This means that it sends data as events, which are behaviors or occurrences tied to a user and a point in time. Data from these sources can be loaded into your Segment warehouses, and also sent to  Segment streaming destinations. Learn more about cloud sources. Partner Owned This integration is partner owned. Please reach out to the partner's support for any issues. CommandBar gives your users a searchable index of your app’s features and content, as well as customizable in-app components, like onboarding nudges. Better understand user intent and deliver step-change improvements in UX, for new and power users alike. By connecting Segment to CommandBar as a source, you can deliver search and nudge event data directly into Segment in real-time, enabling you to analyze user intent and product usage data in your preferred data tools and enrich user profiles. This source is maintained by CommandBar. For any issues with the source, contact the CommandBar Support team . Getting Started From your workspace’s Sources catalog page search for “CommandBar” and click Add Source . On the next screen, give the Source a nickname configure any other settings. The nickname will be used to designate the source in the Segment interface, and Segment will create a related schema name. The schema name is the namespace you’ll be querying against in your warehouse. Copy the Write Key from the Segment UI. If you are not sure where to find your write key, visit Segment’s help document . Log in to your CommandBar account , and navigate to the Segment integration page . Paste your Segment Write Key into the text box. Click “Connect”. [Optional] Send a test event from the CommandBar Segment integration page , and check your Segment Source Debugger to ensure the integration is properly configured. Events Below is a table of events that CommanBar can send to Segment. These events will show up as tables in your warehouse, and as regular events in your other Destinations. The type name corresponds to the value of the “type” key inside the event’s properties. Event Name Type name Description Identify N/A CommandBar booted Opened opened CommandBar opened Closed closed CommandBar closed. When the bar is closed with input text, it triggers both a closed event and a dead end event. Executions do not trigger closed events. Abandoned Search abandoned_search A dead end Command Suggestion command_suggestion Command suggested Command Execution command_execution Command executed No Results For Query no_results_for_query User’s search returned no results Nudge Shown nudge_shown Nudge shown Nudge Clicked nudge_clicked Nudge clicked User Changed Shortcut shortcut_edited User edited a command’s shortcut Event Properties Each event has its own unique properties. There are also some properties that are shared across events. All events Property Name Description Type end_user The user’s ID. string organization The CommandBar organization ID. string search The unique ID for the user’s search, if relevant. string session The unique ID for the user’s session. string type The name of the event. string user_type The type of user. string Identify Property Name Description Type formFactor The form factor for CommandBar, when loaded for the user. “modal” , “inline” userAttributes Attributes that are specific to the user, and which are included in the boot call. object Opened Property Name Description Type trigger The entrypoint through which the bar was opened. “launcher” , “keyboard” , “programmatic” Closed Property Name Description Type inputText The user’s input text when the bar was closed. string Abandoned Search Property Name Description Type inputText The text of the dead end. string trigger The trigger for the dead end. “Backspaced” , “Closed with text” , “Resetting search” command The id of the currently active command, if there is one. number resource The context key of the currently active resource, if there is one. string results Information about the results being displayed when the dead end happened. object Command Suggestion Property Name Description Type text The text of the suggestion. string Command Execution Property Name Description Type command The unique id of the command. For commands defined in the Editor, the value will be a number. For programmatic commands, the name (string) provided will be used. number string commandDetails The details of the command. object commandText The text of the command. string category The category id of the command. Only provided if the command has a category. number formFactor The form factor of CommandBar. “modal” “inline” placeholder The text of the placeholder of CommandBar. string previousCommands The IDs of commands executed by the user earlier in the same session. string[] ranking The ranking order of the command, if relevant. number shortcut True and only provided if this command was triggered by a shortcut. boolean source Source of the executed command. “standard” “programmatic” customShortcut Shortcut string if this command has a custom user-set shortcut. any string inputText The text of the user’s query. string icon The icon of the command, either a path or an SVG. string url The URL of the command. Only provided if the command is a Link command. string No Results For Query Property Name Description Type inputText The text of the user’s query. string Nudge Shown Property Name Description Type id The ID of the nudge. number slug The slug or name of the nudge. string frequency_limit The frequency limit of the nudge, for example no_limit . string on_select The command to execute when the nudge is clicked. object trigger The trigger for the nudge. object Nudge Clicked Property Name Description Type id The ID of the nudge. number slug The slug or name of the nudge. string frequency_limit The frequency limit of the nudge, for example, no_limit . string on_select The command to execute when the nudge is clicked. object trigger The trigger for the nudge. object Shortcut Edited Property Name Description Type command The unique id of the command. For commands defined in the Editor, the value will be a number. For programmatic commands, the name (string) provided will be used. number, string commandText The text of the command. string category The category id of the command. Only provided if the command has a category. number source Source of the executed command. “standard”, “programmatic” defaultShortcut The command’s default shortcut. Empty string if the command does not have a default set. string oldShortcut Previously set shortcut of the command. string newShortcut The new user-set shortcut of the command. string Adding Destinations Now that your Source is set up, you can connect it with Destinations. Log into your downstream tools and check to see that your events are populating and they contains all the properties you expect. If all your events and properties are not showing up, refer to the Destination docs for troubleshooting. If you experience any issues with how the events arrive in Segment, contact the CommandBar team . This page was last modified: 07 Aug 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Events Event Properties Adding Destinations Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "defined",
      "streaming",
      "issues",
      "directly",
      "click",
      "visit",
      "relevant",
      "keyboard",
      "partner",
      "check",
      "troubleshooting",
      "features",
      "query",
      "custom",
      "source",
      "interface",
      "regular",
      "configured",
      "order",
      "configure",
      "frequency",
      "analytics",
      "commandbar",
      "there",
      "change",
      "nudge_clicked",
      "no_results_for_query",
      "cloud",
      "organization",
      "programmatic",
      "boolean",
      "about",
      "opened",
      "easiest",
      "other",
      "properly",
      "closed",
      "session",
      "standard",
      "growth",
      "triggered",
      "analyze",
      "being",
      "defaultshortcut",
      "problems",
      "resetting",
      "attributes",
      "returned",
      "newshortcut",
      "formfactor",
      "searchable",
      "nudges",
      "previously",
      "search",
      "expect",
      "documentation",
      "navigate",
      "inside",
      "booted",
      "arrive",
      "commanbar",
      "through",
      "loaded",
      "index",
      "suggested",
      "commanddetails",
      "category",
      "placeholder",
      "example",
      "launcher",
      "triggers",
      "which",
      "oldshortcut",
      "specific",
      "screen",
      "catalog",
      "sources",
      "number",
      "integrate",
      "websites",
      "improve",
      "property",
      "experience",
      "request",
      "related",
      "modified",
      "power",
      "execute",
      "product",
      "below",
      "connecting",
      "sends",
      "results",
      "happened",
      "segment",
      "warehouses",
      "trigger",
      "information",
      "contains",
      "populating",
      "table",
      "user_type",
      "maintained",
      "executions",
      "events",
      "abandoned",
      "components",
      "previouscommands",
      "inputtext",
      "editor",
      "data",
      "command_suggestion",
      "enabling",
      "empty",
      "input",
      "currently",
      "content",
      "contact",
      "against",
      "nudge",
      "command_execution",
      "debugger",
      "inline",
      "occurrences",
      "earlier",
      "tables",
      "learn",
      "string",
      "shared",
      "destination",
      "resource",
      "limit",
      "included",
      "userattributes",
      "connect",
      "executed",
      "shown",
      "shortcut",
      "clicked",
      "no_limit",
      "these",
      "assistance",
      "started",
      "namespace",
      "helpful",
      "warehouse",
      "where",
      "downstream",
      "destinations",
      "point",
      "optional",
      "gives",
      "account",
      "settings",
      "improvements",
      "better",
      "owned",
      "understand",
      "edited",
      "onboarding",
      "object",
      "description",
      "provided",
      "commands",
      "factor",
      "designate",
      "showing",
      "ensure",
      "nickname",
      "profiles",
      "customshortcut",
      "intent",
      "suggestion",
      "refer",
      "please",
      "shortcut_edited",
      "command",
      "support",
      "unique",
      "backspaced",
      "ranking",
      "workspace",
      "identify",
      "entrypoint",
      "alike",
      "preferred",
      "thanks",
      "document",
      "context",
      "modal",
      "usage",
      "default",
      "mobile",
      "on_select",
      "execution",
      "either",
      "active",
      "adding",
      "deliver",
      "properties",
      "across",
      "end_user",
      "displayed",
      "means",
      "integration",
      "schema",
      "connections",
      "nudge_shown",
      "create",
      "frequency_limit",
      "questions",
      "corresponds",
      "enrich",
      "querying",
      "value",
      "feedback",
      "customizable",
      "tools",
      "commandtext",
      "write",
      "users",
      "event",
      "changed",
      "behaviors",
      "paste",
      "abandoned_search",
      "reach",
      "details"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/find-writekey/",
    "title": " Locate your Write Key | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Locate your Write Key Locate your Write Key On this page Find the write key for a source Locate a source using your write key The write key is a unique identifier for each source. It lets Segment know which source is sending the data and which destinations should receive that data. Find the write key for a source To find a write key, you first need to create an event streams source like a website, server, or mobile source. ( Cloud-sources do not have write keys, as they use a token or key from your account with that service.) Then, in the Source, go to Settings and select API Keys . Now you can add the source’s write key to your app and begin sending data to Segment. Locate a source using your write key To find the source given a write key within your workspace, open your workspace and select the search icon. Enter your write key into the search bar. If the write key exists in the workspace and is connected to a source, the source shows up in the list of results. This method is only available to locate event streams sources This method cannot be used to find a destination or cloud event source. This page was last modified: 20 Nov 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Find the write key for a source Locate a source using your write key Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "website",
      "token",
      "connected",
      "workspace",
      "visit",
      "locate",
      "begin",
      "these",
      "which",
      "within",
      "assistance",
      "using",
      "thanks",
      "sources",
      "started",
      "integrate",
      "websites",
      "destination",
      "improve",
      "request",
      "mobile",
      "helpful",
      "source",
      "destinations",
      "shows",
      "modified",
      "account",
      "select",
      "settings",
      "results",
      "support",
      "analytics",
      "identifier",
      "segment",
      "given",
      "change",
      "should",
      "cloud",
      "api",
      "exists",
      "first",
      "connections",
      "easiest",
      "create",
      "questions",
      "method",
      "growth",
      "receive",
      "sending",
      "feedback",
      "tools",
      "data",
      "write",
      "enter",
      "service",
      "problems",
      "event",
      "streams",
      "contact",
      "available",
      "search",
      "cannot",
      "documentation",
      "unique",
      "server"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#find-the-write-key-for-a-source",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/about-cloud-sources/",
    "title": " Cloud Sources | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Cloud Sources Cloud Sources On this page How do cloud sources work? Set up a cloud source Troubleshooting cloud sources Using Cloud Source data Querying source data Cloud-App Sources (often shortened to Cloud Sources) allow you to pull in data from third-party tools so you can use it in Segment. There are two types of Cloud Apps: Object and Event sources. As in the basic tracking API, objects usually contain information about a person or group which is updated over time, while event data happens once, and is appended to a list. Event Cloud-App Sources Event Cloud Sources can export their data both into Segment warehouses, and into other enabled Segment integrations that work with event data. Object Cloud-App Sources Object Cloud App Sources can export data and import it directly into a Segment warehouse. You must have a Segment warehouse enabled before you enable these. From the warehouse, you can analyze your data with SQL, use Reverse ETL to extract data, or use Engage SQL Traits to build audiences. Some examples of Object Cloud sources are Salesforce (account information), Zendesk (support cases), and Stripe (payments information). In the app, data from website, mobile, and server sources can go to a warehouse or to destinations. Object Cloud-App Source data can only go to Warehouses. How do cloud sources work? Sources are functionally comprised of either one or both of the following components: a “sync” component and a “streaming” component. They work together to populate logical collections of data based on upstream resource availability and following data normalization best practices. These collections may be either events (append only data streams, akin to “facts” in data warehousing parlance) or objects (dimensional values that may be updated based on changes in state upstream). Sync frequency You enable a cloud source from the Segment web app, and grant Segment access by pasting an API key or authenticating with OAuth. Segment then starts a scheduled job on your behalf which makes requests to the downstream tool, normalizes and transforms the data, and forwards that data to the Segment API. Cloud sources attempt to use as few API calls as possible, and (where possible) only fetch data that changed since the last sync. The syncs might take a long time (especially on the first sync), so the cloud source syncs have robust retry and rate limiting logic. Contact Segment Product Support if you’d like to change the cadence of your source’s sync frequency. API call use and collection selection We make an effort to be respectful of your API call allotments and limits. For example, in the case of Salesforce, we issue only one query per collection per run, using the absolute minimum number of API calls possible (typically about 350/day). Moreover, we’re deliberate about which collections we pull, striking a balance between allowing you to get a full picture of your users and reducing extraneous data (like administrative and metadata tables). Soon, we’ll allow you to specify which collections you care about during the source set up phase, so if you need to cut down on calls, you’ll be able to just deselect collections. Streaming Streaming components are used to listen in real time to webhooks from downstream cloud sources, normalize and transform the data, and forward it to our APIs. Both sync and streaming components can forward data to our event tracking and objects upsertion API processing layers, but generally sync components are used to fetch objects and streaming components listen for events. Set up a cloud source To use cloud sources, we suggest going through the following steps. Get cloud source credentials Get warehouse credentials Choose your preferred sync time Before you connect a source, check out the sources documentation . See what kind of credentials you will need to enable the source. Different sources require different levels of permissioning. Next, you’ll also need to get the credentials for your warehouse . Once you have the necessary credentials (or are logged in to OAuth for your cloud source), you should be ready to go! Go to the “sources catalog” in the Segment web app. Choose a cloud source, and click Configure. Enter your credentials or log in using OAuth. Go to the “warehouses” tab and enter the credentials for your warehouse if you don’t already have one connected to Segment. Based on your plan, you can schedule a certain number of syncs per day. We suggest setting these up so your dashboards and reports are fresh for reporting, but not at the same time of day that a lot of people are querying your database. Troubleshooting cloud sources The most common reason cloud sources have trouble because of authentication or permission issues. When the issue is related to authentication, you’ll see an “access denied” connection error in your source details. When this happens, Segment quits the process early and does not make any further attempts on any collections. When you successfully authenticate, but your user lacks the required permissions (for example, if you use an agent login instead of an administrator for Zendesk), Segment attempts to pull each collection and reports errors on a per-collection basis. This helps you troubleshoot why source runs fail, because sometimes permission-based denials are scoped to specific resources from the upstream tool. Segment attempts to make the errors displayed in the UI clear enough so we don’t need to document all of them. However, if it’s not clear what to do to fix an error you encounter, contact support and let them know. Sometimes, when the sync job fails due to an unhandled error or is mysteriously hanging for too long, we’ll kill the job and report a failure with instructions to contact support. When this happens, our support and engineering teams have already been notified of the failure and have the complete set of logs to set about debugging and remediating the issue, but  don’t hesitate to get in touch so they can keep you in the loop! Using Cloud Source data What kind of data does Segment pull from each source? In general, we’ve focused on pulling all of the collections directly related to the customer experience. We do not automatically pull all collections available from a partner API, since many of them aren’t relevant to the customer journey. You can see a list of the collections we pull in the docs for each cloud source . Each collection reflects a table in your database. Contact Segment Product Support if you need additional data collected, or to change the schema to do the analysis you want. We’d love to know what analysis you’re trying to run, what additional data you need, and we’ll share with the product team to evaluate. What questions can you answer with data from cloud, web, and mobile sources combined in a single warehouse? What content drives people forward in our sales funnel? What are the top pages viewed before a support ticket is sent? Do people who opt into text messages engage more than people who only get emails? Do customers that interact with our support team activate faster? - Retain more overtime? What are all of the communications across marketing, success, and sales, this account has had in the last 2 months? Querying source data Generally, you need intermediate- to advanced SQL experience to explore and analyze cloud source data in a warehouse. The following resources can help you get up and running more quickly! Joining IDs As you start to get into joining across different types of sources, you’ll need a way to join user IDs. This help article explains how to do this in detail. Partner Dashboards Our BI partners at Mode, Looker, BIME, Periscope, and Chartio have created out of the box dashboards that work on top of our source schemas. This page was last modified: 22 Oct 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page How do cloud sources work? Set up a cloud source Troubleshooting cloud sources Using Cloud Source data Querying source data Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "website",
      "connected",
      "group",
      "extraneous",
      "troubleshooting",
      "source",
      "error",
      "database",
      "chartio",
      "denials",
      "easiest",
      "between",
      "sometimes",
      "customers",
      "analyze",
      "basis",
      "forwards",
      "permission",
      "documentation",
      "server",
      "availability",
      "makes",
      "attempt",
      "which",
      "state",
      "improve",
      "limiting",
      "practices",
      "warehouses",
      "pages",
      "table",
      "levels",
      "selection",
      "logical",
      "shortened",
      "errors",
      "early",
      "content",
      "certain",
      "allowing",
      "choose",
      "helpful",
      "warehouse",
      "collected",
      "where",
      "destinations",
      "while",
      "collection",
      "reducing",
      "quits",
      "article",
      "remediating",
      "explore",
      "schedule",
      "during",
      "enough",
      "document",
      "failure",
      "automatically",
      "retain",
      "pasting",
      "deliberate",
      "successfully",
      "emails",
      "should",
      "advanced",
      "drives",
      "first",
      "create",
      "querying",
      "feedback",
      "marketing",
      "enter",
      "limits",
      "event",
      "directly",
      "minimum",
      "objects",
      "partner",
      "traits",
      "specify",
      "permissions",
      "query",
      "might",
      "configure",
      "analytics",
      "warehousing",
      "change",
      "customer",
      "cloud",
      "necessary",
      "clear",
      "mysteriously",
      "troubleshoot",
      "contain",
      "streams",
      "together",
      "authenticate",
      "retry",
      "partners",
      "balance",
      "integrate",
      "using",
      "credentials",
      "sources",
      "basic",
      "websites",
      "additional",
      "encounter",
      "related",
      "modified",
      "steps",
      "already",
      "share",
      "information",
      "communications",
      "effort",
      "components",
      "people",
      "authenticating",
      "data",
      "typically",
      "activate",
      "fresh",
      "interact",
      "common",
      "tables",
      "complete",
      "import",
      "dashboards",
      "single",
      "engineering",
      "assistance",
      "webhooks",
      "sales",
      "generally",
      "build",
      "account",
      "administrative",
      "evaluate",
      "trying",
      "syncs",
      "object",
      "dimensional",
      "grant",
      "usually",
      "component",
      "respectful",
      "running",
      "since",
      "required",
      "logged",
      "either",
      "unhandled",
      "across",
      "api",
      "picture",
      "going",
      "joining",
      "tools",
      "analysis",
      "changed",
      "issues",
      "click",
      "visit",
      "viewed",
      "reports",
      "reporting",
      "starts",
      "transform",
      "following",
      "there",
      "updated",
      "answer",
      "about",
      "funnel",
      "payments",
      "integrations",
      "instructions",
      "problems",
      "parlance",
      "agent",
      "overtime",
      "possible",
      "setting",
      "suggest",
      "types",
      "faster",
      "number",
      "specific",
      "however",
      "notified",
      "messages",
      "issue",
      "product",
      "different",
      "listen",
      "events",
      "lacks",
      "fetch",
      "reverse",
      "logic",
      "administrator",
      "allow",
      "connect",
      "append",
      "reason",
      "detail",
      "downstream",
      "third",
      "ticket",
      "intermediate",
      "enable",
      "connection",
      "debugging",
      "enabled",
      "comprised",
      "party",
      "quickly",
      "forward",
      "normalize",
      "salesforce",
      "behalf",
      "deselect",
      "thanks",
      "authentication",
      "mobile",
      "engage",
      "happens",
      "cadence",
      "changes",
      "normalization",
      "schema",
      "allotments",
      "schemas",
      "person",
      "functionally",
      "hanging",
      "start",
      "examples",
      "streaming",
      "relevant",
      "access",
      "robust",
      "journey",
      "check",
      "before",
      "frequency",
      "transforms",
      "based",
      "because",
      "looker",
      "other",
      "striking",
      "growth",
      "require",
      "available",
      "upsertion",
      "months",
      "phase",
      "through",
      "example",
      "ready",
      "scheduled",
      "touch",
      "permissioning",
      "layers",
      "absolute",
      "catalog",
      "experience",
      "helps",
      "requests",
      "process",
      "request",
      "focused",
      "extract",
      "export",
      "segment",
      "moreover",
      "combined",
      "success",
      "normalizes",
      "collections",
      "denied",
      "contact",
      "report",
      "resource",
      "metadata",
      "these",
      "attempts",
      "started",
      "resources",
      "processing",
      "hesitate",
      "periscope",
      "zendesk",
      "instead",
      "cases",
      "reflects",
      "values",
      "calls",
      "pulling",
      "scoped",
      "their",
      "facts",
      "oauth",
      "further",
      "created",
      "teams",
      "support",
      "login",
      "populate",
      "tracking",
      "preferred",
      "appended",
      "general",
      "displayed",
      "connections",
      "often",
      "questions",
      "explains",
      "users",
      "upstream",
      "especially",
      "stripe",
      "fails",
      "audiences",
      "trouble",
      "details"
    ],
    "howto_steps": [
      "Retain more overtime? What are all of the communications across marketing, success, and sales, this account has had in the last 2 months? Querying source data Generally, you need intermediate",
      "to advanced SQL experience to explore and analyze cloud source data in a warehouse. The following resources can help you get up and running more quickly! Joining IDs As you start to get into joining across different types of sources, you’ll need a way to join user IDs. This help article explains how to do this in detail. Partner Dashboards Our BI partners at Mode, Looker, BIME, Periscope, and Chartio have created out of the box dashboards that work on top of our source schemas. This page was last modified: 22 Oct 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page How do cloud sources work? Set up a cloud source Troubleshooting cloud sources Using Cloud Source data Querying source data Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/#event-streams-sources",
    "title": " Sources Overview | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources Overview Sources Overview On this page What is a source? Types of sources Event streams sources Cloud app sources Reverse ETL sources Create a source Library tiers Related content Sources Catalog What is a source? A source is a website, server library, mobile SDK, or cloud application which can send data into Segment. It’s where your data originates. Add a source to collect data to understand who your customers are and how they’re using your product. Create a source for each website or app you want to track. While it’s not required that you have a single source for each server, site, or app, you should create a source for each unique source of data. Each source you create has a write key, which is used to send data to that source. For example, to load analytics.js , the Segment JavaScript library on your page, the snippet on the Quickstart Guide includes: analytics . identify ( ' user_123 ' , { email : ' jane.kim@example.com ' , name : ' Jane Kim ' }); If you don't see the source you're looking for in our catalog If a tool is not listed as a supported source in Segment’s catalog , then it is not possible to incorporate the integration out-of-the-box within a Segment workspace. However, as an alternative, you can use the HTTP API source to collect data from the tool’s API. You can also use Functions to send or receive data from other tools. Types of sources Segment has three types of sources: Event streams Cloud app sources Reverse ETL Event streams sources Event streams sources collect data from your website or app to monitor user actions. These sources include website libraries , mobile , and server sources . Source Overview The Source Overview page for an event stream source shows you a pipeline view of all events Segment receives from your source, events that failed on ingest, events that are filtered at the source level, and “eligible events”, which are the events that will flow into your destinations. If you select one of the steps in the pipeline view, you can see a line chart that reflects the fluctuations in volume alongside a breakdown table that has more details about the events impacted by the selected step. Pipeline view The pipeline view shows each of the four steps Segment encounters when processing data from your source: Events successfully received : All events that Segment received from your source. Failed on ingest : Events that failed at the Tracking API level. For more information about errors that might cause events to fail on ingest, see Delivery Overview’s Troubleshooting documentation. Filtered at source : Events that were filtered out by source schema controls, Tracking Plans, or a common JSON schema. Eligible events : Eligible events are the events that flow downstream to your Segment destinations. This value is read-only, but you can see the events that flow downstream to a particular destination using Delivery Overview . You can use the time picker located on the Source Overview page to specify a time period (last 10 minutes, 1 hour, 24 hours, 7 days, 2 weeks, or a custom date range over the last two weeks) for which you’d like to see data. Segment sets the time picker to show data for the last 24 hours by default. Breakdown table The breakdown table displays three tabs, Event type , Event name , and App version . Event type : The Segment Spec event type (Track call vs. Identify call, for example). This tab also contains a “% change” metric, which displays how the event counts differ from the last comparable time range, represented as a percentage. Event name : The event name, provided by you or the source. App version : The app/release version, provided by you or the source. Each of these tabs displays an event count, which is the total number of events that Segment received in a particular step. The Unnamed or batched events under the Event Name tab is a collection of all identify and page/screen calls in the source. Website libraries Analytics.js , the JavaScript library, is the most powerful way to track customer data from your website. If you’re just starting out, Segment recommends it over server-side libraries as the simplest installation for any website. The Analytics Quickstart Guide Analytics and data collection is a very broad topic and it can be quite overwhelming. How do you get started? Mobile Segment’s Mobile SDKs are the best way to simplify your iOS, Android, and Xamarin app tracking. Try them over server-side sources as the default installation for any mobile app. AMP Android Android Wear iOS Kotlin React Native Swift Xamarin Analytics-Flutter library The Analytics-Flutter library is currently only available in pilot phase and is governed by Segment’s First Access and Beta Preview Terms . If you’d like to try out this library, access the Analytics-Flutter GitHub repository . Server Segment’s server-side sources let you send analytics data directly from your servers. Segment recommends tracking from your servers when device-mode tracking (tracking on the client) doesn’t work. Check out the guide on server-side tracking if you’re not sure whether it makes sense for your use case. Clojure Go Java Node.js PHP Python Ruby .NET Cloud-mode tracking Server-side data management is when tag sends data to the Segment servers, which then passes that data to the destination system. Cloud app sources Cloud app sources empower you to pull together data from all of your different third-party tools into a Segment warehouse or to your other enabled integrated tools. They send data about your users from your connected web apps. There are two types of Cloud Apps: Object cloud sources and Event cloud sources . Comparing Cloud Sources Wondering which cloud-apps send which types of data? Check out the Cloud Sources comparison. Object Cloud Sources These Cloud App Sources can export data from its third party tool and import it directly into your Segment warehouse. Make sure you have a Segment warehouse enabled before you enable any of the following sources: Facebook Ads Google Ads HubSpot Intercom Mailchimp Mandrill Marketo Salesforce Salesforce Marketing Cloud SendGrid Stripe Twilio Zendesk Event Cloud Sources These Cloud App Sources can not only export data into your Segment warehouse, but they can also federate the exported data into your other enabled Segment integrations: ActiveCampaign Aircall Airship Alloy Flow Amazon S3 Amplitude Cohorts Antavo Authvia AutopilotHQ Beamer Blip Bluedot Blueshift Braze Candu Chatlio CleverTap CommandBar ConfigCat Customer.io Delighted Drip Elastic Path Elastic Path CX Studio Facebook Lead Ads Factual Engine Foursquare Movement Freshchat Friendbuy Gladly GWEN Webhooks Herow IBM Watson Assistant Inflection Insider Iterable Jebbit Klaviyo Klenty LaunchDarkly Leanplum Listrak LiveLike (Source) Looker Mailjet Mailmodo Mixpanel Cohorts MoEngage (Source) Moesif API Analytics Navattic Nudgespot One Creation OneSignal OneTrust Paytronix Pendo ProveSource Pushwoosh Source Qualtrics Quin AI Radar Refiner Selligent Marketing Cloud SendGrid Marketing Campaigns Shopify (by Littledata) Shopify - Powered by Fueled Statsig Synap Upollo UserGuiding Vero Voucherify White Label Loyalty WorkRamp Yotpo HTTP If Segment doesn’t have a library for your environment, you can send your data directly to the HTTP Tracking API . All of Segment’s other sources and platforms use the HTTP API to work their magic behind the scenes. Pixel Segment’s Pixel Tracking API lets you track events from environments where you can’t execute code, like tracking email opens. Event name Description Email Delivered The message has been successfully delivered to the receiving server. Email Opened The recipient has opened the HTML message. You need to enable Open Tracking for getting this type of event. Email Link Clicked The recipient clicked on a link within the message. You need to enable Click Tracking for getting this type of event. Email Bounced The receiving server could not or would not accept message. Email Marked as Spam The recipient marked message as spam. Unsubscribe The recipient clicked on message’s subscription management link. Reverse ETL sources Reverse ETL sources are data warehouses that enable you to use Reverse ETL to send data from your warehouse source to your destinations. Reverse ETL supports these sources: BigQuery Databricks Postgres Redshift Snowflake Segment is actively working on adding more sources. If you’d like to request Segment to add a particular source, please note it on the feedback form . Create a source To create a source: Navigate to Connections and click Add Source . Click the Source you’d like to add. Note: More than 80% of workspaces start by adding their JavaScript website. Click Add Source . Enter a name for your source as well as any information on the setup page. Click Add Source . Once you’ve created a source, the source is automatically enabled and can immediately receive events. You can review your new events in that source’s Debugger tab. Sources not connected to an enabled destination are disabled after 14 days If your source is not connected to any destinations or is only connected to disabled destinations, Segment automatically disables this source after 14 days, even if the source is receiving events. Disabled sources will no longer receive data. \nYou can view when Segment disables your destination in your workspace’s Audit Trail as Event : Source Disabled with Actor : Segment .\nWorkspace members receive an email notification before Segment disables your source so that your team has time to take action.\nIf you would like to prevent this behavior in your workspace, fill out this Airtable form . One source or multiple sources? Segment suggests that you create one source for each type of data you want to collect. For example, you might have one source for all of your website tracking and a different source for any mobile tracking. Creating one source per data type provides the following benefits: Debugger ease of use - mixing libraries/sources on a single API key means you’re heavily reliant on filtering to actually test events Flexibility sending data to different projects - if you want to have different warehouse schemas, analytics projects, etc, having multiple sources would create this separation More control - as your account grows with the number of destinations you enable, having separate sources allows you to have more control A source type cannot be changed after it is created. You must create a new source if you would like to use a different source type. Library tiers Segment has defined three tiers for libraries: Flagship, Maintenance, and Community. These tiers indicate the level of support, enhancements, and maintenance each library receives from Segment. The criteria for assigning a library to a tier include its overall usage by customers and the availability of newer versions. Here’s how Segment defines each tier: Flagship libraries offer the most up-to-date functionality on Segment’s most popular platforms. Segment actively maintains Flagship libraries, which benefit from new feature releases and ongoing development and support. Maintenance libraries send data as intended but receive no new feature support and only critical maintenance updates from Segment. When possible, Segment recommends using a Flagship version of these libraries. Community libraries are neither managed nor updated by Segment. These libraries are available on GitHub under the MIT License for the open-source community to fork or contribute. If a library falls into one of these tiers, you’ll see the tier label at the beginning of the library’s page. This page was last modified: 18 Nov 2024 Further reading Sources Catalog A list of the available sources on the Segment platform. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page What is a source? Types of sources Event streams sources Cloud app sources Reverse ETL sources Create a source Library tiers Related content Sources Catalog Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "conceptual",
    "keywords": [
      "working",
      "website",
      "heavily",
      "connected",
      "javascript",
      "supported",
      "troubleshooting",
      "custom",
      "source",
      "encounters",
      "overwhelming",
      "klenty",
      "commandbar",
      "factual",
      "engine",
      "leanplum",
      "range",
      "community",
      "easiest",
      "synap",
      "eligible",
      "customers",
      "failed",
      "assistant",
      "impacted",
      "benefits",
      "documentation",
      "quickstart",
      "server",
      "integrated",
      "makes",
      "availability",
      "powerful",
      "disabled",
      "which",
      "mailmodo",
      "behind",
      "marketo",
      "suggests",
      "improve",
      "qualtrics",
      "members",
      "separate",
      "python",
      "clevertap",
      "execute",
      "warehouses",
      "contains",
      "audit",
      "trail",
      "delivered",
      "table",
      "counts",
      "include",
      "actively",
      "pixel",
      "errors",
      "intended",
      "ongoing",
      "content",
      "debugger",
      "terms",
      "cannot",
      "notification",
      "user_123",
      "defines",
      "sendgrid",
      "alloy",
      "platforms",
      "helpful",
      "warehouse",
      "where",
      "destinations",
      "swift",
      "marked",
      "creating",
      "batched",
      "while",
      "email",
      "collection",
      "recommends",
      "release",
      "passes",
      "simplest",
      "receives",
      "onetrust",
      "maintains",
      "cause",
      "track",
      "represented",
      "facebook",
      "delighted",
      "chart",
      "automatically",
      "successfully",
      "minutes",
      "development",
      "indicate",
      "exported",
      "should",
      "first",
      "create",
      "mixpanel",
      "beamer",
      "value",
      "unsubscribe",
      "feedback",
      "marketing",
      "criteria",
      "write",
      "enter",
      "event",
      "total",
      "reliant",
      "elastic",
      "pipeline",
      "actually",
      "located",
      "control",
      "hubspot",
      "getting",
      "defined",
      "directly",
      "clojure",
      "livelike",
      "metric",
      "incorporate",
      "specify",
      "bigquery",
      "provides",
      "bounced",
      "might",
      "license",
      "analytics",
      "change",
      "customer",
      "cloud",
      "react",
      "selected",
      "system",
      "studio",
      "klaviyo",
      "streams",
      "together",
      "fluctuations",
      "flutter",
      "application",
      "provesource",
      "governed",
      "userguiding",
      "workspaces",
      "integrate",
      "using",
      "screen",
      "sources",
      "websites",
      "hours",
      "benefit",
      "related",
      "modified",
      "steps",
      "information",
      "servers",
      "powered",
      "flexibility",
      "weeks",
      "data",
      "libraries",
      "comparison",
      "mailjet",
      "common",
      "behavior",
      "github",
      "flagship",
      "import",
      "single",
      "braze",
      "federate",
      "campaigns",
      "assistance",
      "webhooks",
      "snippet",
      "popular",
      "mixing",
      "listrak",
      "looking",
      "account",
      "immediately",
      "configcat",
      "object",
      "amplitude",
      "displays",
      "provided",
      "blueshift",
      "guide",
      "broad",
      "please",
      "multiple",
      "period",
      "count",
      "repository",
      "identify",
      "littledata",
      "allows",
      "chatlio",
      "differ",
      "candu",
      "required",
      "shopify",
      "snowflake",
      "critical",
      "airtable",
      "level",
      "api",
      "contribute",
      "integration",
      "kotlin",
      "listed",
      "tools",
      "topic",
      "changed",
      "mailchimp",
      "herow",
      "prevent",
      "supports",
      "monitor",
      "click",
      "visit",
      "onesignal",
      "magic",
      "xamarin",
      "iterable",
      "actor",
      "following",
      "there",
      "updated",
      "ingest",
      "about",
      "integrations",
      "originates",
      "under",
      "environments",
      "friendbuy",
      "problems",
      "pilot",
      "three",
      "possible",
      "white",
      "newer",
      "enhancements",
      "within",
      "navigate",
      "managed",
      "stream",
      "types",
      "feature",
      "assigning",
      "number",
      "however",
      "refiner",
      "label",
      "select",
      "product",
      "delivery",
      "functionality",
      "different",
      "quite",
      "postgres",
      "grows",
      "events",
      "platform",
      "native",
      "jebbit",
      "comparing",
      "overall",
      "message",
      "databricks",
      "selligent",
      "android",
      "currently",
      "falls",
      "comparable",
      "watson",
      "reverse",
      "destination",
      "radar",
      "whether",
      "unnamed",
      "would",
      "airship",
      "downstream",
      "voucherify",
      "third",
      "enable",
      "movement",
      "filtering",
      "twilio",
      "enabled",
      "autopilothq",
      "sending",
      "setup",
      "simplify",
      "device",
      "wondering",
      "includes",
      "party",
      "accept",
      "receiving",
      "unique",
      "releases",
      "maintenance",
      "statsig",
      "workspace",
      "salesforce",
      "after",
      "cohorts",
      "picker",
      "thanks",
      "google",
      "bluedot",
      "paytronix",
      "mobile",
      "moengage",
      "preview",
      "adding",
      "creation",
      "means",
      "schema",
      "doesn",
      "loyalty",
      "gladly",
      "schemas",
      "beginning",
      "tiers",
      "disables",
      "redshift",
      "start",
      "alongside",
      "particular",
      "opens",
      "navattic",
      "filtered",
      "management",
      "controls",
      "authvia",
      "received",
      "access",
      "installation",
      "updates",
      "versions",
      "check",
      "longer",
      "antavo",
      "before",
      "reading",
      "looker",
      "sense",
      "opened",
      "starting",
      "other",
      "library",
      "insider",
      "growth",
      "scenes",
      "available",
      "phase",
      "workramp",
      "freshchat",
      "could",
      "client",
      "example",
      "review",
      "catalog",
      "offer",
      "request",
      "overview",
      "pushwoosh",
      "sends",
      "export",
      "segment",
      "moesif",
      "functions",
      "receive",
      "contact",
      "breakdown",
      "fueled",
      "clicked",
      "these",
      "started",
      "processing",
      "alternative",
      "zendesk",
      "having",
      "amazon",
      "separation",
      "understand",
      "reflects",
      "description",
      "upollo",
      "calls",
      "subscription",
      "projects",
      "foursquare",
      "their",
      "activecampaign",
      "empower",
      "environment",
      "further",
      "mandrill",
      "pendo",
      "created",
      "launchdarkly",
      "version",
      "support",
      "plans",
      "tracking",
      "action",
      "recipient",
      "nudgespot",
      "usage",
      "default",
      "shows",
      "actions",
      "percentage",
      "connections",
      "intercom",
      "questions",
      "collect",
      "yotpo",
      "users",
      "volume",
      "inflection",
      "stripe",
      "aircall",
      "neither",
      "details"
    ],
    "howto_steps": [
      "Powered by Fueled Statsig Synap Upollo UserGuiding Vero Voucherify White Label Loyalty WorkRamp Yotpo HTTP If Segment doesn’t have a library for your environment, you can send your data directly to the HTTP Tracking API . All of Segment’s other sources and platforms use the HTTP API to work their magic behind the scenes. Pixel Segment’s Pixel Tracking API lets you track events from environments where you can’t execute code, like tracking email opens. Event name Description Email Delivered The message has been successfully delivered to the receiving server. Email Opened The recipient has opened the HTML message. You need to enable Open Tracking for getting this type of event. Email Link Clicked The recipient clicked on a link within the message. You need to enable Click Tracking for getting this type of event. Email Bounced The receiving server could not or would not accept message. Email Marked as Spam The recipient marked message as spam. Unsubscribe The recipient clicked on message’s subscription management link. Reverse ETL sources Reverse ETL sources are data warehouses that enable you to use Reverse ETL to send data from your warehouse source to your destinations. Reverse ETL supports these sources: BigQuery Databricks Postgres Redshift Snowflake Segment is actively working on adding more sources. If you’d like to request Segment to add a particular source, please note it on the feedback form . Create a source To create a source: Navigate to Connections and click Add Source . Click the Source you’d like to add. Note: More than 80% of workspaces start by adding their JavaScript website. Click Add Source . Enter a name for your source as well as any information on the setup page. Click Add Source . Once you’ve created a source, the source is automatically enabled and can immediately receive events. You can review your new events in that source’s Debugger tab. Sources not connected to an enabled destination are disabled after 14 days If your source is not connected to any destinations or is only connected to disabled destinations, Segment automatically disables this source after 14 days, even if the source is receiving events. Disabled sources will no longer receive data. \nYou can view when Segment disables your destination in your workspace’s Audit Trail as Event : Source Disabled with Actor : Segment .\nWorkspace members receive an email notification before Segment disables your source so that your team has time to take action.\nIf you would like to prevent this behavior in your workspace, fill out this Airtable form . One source or multiple sources? Segment suggests that you create one source for each type of data you want to collect. For example, you might have one source for all of your website tracking and a different source for any mobile tracking. Creating one source per data type provides the following benefits: Debugger ease of use",
      "mixing libraries/sources on a single API key means you’re heavily reliant on filtering to actually test events Flexibility sending data to different projects",
      "if you want to have different warehouse schemas, analytics projects, etc, having multiple sources would create this separation More control",
      "as your account grows with the number of destinations you enable, having separate sources allows you to have more control A source type cannot be changed after it is created. You must create a new source if you would like to use a different source type. Library tiers Segment has defined three tiers for libraries: Flagship, Maintenance, and Community. These tiers indicate the level of support, enhancements, and maintenance each library receives from Segment. The criteria for assigning a library to a tier include its overall usage by customers and the availability of newer versions. Here’s how Segment defines each tier: Flagship libraries offer the most up"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/libraries/server/net/",
    "title": " Analytics for .NET | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Libraries / Server / Analytics for .NET Analytics for .NET Community ✓ Maintenance x Flagship x ? Segment doesn't manage or update community libraries. These libraries are available on GitHub under the MIT License for the open-source community to fork or contribute. On this page Getting Started Identify Track Page Screen Group Alias Development Settings Historical Import Selecting Destinations Context Anonymous ID Nested Properties Batching Configuration Multiple Clients Troubleshooting Segment’s .NET library is the best way to integrate analytics into your .NET application or website. It lets you record analytics data from your ASP.NET, C#, F#, and Visual Basic code. The library issues requests that hit Segment’s servers, and then Segment routes your data to any analytics service you enable on our destinations page. This library is open-source, so you can check it out on GitHub . All of Segment’s server-side libraries are built for high-performance, so you can use them in your web server controller code. This library uses an internal queue to make Identify and Track calls non-blocking and fast. It also batches messages and flushes asynchronously to Segment’s servers. Analytics-CSharp (C#) With Analytics-CSharp , you can add Segment analytics to your C# based app which includes .NET. If you’d like to migrate to use Analytics-CSharp, see the Analytics-CSharp migration guide . Getting Started Client-side vs Server-side The best analytics installation combines both client-side and server-side tracking. A client-side analytics.js installation allows you to install A/B testing, heat mapping, session recording, and ad optimization tools. A server-side .NET installation allows you to accurately track events that aren’t available client-side, such as payments. For best practices, check out Segment’s guide to client-side vs. server-side . Step 1: Add Analytics.js to your ASP.NET Master Page In your Segment workspace, click Catalog, and search for “Net”. Click the .Net tile, then click Add Source . Give the new source a label (which you’ll use to identify it later), and apply any labels such as prod or test . You will then be presented with an Analytics.js snippet . Copy the snippet directly into your ASP.NET Site.master . That snippet will load analytics.js onto the page asynchronously , so it won’t affect your page load speed. As soon as that snippet is running on your site, you can start turning on any destinations on your Segment destinations page. In fact, if you reload, you can start seeing Page calls in the source debugger . For more in depth analytics.js information, check out Segment’s analytics.js docs . Lots of analytics and marketing tools want to know more information about your users, and what they’re doing on your app. In the next section, Segment installs the .NET library and start sending an event every time a new user registers on your site. Step 2: Install Segment’s .NET Library Your website will use Segment’s .NET library to Identify and Track users. You can use NuGet to install the library. Install-Package Analytics -Version <version> Note: the Analytics package has a dependency on Newton.JSON . You can also accomplish the same thing in the Visual Studio Tools menu, select Library Package Manager and then click Package Manager Console . Now the .NET library needs to know which Segment project you want to send data to. You can initialize the library with your Segment source’s writeKey in the Global.asax file . Then you can use the Analytics singleton in any controller you want: <% @ Application Language = \"C#\" %> <% @ Import Namespace = \"ASP.NET_Example\" %> <% @ Import Namespace = \"System.Web.Optimization\" %> <% @ Import Namespace = \"System.Web.Routing\" %> <% @ Import Namespace = \"Segment\" %> < script runat = \"server\" > void Application_Start ( object sender , EventArgs e ) { RouteConfig . RegisterRoutes ( RouteTable . Routes ); BundleConfig . RegisterBundles ( BundleTable . Bundles ); // this is your project's write key Segment . Analytics . Initialize ( \"x24b2rmtvv\" ); } </ script > using Segment ; // initialize the project #{source.owner.login}/#{source.slug}... Analytics . Initialize ( \"YOUR_WRITE_KEY\" ); You only need to initialize once at the start of your program. You can then keep using the Analytics singleton anywhere in your code. The default initialization settings are production-ready and queue messages on another thread before sending any requests. In development you might want to use development settings . Regional configuration For Business plans with access to Regional Segment , you can use the host configuration parameter to send data to the desired region: Oregon (Default) — api.segment.io/ Dublin — events.eu1.segmentapis.com/ Identify Good to know : For any of the different methods described on this page, you can replace the properties and traits in the code samples with variables that represent the data collected. If you’re not familiar with the Segment Specs, take a look to understand what the Identify method does. The Identify call has the following fields: userId String The ID for this user in your database. Traits Traits, optional A dictionary of traits you know about the user. Things like: email , name or friends . options Options, optional A custom object which allows you to set a timestamp, an anonymous cookie id, or enable specific destinations. An example call would look like: Analytics . Client . Identify ( \"019mr8mf4r\" , new Traits () { { \"name\" , \"#{ user.name }\" }, { \"email\" , \"#{ user.email }\" }, { \"friends\" , 29 } }); Track If you’re not familiar with the Segment Spec, take a look to understand what the Track method does. The Track call has the following fields: userId String The ID for this user in your database. event String The name of the event you’re tracking. Segment recommends human-readable names like Song Played or Status Updated . properties Properties, optional A dictionary of properties for the event. If the event was Product Added to cart, it might have properties like price or product . options Options, optional A custom object which allows you to set a timestamp, an anonymous cookie id, or enable specific destinations. An example call would look like: Analytics . Client . Track ( \"019mr8mf4r\" , \"Item Purchased\" , new Properties () { { \"revenue\" , 39.95 }, { \"shipping\" , \"2-day\" } }); Page If you’re not familiar with the Segment Specs, take a look to understand what the Page method does. The Page call has the following fields: userId String The ID for this user in your database. name String The webpage name you’re tracking. Segment recommends human-readable names like Login or Register . category String The webpage category. If you’re making a news app, the category could be Sports . properties Properties, optional A dictionary of properties for the webpage visit. If the event was Login , it might have properties like path or title . options Options, optional A custom object which allows you to set a timestamp, an anonymous cookie id, or enable specific destinations. Example Page call: Analytics . Client . Page ( \"019mr8mf4r\" , \"Login\" , new Properties () { { \"path\" , \"/login\" }, { \"title\" , \"Initech Login\" } }); Screen If you’re not familiar with the Segment Specs, take a look to understand what the Screen method does. The Screen call has the following fields: userId String The ID for this user in your database. name String The screen name you’re tracking. Segment recommends human-readable names like Login or Register . category String The screen category. If you’re making a news app, the category could be Sports . properties Properties, optional A dictionary of properties for the screen view. If the screen is Restaurant Reviews , it might have properties like reviewCount or restaurantName . options Options, optional A custom object which allows you to set a timestamp, an anonymous cookie id, or enable specific destinations. Example Screen call: Analytics . Client . Screen ( \"019mr8mf4r\" , \"Register\" , new Properties () { { \"type\" , \"facebook\" } }); Group If you’re not familiar with the Segment Specs, take a look to understand what the Group method does. The Group call has the following fields: userId String The ID for this user in your database. groupId String The ID for this group in your database. traits Traits, optional A dictionary of traits you know about the group. Things like: ma,e or website . options Options, optional A custom object which allows you to set a timestamp, an anonymous cookie id, or enable specific destinations. Example Group call: Analytics . Client . Group ( \"userId\" , \"groupId\" , new Traits () { { \"name\" , \"Initech, Inc.\" }, { \"website\" , \"http://www.example.com\" } }); Alias If you’re not familiar with the Segment Specs, take a look to understand what the Alias method does. The Alias call has the following fields: previousId String The previousId for this user. userId String The ID for this user in your database. Example Alias call: Analytics . Client . Alias ( \"previousId\" , \"userId\" ) Here’s a full example of how you might use the Alias call: // the anonymous user does actions ... Analytics . Client . Track ( \"anonymous_user\" , \"Anonymous Event\" ); // the anonymous user signs up and is aliased Analytics . Client . Alias ( \"anonymous_user\" , \"identified@example.com\" ); // the identified user is identified Analytics . Client . Identify ( \"identified@example.com\" , new Traits () { plan : \"Free\" }); // the identified user does actions ... Analytics . Client . Track ( \"identified@example.com\" , \"Identified Action\" ); Development Settings You can use this initialization during development while testing the library. SetAsync(false) will make sure the library makes a request to Segment’s servers every time it’s called. Analytics . Initialize ( \"YOUR_WRITE_KEY\" , new Config (). SetAsync ( false )); Don’t forget to set async back to true for production, so that you can advantage of asynchronous flushing on a different thread. Historical Import You can import historical data by adding the timestamp argument to any of your method calls. This can be helpful if you’ve just switched to Segment. Historical imports can only be done into destinations that can accept historical timestamped data. Most analytics tools like Mixpanel, Amplitude, Kissmetrics, etc. can handle that type of data just fine. One common destination that does not accept historical data is Google Analytics since their API cannot accept historical data. Note: If you’re tracking things that are happening right now, leave out the timestamp and Segment’s servers will timestamp the requests for you. Analytics . Client . Track ( \"sadi89e2jd\" , \"Workout Logged\" , new Properties () { { \"distance\" , \"10 miles\" }, { \"city\" , \"Boston\" }, }, new Options () . SetTimestamp ( new DateTime ( 2010 , 1 , 18 )) ); Selecting Destinations The Alias, Group, Identify, Page, and Track calls can all be passed an object of options that lets you turn certain destinations on or off. By default all destinations are enabled. You can specify which analytics destinations you want each action to go to. Analytics . Client . Identify ( \"hj2kf92ds212\" , new Traits () { { \"email\" , \"tom@example.com\" }, { \"name\" , \"Tom Smykowski\" }, }, new Options () . SetIntegration ( \"all\" , false ) . SetIntegration ( \"Kissmetrics\" , true ) ); In this case, you’re specifying that you want this identify to only go to Kissmetrics. \"all\", false says that no destination should be enabled unless otherwise specified, and { \"Kissmetrics\", true } turns on Kissmetrics. Destination flags are case sensitive and match the destination’s name in the docs (for example, “AdLearn Open Platform”, “awe.sm”, or “MailChimp”). Note: Business Tier users can filter Track calls right from the Segment UI on your source schema page. Segment recommends using the UI if possible since it’s a much simpler way of managing your filters and can be updated with no code changes on your side. If you are on a grandfathered plan, events sent server-side that are filtered through the Segment dashboard still count towards your API usage. Context If you’re running a web server, you might want to send context variables such as userAgent or ip with your page or screen calls. You can do so by setting the Context in the Options object. Analytics . Client . Page ( \"019mr8mf4r\" , \"Login\" , new Properties () { { \"path\" , \"/login\" }, { \"title\" , \"Initech Login\" } }, new Options () . SetContext ( new Context () { { \"userAgent\" , \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36\" }, { \"ip\" , \"12.212.12.49\" }, { \"language\" , \"en-us\" }, { \"Google Analytics\" , new Dict () { { \"clientId\" , User . ClientId } } } })); Anonymous ID All libraries require all messages to have either a userId or anonymousId . If you would like to use an anonymousId , which you should for anonymous users, you can pass it in with options. Analytics . Client . Page ( null , \"Login\" , new Properties (), new Options () . SetAnonymousId ( \"some-id\" )); Nested Properties You can provide nested properties, like so: Analytics . Client . Identify ( \"hj2kf92ds212\" , new Traits () { { \"email\" , \"tom@example.com\" }, { \"name\" , \"Tom Smykowski\" }, { \"address\" , new Dict () { { \"street\" , \"123 Fake Street\" }, { \"city\" , \"Boston\" } }} }); Batching Segment’s libraries are built to support high performance environments. That means it is safe to use Analytics.NET on a web server that’s serving hundreds of requests per second. By default (in async mode), this library starts a single separate thread on initialization, and flushes all messages on that thread. That means every method you call does not result in an HTTP request, but is queued in memory instead. Messages are flushed in batch in the background, which allows for much faster operation. There is a maximum of 500KB per batch request and 32KB per call. HTTP Tracking API limits Segment's HTTP Tracking API accepts batch requests up to 500KB . To avoid errors in event creation, ensure that individual event payload sizes remain below 32KB . How do I turn batching off? Sometimes you might not want batching (for example, when debugging, or in short-lived programs). You can turn off batching by setting the async argument to false , and your requests will always be sent in a blocking manner. Analytics . Initialize ( \"YOUR_WRITE_KEY\" , new Config (). SetAsync ( false )); What happens if there are just too many messages? If the module detects that it can’t flush faster than it’s receiving messages, it’ll simply stop accepting messages. This means your program will never crash because of a backing up analytics queue. The maximum size of the queue defaults to 10000 , and here’s how you can change it: Analytics . Initialize ( \"YOUR_WRITE_KEY\" , new Config (). SetMaxQueueSize ( 10000 )); How do I flush right now?! You can also flush on demand. For example, at the end of your program, you’ll want to flush to make sure there’s nothing left in the queue. Just call the Flush method: Analytics . Client . Flush (); This method will block until all messages are flushed. How do I dispose of the flushing thread at the end of my program? The Analytics client implements the IDisposable interface, and will turn off its flushing thread when you call Dispose . Analytics . Client . Dispose (); Configuration If you hate defaults, than you’ll love how configurable the Analytics.NET is. Check out these gizmos: Analytics . Initialize ( \"YOUR_WRITE_KEY\" , new Config () . SetAsync ( true ) . SetTimeout ( TimeSpan . FromSeconds ( 10 )) . SetHost ( \"https://events.eu1.segmentapis.com\" ) . SetMaxQueueSize ( 10000 ));)); async boolean true to flush on a different thread, false to flush immediately on the same thread. timeout TimeSpan The amount of time to wait before calling the HTTP request a timeout. host string The API host server address - can be set with the EU endpoint “https://events.eu1.segmentapis.com” instead of default server “https://api.segment.io” maxQueueSize int The maximum number of messages to allow into the queue before no new message are accepted. Multiple Clients Different parts of your app may require different Segment. In that case, you can initialize different Analytics.Client instances instead of using the singleton. Client client = new Client ( \"YOUR_WRITE_KEY\" , new Config () . SetAsync ( false ) . SetTimeout ( TimeSpan . FromSeconds ( 10 )) . SetMaxQueueSize ( 10000 )); client . Track (...); Troubleshooting The following tips often help resolve common issues. No events in my debugger Double check that you’ve followed all the steps in the Quickstart . Make sure that you’re calling a Segment API method once the library is successfully installed— identify , track , etc. Make sure your application isn’t shutting down before the Analytics.Client local queue events are pushed to Segment. You can manually call Analytics.Client.Flush() to ensure the queue is fully processed before shutdown. Other common errors If you are experiencing data loss from your .NET source, you may be experiencing one or more of the following common errors: Payload is too large : If you attempt to send events larger than 32KB per normal API request or batches of events larger than 500KB per request, Segment’s tracking API responds with 400 Bad Request . Try sending smaller events (or smaller batches) to correct this error. Identifier is not present : Segment’s tracking API requires that each payload has a userId and/or anonymousId . If you send events without either the userId or anonymousId , Segment’s tracking API responds with an no_user_anon_id error. Check the event payload and client instrumentation for more details. Track event is missing name : All Track events to Segment must have a name in string format. Event dropped during deduplication : Segment automatically adds a messageId field to all payloads and uses this value to deduplicate events. If you’re manually setting a messageId value, ensure that each event has a unique value. Incorrect credentials : Double check your credentials for your downstream destination(s). Destination incompatibility : Make sure that the destination you are troubleshooting can accept server-side API calls. You can see compatibility information on the Destination comparison by category page and in the documentation for your specific destination. Destination-specific requirements : Check out the destination’s documentation to see if there are other requirements for using the method and destination that you’re trying to get working. Logging Analytics.NET has detailed logging, which you can enable by attaching your own handler, like so: using Segment ; Logger . Handlers += LoggingHandler ; static void LoggingHandler ( Logger . Level level , string message , IDictionary < string , object > args ) { if ( args != null ) { foreach ( string key in args . Keys ) { message += String . Format ( \" {0}: {1},\" , \"\" + key , \"\" + args [ key ]); } } Console . WriteLine ( String . Format ( \"[Analytics] [{0}] {1}\" , level , message )); } Note: the logger requires a minimum version of .NET Core 2.1. Json.NET Analytics.NET uses Json.NET to serialize JSON payloads. If you have an older version of Json.NET in your build path, Analytics.NET could create incomplete JSON payloads, which can cause strange API responses. If you’re seeing issues, try updating Json.NET . Mono Analytics.NET has been tested and works in Mono. .NET Core Analytics.NET has been tested and works with .NET Core 3.1 and 3.4.2 beta. This page was last modified: 30 May 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Identify Track Page Screen Group Alias Development Settings Historical Import Selecting Destinations Context Anonymous ID Nested Properties Batching Configuration Multiple Clients Troubleshooting Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "working",
      "website",
      "group",
      "labels",
      "block",
      "troubleshooting",
      "custom",
      "previousid",
      "crash",
      "source",
      "interface",
      "error",
      "database",
      "section",
      "gizmos",
      "project",
      "master",
      "sethost",
      "controller",
      "community",
      "title",
      "easiest",
      "options",
      "sometimes",
      "blocking",
      "normal",
      "until",
      "switched",
      "forget",
      "historical",
      "anonymous",
      "pushed",
      "documentation",
      "quickstart",
      "server",
      "makes",
      "happening",
      "category",
      "anonymous_user",
      "attempt",
      "which",
      "improve",
      "region",
      "separate",
      "alias",
      "correct",
      "logging",
      "processed",
      "practices",
      "calling",
      "manager",
      "setanonymousid",
      "registerroutes",
      "program",
      "attaching",
      "errors",
      "clientid",
      "debugger",
      "missing",
      "certain",
      "cannot",
      "bundletable",
      "useragent",
      "configurable",
      "played",
      "incomplete",
      "identified",
      "individual",
      "every",
      "helpful",
      "collected",
      "maxqueuesize",
      "destinations",
      "regional",
      "email",
      "while",
      "khtml",
      "recommends",
      "desired",
      "installs",
      "timespan",
      "batches",
      "dropped",
      "reviewcount",
      "timestamped",
      "works",
      "followed",
      "field",
      "making",
      "familiar",
      "during",
      "setcontext",
      "cause",
      "track",
      "larger",
      "configuration",
      "facebook",
      "install",
      "context",
      "automatically",
      "hundreds",
      "format",
      "successfully",
      "development",
      "initialize",
      "package",
      "should",
      "migrate",
      "create",
      "mixpanel",
      "runat",
      "value",
      "feedback",
      "marketing",
      "write",
      "queued",
      "limits",
      "event",
      "settimestamp",
      "still",
      "payloads",
      "samples",
      "getting",
      "directly",
      "minimum",
      "record",
      "thread",
      "apply",
      "serialize",
      "traits",
      "specify",
      "specs",
      "affect",
      "sizes",
      "might",
      "names",
      "license",
      "flushed",
      "analytics",
      "restaurantname",
      "datetime",
      "change",
      "false",
      "eventargs",
      "accepts",
      "system",
      "session",
      "sender",
      "mozilla",
      "tested",
      "studio",
      "things",
      "flags",
      "towards",
      "compatibility",
      "application",
      "provide",
      "writekey",
      "remain",
      "integrate",
      "screen",
      "testing",
      "sources",
      "basic",
      "using",
      "another",
      "credentials",
      "websites",
      "responds",
      "modified",
      "aliased",
      "steps",
      "dependency",
      "information",
      "servers",
      "performance",
      "added",
      "specifying",
      "data",
      "service",
      "setintegration",
      "libraries",
      "comparison",
      "later",
      "common",
      "github",
      "string",
      "x24b2rmtvv",
      "flagship",
      "import",
      "single",
      "assistance",
      "avoid",
      "snippet",
      "otherwise",
      "build",
      "initech",
      "account",
      "endpoint",
      "immediately",
      "trying",
      "object",
      "amplitude",
      "method",
      "accepting",
      "nothing",
      "implements",
      "guide",
      "resolve",
      "running",
      "multiple",
      "count",
      "identify",
      "since",
      "programs",
      "allows",
      "adlearn",
      "setmaxqueuesize",
      "mapping",
      "filters",
      "asynchronous",
      "handlers",
      "logged",
      "either",
      "needs",
      "grandfathered",
      "10000",
      "properties",
      "level",
      "api",
      "contribute",
      "simpler",
      "requirements",
      "registerbundles",
      "parameter",
      "tools",
      "segmentapis",
      "manually",
      "amount",
      "business",
      "register",
      "replace",
      "specified",
      "mailchimp",
      "unless",
      "responses",
      "issues",
      "async",
      "click",
      "visit",
      "applewebkit",
      "kissmetrics",
      "memory",
      "foreach",
      "starts",
      "methods",
      "leave",
      "messageid",
      "following",
      "filter",
      "there",
      "updated",
      "smaller",
      "identifier",
      "about",
      "payments",
      "under",
      "restaurant",
      "environments",
      "signs",
      "sports",
      "short",
      "problems",
      "recording",
      "possible",
      "setting",
      "manner",
      "static",
      "turning",
      "requires",
      "owner",
      "reload",
      "no_user_anon_id",
      "variables",
      "speed",
      "hj2kf92ds212",
      "specific",
      "faster",
      "gecko",
      "number",
      "messages",
      "label",
      "bundles",
      "select",
      "product",
      "below",
      "shutting",
      "different",
      "batch",
      "miles",
      "events",
      "without",
      "platform",
      "optimization",
      "cookie",
      "flush",
      "never",
      "message",
      "sadi89e2jd",
      "csharp",
      "thing",
      "batching",
      "update",
      "routes",
      "backing",
      "demand",
      "installed",
      "destination",
      "depth",
      "allow",
      "reviews",
      "x86_64",
      "address",
      "present",
      "older",
      "would",
      "downstream",
      "optional",
      "timestamp",
      "enable",
      "registers",
      "net_example",
      "workout",
      "debugging",
      "enabled",
      "turns",
      "sending",
      "ensure",
      "dispose",
      "language",
      "local",
      "logger",
      "lived",
      "application_start",
      "includes",
      "routetable",
      "accept",
      "receiving",
      "unique",
      "status",
      "maintenance",
      "500kb",
      "workspace",
      "accurately",
      "bundleconfig",
      "https",
      "advantage",
      "google",
      "thanks",
      "anonymousid",
      "incompatibility",
      "mobile",
      "presented",
      "adding",
      "happens",
      "changes",
      "deduplicate",
      "creation",
      "logginghandler",
      "means",
      "result",
      "schema",
      "doesn",
      "argument",
      "parts",
      "accomplish",
      "background",
      "friends",
      "timeout",
      "detailed",
      "idisposable",
      "userid",
      "distance",
      "start",
      "detects",
      "filtered",
      "dublin",
      "imports",
      "match",
      "visual",
      "access",
      "installation",
      "script",
      "check",
      "fromseconds",
      "double",
      "fields",
      "incorrect",
      "before",
      "strange",
      "initialization",
      "based",
      "chrome",
      "boolean",
      "because",
      "routeconfig",
      "library",
      "called",
      "fully",
      "shutdown",
      "other",
      "growth",
      "defaults",
      "flushes",
      "require",
      "available",
      "accepted",
      "search",
      "could",
      "client",
      "through",
      "sensitive",
      "ready",
      "example",
      "handler",
      "catalog",
      "request",
      "requests",
      "oregon",
      "setasync",
      "simply",
      "newton",
      "config",
      "segment",
      "clients",
      "nuget",
      "groupid",
      "right",
      "second",
      "settimeout",
      "module",
      "singleton",
      "queue",
      "maximum",
      "idictionary",
      "contact",
      "purchased",
      "managing",
      "serving",
      "street",
      "console",
      "combines",
      "price",
      "flushing",
      "operation",
      "payload",
      "boston",
      "handle",
      "these",
      "started",
      "namespace",
      "large",
      "019mr8mf4r",
      "settings",
      "revenue",
      "seeing",
      "instead",
      "understand",
      "always",
      "dashboard",
      "calls",
      "built",
      "readable",
      "writeline",
      "doing",
      "their",
      "passed",
      "deduplication",
      "shipping",
      "represent",
      "smykowski",
      "version",
      "manage",
      "plans",
      "login",
      "dictionary",
      "support",
      "webpage",
      "tracking",
      "routing",
      "migration",
      "action",
      "usage",
      "default",
      "instances",
      "experiencing",
      "asynchronously",
      "safari",
      "described",
      "actions",
      "linux",
      "internal",
      "selecting",
      "global",
      "connections",
      "often",
      "questions",
      "updating",
      "human",
      "users",
      "anywhere",
      "your_write_key",
      "instrumentation",
      "nested",
      "production",
      "details"
    ],
    "howto_steps": [
      "Json.NET Analytics.NET uses Json.NET to serialize JSON payloads. If you have an older version of Json.NET in your build path, Analytics.NET could create incomplete JSON payloads, which can cause strange API responses. If you’re seeing issues, try updating Json.NET . Mono Analytics.NET has been tested and works in Mono. .NET Core Analytics.NET has been tested and works with .NET Core",
      "can be set with the EU endpoint “https://events.eu1.segmentapis.com” instead of default server “https://api.segment.io” maxQueueSize int The maximum number of messages to allow into the queue before no new message are accepted. Multiple Clients Different parts of your app may require different Segment. In that case, you can initialize different Analytics.Client instances instead of using the singleton. Client client = new Client ( \"YOUR_WRITE_KEY\" , new Config () . SetAsync ( false ) . SetTimeout ( TimeSpan . FromSeconds ( 10 )) . SetMaxQueueSize ( 10000 )); client . Track (...); Troubleshooting The following tips often help resolve common issues. No events in my debugger Double check that you’ve followed all the steps in the Quickstart . Make sure that you’re calling a Segment API method once the library is successfully installed— identify , track , etc. Make sure your application isn’t shutting down before the Analytics.Client local queue events are pushed to Segment. You can manually call Analytics.Client.Flush() to ensure the queue is fully processed before shutdown. Other common errors If you are experiencing data loss from your .NET source, you may be experiencing one or more of the following common errors: Payload is too large : If you attempt to send events larger than 32KB per normal API request or batches of events larger than 500KB per request, Segment’s tracking API responds with 400 Bad Request . Try sending smaller events (or smaller batches) to correct this error. Identifier is not present : Segment’s tracking API requires that each payload has a userId and/or anonymousId . If you send events without either the userId or anonymousId , Segment’s tracking API responds with an no_user_anon_id error. Check the event payload and client instrumentation for more details. Track event is missing name : All Track events to Segment must have a name in string format. Event dropped during deduplication : Segment automatically adds a messageId field to all payloads and uses this value to deduplicate events. If you’re manually setting a messageId value, ensure that each event has a unique value. Incorrect credentials : Double check your credentials for your downstream destination(s). Destination incompatibility : Make sure that the destination you are troubleshooting can accept server"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/connections/storage/catalog/",
    "title": " Data Storage catalog | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Storage / Data Storage catalog Data Storage catalog AWS S3 Amazon S3 Azure Synapse Analytics Warehouse BigQuery Databricks Google Cloud Storage Beta IBM Db2 Warehouse Postgres Redshift Segment Data Lakes Snowflake Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "thanks",
      "google",
      "bigquery",
      "catalog",
      "azure",
      "improve",
      "helpful",
      "warehouse",
      "snowflake",
      "storage",
      "analytics",
      "amazon",
      "segment",
      "cloud",
      "postgres",
      "connections",
      "synapse",
      "feedback",
      "data",
      "databricks",
      "lakes",
      "redshift",
      "documentation"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/libraries/server/go/",
    "title": " Analytics for Go | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Libraries / Server / Analytics for Go Analytics for Go Community x Maintenance ✓ Flagship x ? Maintenance libraries send data as intended but receive no new feature support and only critical maintenance updates from Segment. When possible, Segment recommends using a Flagship version of these libraries. On this page Getting Started Identify Track Page Group Alias Development Settings Logging Selecting Destinations Historical Import Context Batching Options Version 2 (Deprecated) Migrating from v2 What’s new in v3 Troubleshooting Current Version: v3.3.0 Release Date: Oct 31, 2023 Segment’s Go library lets you record analytics data from your Go code. The requests hit Segment servers, and then Segment routes your data to any analytics service you enable on your destinations page. This library is open-source, so you can check it out on GitHub . All of Segment’s server-side libraries are built for high-performance, so you can use them in your web server controller code. This library uses a tunable buffer to batch messages, optimized for throughput and reduced network activity. Getting Started Install analytics-go using go get : go get gopkg.in/segmentio/analytics-go.v3 Then import it and initialize an instance with your source’s Write Key . Of course, you’ll want to replace YOUR_WRITE_KEY with your actual Write Key which you can find in Segment under your source settings. package main import \"gopkg.in/segmentio/analytics-go.v3\" func main () { client := analytics . New ( \"YOUR_WRITE_KEY\" ) defer client . Close () // Use the client. } That will create a client that you can use to send data to Segment for your source. The default initialization settings are production-ready and queue 20 messages before sending a batch request, and a 5 second interval. Regional configuration For Business plans with access to Regional Segment, you can use the endpoint configuration parameter to send data to the desired region: Oregon (Default) — https://api.segment.io Dublin — https://events.eu1.segmentapis.com Example configuration for EU region: client , err := analytics . NewWithConfig ( writeKey , analytics . Config { Endpoint : \"https://events.eu1.segmentapis.com\" , }) Identify Good to know : For any of the different methods described on this page, you can replace the properties and traits in the code samples with variables that represent the data collected. Identify lets you tie a user to their actions and record traits about them. It includes a unique User ID and any optional traits you know about them. Segment recommends calling Identify a single time when the user’s account is first created, and only identifying again later when their traits change. Example Identify call: client . Enqueue ( analytics . Identify { UserId : \"019mr8mf4r\" , Traits : analytics . NewTraits () . SetName ( \"Michael Bolton\" ) . SetEmail ( \"mbolton@example.com\" ) . Set ( \"plan\" , \"Enterprise\" ) . Set ( \"friends\" , 42 ), }) This call is identifying Michael by his unique User ID (the one you know him by in your database) and labeling him with name , email , plan and friends traits. The Identify call has the following fields: userId String The ID for this user in your database. traits Traits, optional A dictionary of traits you know about the user. Things like: email , name or friends . Find details on the identify method payload in the Segment Spec . Track Track lets you record the actions your users perform.Every action triggers what Segment calls an “event”, which can also have associated properties. You’ll want to track events that are indicators of success for your site, like Signed Up , Item Purchased or Article Bookmarked . To get started, Segment recommends tracking just a few important events. You can always add more later. Example Track call: client . Enqueue ( analytics . Track { UserId : \"f4ca124298\" , Event : \"Signed Up\" , Properties : analytics . NewProperties () . Set ( \"plan\" , \"Enterprise\" ), }) This example Track call tells you that your user just triggered the Signed Up event choosing the “Enterprise” plan. Track event properties can be anything you want to record. In this case, plan type. The Track call has the following fields: event String The name of the event you’re tracking. Segment recommends human-readable names like Song Played or Status Updated . properties Properties, optional A dictionary of properties for the event. If the event was Product Added , it might have properties like price or product . Find details on best practices in event naming as well as the Track method payload in the Segment Spec . Page The Page method lets you record page views on your website, along with optional extra information about the page being viewed. If you’re using Segment’s client-side set up in combination with the Go library, page calls are already tracked for you by default. However, if you want to record your own page views manually and aren’t using the client-side library, read on. Example Page call: client . Enqueue ( analytics . Page { UserId : \"f4ca124298\" , Name : \"Go Library\" , Properties : analytics . NewProperties () . SetURL ( \"https://segment.com/libraries/go/\" ), }) The Page call has the following fields: name String The webpage name you’re tracking. Segment recommends human-readable names like Login or Register . properties Properties, optional A dictionary of properties for the page visit. If the page was Login , it might have properties like path or title . Find details on the Page payload in the Segment Spec . Group Group lets you associate an identified user with a group. A group could be a company, organization, account, project or team. It also lets you record custom traits about the group, like industry or number of employees. This is useful for tools like Intercom , Preact and Totango , as it ties the user to a group of other users. Example Group call: client . Enqueue ( analytics . Group { UserId : \"019mr8mf4r\" , GroupId : \"56\" , Traits : map [ string ] interface {}{ \"name\" : \"Initech\" , \"description\" : \"Accounting Software\" , }, }) The Group call has the following fields: groupId String The ID for this group in your database. traits Traits, optional A dictionary of traits you know about the group. Things like: name or website . Find more details about Group, including the Group payload , in the Segment Spec . Alias Alias is how you associate one identity with another. This is an advanced method, but it is required to manage user identities successfully in some destinations. In Mixpanel it’s used to associate an anonymous user with an identified user once they sign up. For Kissmetrics , if your user switches IDs, you can use ‘alias’ to rename the ‘userId’. Example Alias call: client . Enqueue ( analytics . Alias { PreviousId : \"anonymousUser\" , UserId : \"019mr8mf4r\" , }) The Alias call has the following fields: UserId string The ID for this user in your database. PreviousId string The previous ID to alias from. Here’s a full example of how you might use the Alias call: // the anonymous user does actions ... client . Enqueue ( analytics . Track { Event : \"Anonymous Event\" , UserId : anonymousUser , }) // the anonymous user signs up and is aliased client . Enqueue ( analytics . Alias { PreviousId : anonymousUser , UserId : \"019mr8mf4r\" , }) // the identified user is identified client . Enqueue ( analytics . Identify { UserId : \"019mr8mf4r\" , Traits : map [ string ] interface {}{ \"name\" : \"Michael Bolton\" , \"email\" : \"mbolton@example.com\" , \"plan\" : \"Enterprise\" , \"friends\" : 42 , }, }) // the identified user does actions ... client . Enqueue ( analytics . Track { Event : \"Item Viewed\" , UserId : \"019mr8mf4r\" , Properties : map [ string ] interface {}{ \"item\" : \"lamp\" , }, }) For more details about Alias, including the Alias call payload , check out the Segment Spec . Development Settings You can use the BatchSize field of your configuration to 1 during development to make the library flush every time a message is submitted, so that you can be sure your calls are working properly. func main () { client , _ := analytics . NewWithConfig ( \"YOUR_WRITE_KEY\" , analytics . Config { BatchSize : 1 , }) } Logging The Verbose field of your configuration controls the level of logging, while the Logger field provides a hook to capture the log output: func main () { client , _ := analytics . NewWithConfig ( \"YOUR_WRITE_KEY\" , analytics . Config { Verbose : true , Logger : analytics . StdLogger ( log . New ( os . Stderr , \"segment \" , log . LstdFlags )), }) } Selecting Destinations The Alias, Group, Identify, Page, and Track calls can all be passed an object of context.integrations that lets you turn certain integrations on or off. By default all destinations are enabled. Here’s an example Track call with the context.integrations object shown. client . Enqueue ( analytics . Track { Event : \"Membership Upgraded\" , UserId : \"019mr8mf4r\" , Integrations : map [ string ] interface {}{ \"All\" : false , \"Mixpanel\" : true , }, }) In this case, you’re specifying that you want this Track to only go to Mixpanel. All: false says that no destination should be enabled unless otherwise specified, and Mixpanel: true turns on Mixpanel. Destination flags are case sensitive and match the destination’s name in the docs (for example, “AdLearn Open Platform”, “awe.sm”, or “MailChimp”). Note: Business Tier users can filter Track calls right from the Segment UI on your source schema page. Segment recommends using the UI if possible since it’s a much simpler way of managing your filters and can be updated with no code changes on your side. If you are on a grandfathered plan, events sent server-side that are filtered through the Segment dashboard still count towards your API usage. Historical Import You can import historical data by adding the timestamp argument to any of your method calls. This can be helpful if you’ve just switched to Segment. Historical imports can only be done into destinations that can accept historical timestamped data. Most analytics tools like Mixpanel, Amplitude, Kissmetrics, etc. can handle that type of data just fine. One common destination that does not accept historical data is Google Analytics since their API cannot accept historical data. Note: If you’re tracking things that are happening right now, leave out the timestamp and Segment’s servers will timestamp the requests for you. Context You can send Context fields in two ways with the Go library. Firstly, you can set a global context field that will be set on all messages from the client. client , _ := analytics . NewWithConfig ( \"h97jamjwbh\" , analytics . Config { DefaultContext : & analytics . Context { App : analytics . AppInfo { Name : \"myapp\" , Version : \"myappversion\" , }, }, }) Secondly, you can set a context field on specific events. client . Enqueue ( analytics . Identify { UserId : \"019mr8mf4r\" , Traits : analytics . NewTraits () . Set ( \"friends\" , 42 ), Context : & analytics . Context { Extra : map [ string ] interface {}{ \"active\" : true , }, }, }) Note that any custom fields must be set under the Extra field. They will automatically be inlined into the serialized context structure. For instance, the Identify call above would be serialized to: { \"type\" : \"identify\" , \"userId\" : \"019mr8mf4r\" , \"traits\" : { \"friends\" : 42 , }, \"context\" : { \"active\" : true , \"library\" : { \"name\" : \"analytics-go\" , \"version\" : \"3.0.0\" } } } Batching Segment’s libraries are built to support high performance environments. That means it is safe to use analytics-go on a web server that’s serving hundreds of requests per second. Every method you call does not result in an HTTP request, but is queued in memory instead. Messages are flushed in batch in the background, which allows for much faster operation. If batch messages are not arriving in your debugger and no error is being thrown you may want to slow the speed of your script down. This is because Segment runs a message batching loop in a go-routine so if the script runs too fast it won’t execute on the network calls before it exits the loop. By default, Segment’s library will flush: every 20 messages (control with FlushAt ) if 5 seconds has passed since the last flush (control with FlushAfter ) There is a maximum of 500KB per batch request and 32KB per call. HTTP Tracking API limits Segment's HTTP Tracking API accepts batch requests up to 500KB . To avoid errors in event creation, ensure that individual event payload sizes remain below 32KB . Sometimes you might not want batching (eg. when debugging, or in short-lived programs). You can turn off batching by setting the FlushAt argument to 1 , and your requests will always be sent right away. Options If you hate defaults you can configure analytics-go has a lot of configuration options. You can read more in the Godocs . Version 2 (Deprecated) If you’re looking for documentation for the v2 version of the library, see Segment’s Go v2 documentation . Migrating from v2 v3 is a rewrite of the v2 version of the Go Library. Segment recommends using v3 as it supports many new features, has significant design improvements and is better tested. v3 is currently in the v3.0 branch to minimize breaking changes for customers not using a package manager. You can refer to the documentation for your package manager to see how to use the v3.0 branch. for example, with govendor , you would run the command: govendor fetch github.com/segmentio/analytics-go@v3.0 Alternatively, you can also use gopkg.in . First run go get gopkg.in/segmentio/analytics-go.v3 and replace your imports with import \"gopkg.in/segmentio/analytics-go.v3\" . To help with migrating your code, Segment recommends checking out a simple example that is written in v2 and v3 so you can easily see the differences. The first difference you’ll notice is that Client is now an interface. It has a single method - Enqueue that can accept messages of all types. track := analytics . Track { Event : \"Download\" , UserId : \"123456\" , Properties : map [ string ] interface {}{ \"application\" : \"Segment Desktop\" , \"version\" : \"1.1.0\" , \"platform\" : \"osx\" , }, } // in v2, you would call the `Track` method with a `Track` struct. client . Track ( & track ) // in v3, you would call the `Enqueue` method with a `Track` struct. // Note that a pointer is not used here. client . Enqueue ( track ) Secondly, you’ll notice that there are new types such as analytics.Properties and analytics.Traits . These can be used to replace map[string]interface{} . They provide type safety and reduce the chance of accidentally sending fields that are named incorrectly. For instance, the following two examples are functionally equivalent in v3. client . Enqueue ( analytics . Track { UserId : \"f4ca124298\" , Event : \"Signed Up\" , Properties : analytics . NewProperties () . SetCategory ( \"Enterprise\" ) . Set ( \"application\" , \"Segment Desktop\" ), }) client . Enqueue ( analytics . Track { UserId : \"f4ca124298\" , Event : \"Signed Up\" , Properties : map [ string ] interface {}{ \"category\" : \"Segment Desktop\" , \"application\" : \"Segment Desktop\" , }, }) Lastly, you’ll notice that configuration is provided during initialization and cannot be changed after initialization. The various configuration options are documented in the GoDocs . These are examples of applying same configuration options in v2 and v3. // Example in v2: client := analytics . New ( \"h97jamjwbh\" ) client . Interval = 30 * time . Second client . Verbose = true client . Size = 100 // Example in v3: client , _ := analytics . NewWithConfig ( \"h97jamjwbh\" , analytics . Config { Interval : 30 * time . Second , BatchSize : 100 , Verbose : true , }) What’s new in v3 v3 is a rewrite of Segment’s v2 version of the Go Library with many new features. New type safe API to set properties, traits and context fields. This is less error prone than using the map[string]interface{} type (though you can still do so). client . Enqueue ( analytics . Track { UserId : \"f4ca124298\" , Event : \"Signed Up\" , Properties : analytics . NewProperties () . SetCategory ( \"Enterprise\" ), SetCoupon ( \"synapse\" ), SetDiscount ( 10 ), }) Dynamically split batches into appropriately sized chunks to meet Segment’s API size limits . Previously you would have to calculate the batch size depending on this size of your data to figure out the appropriate size. Improved logging abstraction. Previously Segment relied solely on the standard library log.Logger type which cannot distinguish between error and non-error logs. v3 has it’s own Logger interface that can be used to capture errors for your own reporting purposes. An adapter for the standard library logger is also included. Ability to configure the retry policy based on the number of attempts. client , _ := analytics . NewWithConfig ( \"h97jamjwbh\" , analytics . Config { RetryAfter : func ( attempt int ) time . Duration { return time . Duration ( attempt * 10 ) }, }) Configurable default context on all messages. client , _ := analytics . NewWithConfig ( \"h97jamjwbh\" , analytics . Config { DefaultContext : & analytics . Context { App : analytics . AppInfo { Name : \"myapp\" , Version : \"myappversion\" , }, }, }) Troubleshooting The following tips often help resolve common issues. No events in my debugger Double check that you’ve followed all the steps in the Quickstart . Make sure that you’re calling a Segment API method once the library is successfully installed— identify , track , etc. Make sure your application isn’t shutting down before the Analytics.Client local queue events are pushed to Segment. You can manually call Analytics.Client.Flush() to ensure the queue is fully processed before shutdown. Other common errors If you are experiencing data loss from your Go source, you may be experiencing one or more of the following common errors: Payload is too large : If you attempt to send events larger than 32KB per normal API request or batches of events larger than 500KB per request, Segment’s tracking API responds with 400 Bad Request . Try sending smaller events (or smaller batches) to correct this error. Identifier is not present : Segment’s tracking API requires that each payload has a userId and/or anonymousId . If you send events without either the userId or anonymousId , Segment’s tracking API responds with an no_user_anon_id error. Check the event payload and client instrumentation for more details. Track event is missing name : All Track events to Segment must have a name in string format. Event dropped during deduplication : Segment automatically adds a messageId field to all payloads and uses this value to deduplicate events. If you’re manually setting a messageId value, ensure that each event has a unique value. Incorrect credentials : Double check your credentials for your downstream destination(s). Destination incompatibility : Make sure that the destination you are troubleshooting can accept server-side API calls. You can see compatibility information on the Destination comparison by category page and in the documentation for your specific destination. Destination-specific requirements : Check out the destination’s documentation to see if there are other requirements for using the method and destination that you’re trying to get working. This page was last modified: 18 Dec 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Identify Track Page Group Alias Development Settings Logging Selecting Destinations Historical Import Context Batching Options Version 2 (Deprecated) Migrating from v2 What’s new in v3 Troubleshooting Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "working",
      "website",
      "group",
      "labeling",
      "routine",
      "troubleshooting",
      "custom",
      "previousid",
      "source",
      "interface",
      "error",
      "defaultcontext",
      "database",
      "project",
      "controller",
      "community",
      "title",
      "easiest",
      "options",
      "identity",
      "myapp",
      "between",
      "sometimes",
      "customers",
      "normal",
      "triggered",
      "switched",
      "historical",
      "anonymous",
      "pushed",
      "figure",
      "solely",
      "documentation",
      "quickstart",
      "server",
      "happening",
      "identifying",
      "category",
      "calculate",
      "attempt",
      "triggers",
      "which",
      "differences",
      "improve",
      "region",
      "simple",
      "alias",
      "logging",
      "correct",
      "execute",
      "processed",
      "practices",
      "calling",
      "serialized",
      "manager",
      "errors",
      "intended",
      "debugger",
      "missing",
      "certain",
      "cannot",
      "configurable",
      "setname",
      "played",
      "submitted",
      "identified",
      "secondly",
      "individual",
      "every",
      "bookmarked",
      "helpful",
      "collected",
      "duration",
      "mbolton",
      "activity",
      "destinations",
      "actual",
      "123456",
      "regional",
      "email",
      "while",
      "recommends",
      "article",
      "desired",
      "release",
      "indicators",
      "buffer",
      "batches",
      "dropped",
      "timestamped",
      "various",
      "appropriately",
      "followed",
      "field",
      "during",
      "track",
      "sized",
      "larger",
      "configuration",
      "close",
      "install",
      "context",
      "automatically",
      "hundreds",
      "format",
      "successfully",
      "development",
      "initialize",
      "package",
      "lastly",
      "should",
      "advanced",
      "first",
      "f4ca124298",
      "create",
      "mixpanel",
      "newwithconfig",
      "value",
      "feedback",
      "write",
      "lstdflags",
      "queued",
      "limits",
      "event",
      "still",
      "control",
      "payloads",
      "significant",
      "samples",
      "getting",
      "batchsize",
      "record",
      "traits",
      "provides",
      "sizes",
      "names",
      "might",
      "configure",
      "flushed",
      "analytics",
      "bolton",
      "change",
      "useful",
      "setcoupon",
      "false",
      "accounting",
      "retryafter",
      "switches",
      "firstly",
      "accepts",
      "properly",
      "standard",
      "signed",
      "tested",
      "equivalent",
      "documented",
      "appinfo",
      "things",
      "flags",
      "towards",
      "compatibility",
      "migrating",
      "application",
      "writekey",
      "remain",
      "provide",
      "retry",
      "integrate",
      "using",
      "credentials",
      "sources",
      "websites",
      "another",
      "responds",
      "modified",
      "combination",
      "aliased",
      "download",
      "myappversion",
      "purposes",
      "steps",
      "already",
      "information",
      "servers",
      "performance",
      "verbose",
      "added",
      "associate",
      "capture",
      "specifying",
      "data",
      "service",
      "libraries",
      "comparison",
      "later",
      "struct",
      "common",
      "github",
      "string",
      "flagship",
      "employees",
      "import",
      "single",
      "policy",
      "assistance",
      "avoid",
      "otherwise",
      "defer",
      "difference",
      "network",
      "looking",
      "account",
      "initech",
      "endpoint",
      "better",
      "trying",
      "object",
      "amplitude",
      "provided",
      "extra",
      "method",
      "h97jamjwbh",
      "depending",
      "rename",
      "seconds",
      "resolve",
      "refer",
      "setdiscount",
      "count",
      "identify",
      "since",
      "govendor",
      "programs",
      "allows",
      "adlearn",
      "setcategory",
      "filters",
      "required",
      "critical",
      "either",
      "dynamically",
      "grandfathered",
      "properties",
      "level",
      "api",
      "pointer",
      "views",
      "rewrite",
      "simpler",
      "requirements",
      "synapse",
      "parameter",
      "segmentapis",
      "manually",
      "tools",
      "newproperties",
      "business",
      "register",
      "changed",
      "replace",
      "specified",
      "mailchimp",
      "supports",
      "unless",
      "issues",
      "visit",
      "viewed",
      "kissmetrics",
      "memory",
      "reduce",
      "reporting",
      "notice",
      "methods",
      "leave",
      "messageid",
      "following",
      "filter",
      "there",
      "updated",
      "smaller",
      "identifier",
      "about",
      "integrations",
      "checking",
      "under",
      "environments",
      "signs",
      "being",
      "short",
      "problems",
      "preact",
      "possible",
      "setting",
      "previously",
      "requires",
      "no_user_anon_id",
      "michael",
      "variables",
      "newtraits",
      "types",
      "feature",
      "speed",
      "number",
      "however",
      "specific",
      "faster",
      "tracked",
      "messages",
      "improved",
      "product",
      "below",
      "shutting",
      "different",
      "batch",
      "events",
      "without",
      "platform",
      "inlined",
      "flush",
      "message",
      "fetch",
      "currently",
      "batching",
      "routes",
      "thrown",
      "installed",
      "output",
      "destination",
      "flushafter",
      "included",
      "shown",
      "setemail",
      "present",
      "would",
      "desktop",
      "downstream",
      "throughput",
      "optional",
      "timestamp",
      "enable",
      "improvements",
      "company",
      "debugging",
      "enabled",
      "turns",
      "minimize",
      "sending",
      "ensure",
      "local",
      "logger",
      "lived",
      "includes",
      "accept",
      "command",
      "unique",
      "status",
      "maintenance",
      "course",
      "seturl",
      "500kb",
      "after",
      "gopkg",
      "arriving",
      "https",
      "thanks",
      "google",
      "split",
      "anonymousid",
      "incompatibility",
      "mobile",
      "though",
      "adding",
      "changes",
      "along",
      "deduplicate",
      "creation",
      "optimized",
      "means",
      "result",
      "schema",
      "argument",
      "background",
      "friends",
      "functionally",
      "tunable",
      "perform",
      "userid",
      "examples",
      "filtered",
      "dublin",
      "imports",
      "controls",
      "match",
      "instance",
      "access",
      "updates",
      "script",
      "check",
      "upgraded",
      "features",
      "accidentally",
      "reduced",
      "double",
      "fields",
      "design",
      "incorrect",
      "before",
      "interval",
      "totango",
      "initialization",
      "written",
      "based",
      "applying",
      "safety",
      "organization",
      "because",
      "anonymoususer",
      "godocs",
      "other",
      "library",
      "fully",
      "shutdown",
      "growth",
      "naming",
      "defaults",
      "chance",
      "associated",
      "previous",
      "enterprise",
      "adapter",
      "could",
      "breaking",
      "client",
      "through",
      "sensitive",
      "ready",
      "example",
      "return",
      "catalog",
      "stderr",
      "request",
      "requests",
      "oregon",
      "chunks",
      "config",
      "segment",
      "software",
      "groupid",
      "right",
      "second",
      "stdlogger",
      "distinguish",
      "receive",
      "prone",
      "queue",
      "success",
      "maximum",
      "contact",
      "purchased",
      "managing",
      "serving",
      "identities",
      "important",
      "membership",
      "price",
      "operation",
      "including",
      "payload",
      "structure",
      "abstraction",
      "current",
      "these",
      "choosing",
      "handle",
      "attempts",
      "started",
      "large",
      "019mr8mf4r",
      "settings",
      "instead",
      "branch",
      "always",
      "description",
      "dashboard",
      "segmentio",
      "built",
      "calls",
      "readable",
      "their",
      "passed",
      "deduplication",
      "ability",
      "enqueue",
      "created",
      "incorrectly",
      "represent",
      "version",
      "industry",
      "flushat",
      "manage",
      "support",
      "plans",
      "dictionary",
      "login",
      "webpage",
      "tracking",
      "action",
      "again",
      "usage",
      "default",
      "appropriate",
      "experiencing",
      "described",
      "actions",
      "above",
      "active",
      "exits",
      "selecting",
      "global",
      "connections",
      "tells",
      "relied",
      "often",
      "intercom",
      "questions",
      "human",
      "deprecated",
      "easily",
      "users",
      "alternatively",
      "named",
      "your_write_key",
      "anything",
      "instrumentation",
      "production",
      "details"
    ],
    "howto_steps": [
      "client . Enqueue ( analytics . Track { UserId : \"f4ca124298\" , Event : \"Signed Up\" , Properties : analytics . NewProperties () . SetCategory ( \"Enterprise\" ) . Set ( \"application\" , \"Segment Desktop\" ), }) client . Enqueue ( analytics . Track { UserId : \"f4ca124298\" , Event : \"Signed Up\" , Properties : map [ string ] interface {}{ \"category\" : \"Segment Desktop\" , \"application\" : \"Segment Desktop\" , }, }) Lastly, you’ll notice that configuration is provided during initialization and cannot be changed after initialization. The various configuration options are documented in the GoDocs . These are examples of applying same configuration options in v2 and v",
      "// Example in v2: client := analytics . New ( \"h97jamjwbh\" ) client . Interval = 30 * time . Second client . Verbose = true client . Size = 100 // Example in v3: client , _ := analytics . NewWithConfig ( \"h97jamjwbh\" , analytics . Config { Interval : 30 * time . Second , BatchSize : 100 , Verbose : true , }) What’s new in v3 v3 is a rewrite of Segment’s v2 version of the Go Library with many new features. New type safe API to set properties, traits and context fields. This is less error prone than using the map[string]interface{} type (though you can still do so). client . Enqueue ( analytics . Track { UserId : \"f4ca124298\" , Event : \"Signed Up\" , Properties : analytics . NewProperties () . SetCategory ( \"Enterprise\" ), SetCoupon ( \"synapse\" ), SetDiscount ( 10 ), }) Dynamically split batches into appropriately sized chunks to meet Segment’s API size limits . Previously you would have to calculate the batch size depending on this size of your data to figure out the appropriate size. Improved logging abstraction. Previously Segment relied solely on the standard library log.Logger type which cannot distinguish between error and non-error logs. v3 has it’s own Logger interface that can be used to capture errors for your own reporting purposes. An adapter for the standard library logger is also included. Ability to configure the retry policy based on the number of attempts. client , _ := analytics . NewWithConfig ( \"h97jamjwbh\" , analytics . Config { RetryAfter : func ( attempt int ) time . Duration { return time . Duration ( attempt * 10 ) }, }) Configurable default context on all messages. client , _ := analytics . NewWithConfig ( \"h97jamjwbh\" , analytics . Config { DefaultContext : & analytics . Context { App : analytics . AppInfo { Name : \"myapp\" , Version : \"myappversion\" , }, }, }) Troubleshooting The following tips often help resolve common issues. No events in my debugger Double check that you’ve followed all the steps in the Quickstart . Make sure that you’re calling a Segment API method once the library is successfully installed— identify , track , etc. Make sure your application isn’t shutting down before the Analytics.Client local queue events are pushed to Segment. You can manually call Analytics.Client.Flush() to ensure the queue is fully processed before shutdown. Other common errors If you are experiencing data loss from your Go source, you may be experiencing one or more of the following common errors: Payload is too large : If you attempt to send events larger than 32KB per normal API request or batches of events larger than 500KB per request, Segment’s tracking API responds with 400 Bad Request . Try sending smaller events (or smaller batches) to correct this error. Identifier is not present : Segment’s tracking API requires that each payload has a userId and/or anonymousId . If you send events without either the userId or anonymousId , Segment’s tracking API responds with an no_user_anon_id error. Check the event payload and client instrumentation for more details. Track event is missing name : All Track events to Segment must have a name in string format. Event dropped during deduplication : Segment automatically adds a messageId field to all payloads and uses this value to deduplicate events. If you’re manually setting a messageId value, ensure that each event has a unique value. Incorrect credentials : Double check your credentials for your downstream destination(s). Destination incompatibility : Make sure that the destination you are troubleshooting can accept server-side API calls. You can see compatibility information on the Destination comparison by category page and in the documentation for your specific destination. Destination-specific requirements : Check out the destination’s documentation to see if there are other requirements for using the method and destination that you’re trying to get working. This page was last modified: 18 Dec 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Identify Track Page Group Alias Development Settings Logging Selecting Destinations Historical Import Context Batching Options Version 2 (Deprecated) Migrating from v2 What’s new in v3 Troubleshooting Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
      "Enqueue that can accept messages of all types. track := analytics . Track { Event : \"Download\" , UserId : \"123456\" , Properties : map [ string ] interface {}{ \"application\" : \"Segment Desktop\" , \"version\" : \"1.1.0\" , \"platform\" : \"osx\" , }, } // in v2, you would call the `Track` method with a `Track` struct. client . Track ( & track ) // in v3, you would call the `Enqueue` method with a `Track` struct. // Note that a pointer is not used here. client . Enqueue ( track ) Secondly, you’ll notice that there are new types such as analytics.Properties and analytics.Traits . These can be used to replace map[string]interface{} . They provide type safety and reduce the chance of accidentally sending fields that are named incorrectly. For instance, the following two examples are functionally equivalent in v3. client . Enqueue ( analytics . Track { UserId : \"f4ca124298\" , Event : \"Signed Up\" , Properties : analytics . NewProperties () . SetCategory ( \"Enterprise\" ) . Set ( \"application\" , \"Segment Desktop\" ), }) client . Enqueue ( analytics . Track { UserId : \"f4ca124298\" , Event : \"Signed Up\" , Properties : map [ string ] interface {}{ \"category\" : \"Segment Desktop\" , \"application\" : \"Segment Desktop\" , }, }) Lastly, you’ll notice that configuration is provided during initialization and cannot be changed after initialization. The various configuration options are documented in the GoDocs . These are examples of applying same configuration options in v2 and v3. // Example in v2: client := analytics . New ( \"h97jamjwbh\" ) client . Interval = 30",
      "time . Second client . Verbose = true client . Size = 100 // Example in v3: client , _ := analytics . NewWithConfig ( \"h97jamjwbh\" , analytics . Config { Interval : 30",
      "time . Second , BatchSize : 100 , Verbose : true , }) What’s new in v3 v3 is a rewrite of Segment’s v2 version of the Go Library with many new features. New type safe API to set properties, traits and context fields. This is less error prone than using the map[string]interface{} type (though you can still do so). client . Enqueue ( analytics . Track { UserId : \"f4ca124298\" , Event : \"Signed Up\" , Properties : analytics . NewProperties () . SetCategory ( \"Enterprise\" ), SetCoupon ( \"synapse\" ), SetDiscount ( 10 ), }) Dynamically split batches into appropriately sized chunks to meet Segment’s API size limits . Previously you would have to calculate the batch size depending on this size of your data to figure out the appropriate size. Improved logging abstraction. Previously Segment relied solely on the standard library log.Logger type which cannot distinguish between error and non",
      "10 ) }, }) Configurable default context on all messages. client , _ := analytics . NewWithConfig ( \"h97jamjwbh\" , analytics . Config { DefaultContext : & analytics . Context { App : analytics . AppInfo { Name : \"myapp\" , Version : \"myappversion\" , }, }, }) Troubleshooting The following tips often help resolve common issues. No events in my debugger Double check that you’ve followed all the steps in the Quickstart . Make sure that you’re calling a Segment API method once the library is successfully installed— identify , track , etc. Make sure your application isn’t shutting down before the Analytics.Client local queue events are pushed to Segment. You can manually call Analytics.Client.Flush() to ensure the queue is fully processed before shutdown. Other common errors If you are experiencing data loss from your Go source, you may be experiencing one or more of the following common errors: Payload is too large : If you attempt to send events larger than 32KB per normal API request or batches of events larger than 500KB per request, Segment’s tracking API responds with 400 Bad Request . Try sending smaller events (or smaller batches) to correct this error. Identifier is not present : Segment’s tracking API requires that each payload has a userId and/or anonymousId . If you send events without either the userId or anonymousId , Segment’s tracking API responds with an no_user_anon_id error. Check the event payload and client instrumentation for more details. Track event is missing name : All Track events to Segment must have a name in string format. Event dropped during deduplication : Segment automatically adds a messageId field to all payloads and uses this value to deduplicate events. If you’re manually setting a messageId value, ensure that each event has a unique value. Incorrect credentials : Double check your credentials for your downstream destination(s). Destination incompatibility : Make sure that the destination you are troubleshooting can accept server"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/libraries/server/python/",
    "title": " Analytics for Python | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Libraries / Server / Analytics for Python Analytics for Python Community x Maintenance ✓ Flagship x ? Maintenance libraries send data as intended but receive no new feature support and only critical maintenance updates from Segment. When possible, Segment recommends using a Flagship version of these libraries. On this page Getting Started Identify Track Page Screen Group Alias Historical import Selecting destinations Batching Logging Options Django Google App Engine OAuth 2.0 Troubleshooting Segment’s Python library lets you record analytics data from your Python code. The requests hit Segment’s servers, and then Segment routes your data to any analytics service you enable on your destinations page. This library is open-source, so you can check it out on GitHub . All of Segment’s server-side libraries are built for high-performance, so you can use them in your web server controller code. This library uses an internal queue to make Identify and Track calls non-blocking and fast. It also batches messages and flushes asynchronously to Segment’s servers using a separate thread. Want to stay updated on releases? Subscribe to the release feed . Getting Started Install segment-analytics-python using pip: pip install segment-analytics-python If you’re using a system for managing dependencies, you’ll want to pin the library to 1.X to avoid breaking changes when the library is updated Inside your app, you’ll want to set your write_key before making any analytics calls: import segment.analytics as analytics analytics . write_key = ' YOUR_WRITE_KEY ' Note: If you need to send data to multiple Segment sources, you can initialize a new Client for each write_key . Development settings The default initialization settings are production-ready and queue messages to be processed by a background thread. In development, Segment recommends that you enable the following settings to help spot problems: analytics.debug to log debugging information to the Python logger an on_error handler to print the response you receive from Segment’s API. def on_error ( error , items ): print ( \" An error occurred: \" , error ) analytics . debug = True analytics . on_error = on_error If you don’t want to send information to Segment during testing, add the following code to your test: analytics . send = False Using Django? Check out the Django docs . Regional configuration For Business plans with access to Regional Segment , you can use the host configuration parameter to send data to the desired region: Oregon (Default) — api.segment.io/ Dublin — events.eu1.segmentapis.com/ Identify Good to know : For any of the different methods described on this page, you can replace the properties and traits in the code samples with variables that represent the data collected. The Identify method lets you tie a user to their actions and record traits about them.  It includes a unique User ID and any optional traits you know about them. Segment recommends that you call Identify  once when the user’s account is created, and later when their traits change. Example Identify  call: analytics . identify ( ' 019mr8mf4r ' , { ' email ' : ' john@example.com ' , ' name ' : ' John Smith ' , ' friends ' : 30 }) The example Identify  call is identifying John by his unique User ID (the one you know him by in your database) and labeling him with email , name and friends traits. The Identify  call has the following fields: Field Description user_id string or int The ID for this user in your database. traits dict, optional A dict of traits you know about the user. Things like: email , name or friends . context dict, optional A dict containing any context about the request. To see the full reference of supported keys, check them out in the context reference timestamp datetime, optional A datetime object representing when the Identify call took place. This is most useful if you import historical data. If the Identify call just happened, leave it blank and Segment uses the server’s time. anonymous_id string or int, optional An anonymous session ID for this user. integrations dict, optional A dictionary of destinations to enable or disable Find details on the Identify  method payload in the Segment Spec . Track Track lets you record the actions your users perform. Every action triggers what Segment calls an “event”, which can also have associated properties. You’ll want to track events that are indicators of success for your site, like Signed Up , Item Purchased or Article Bookmarked . To get started, Segment recommends tracking just a few important events. You can always add more later. Example Track call: analytics . track ( ' f4ca124298 ' , ' Signed Up ' , { ' plan ' : ' Enterprise ' }) This call informs Segment that your user just triggered the Signed Up event and chose your hypothetical 'Enterprise' plan. Track event properties can be anything you want to record, for example: analytics . track ( ' f4ca124298 ' , ' Article Bookmarked ' , { ' title ' : ' Snow Fall ' , ' subtitle ' : ' The Avalance at Tunnel Creek ' , ' author ' : ' John Branch ' }) The Track method has the following fields: Field Description user_id string The ID for this user in your database. event string The name of the event you’re tracking. Use human-readable names like Song Played or Status Updated . properties dict, optional A dictionary of properties for the event. If the event was Product Added , it might have properties like price or product . context dict, optional A dict containing any context about the request. To see the full reference of supported keys, check them out in the context reference timestamp datetime, optional A datetime object representing when the Track took place. This is most useful if you’re importing historical data. If the Track just happened, leave it blank to use the server’s time. anonymous_id string or int, optional An anonymous session ID for this user. integrations dict, optional A dictionary of destinations to enable or disable Find details on best practices in event naming as well as the Track method payload in the Segment Spec . Page The Page method lets you record page views on your website, along with optional extra information about the page being viewed. If you use a client-side set up in combination with the Python library, page calls are already tracked for you by default. If you want to record your own page views manually and aren’t using a client-side library, read on. Example Page call: analytics . page ( ' user_id ' , ' Docs ' , ' Python ' , { ' url ' : ' http://segment.com ' }) The Page call has the following fields: Field Description user_id _string The ID for the user that is a part of the group. category string, optional The category of the page. Useful for industries, like ecommerce, where many pages often live under a larger category. name string, optional The name of the page, for example Signup or Home . properties dict, optional The page properties. To see a reference of reserved page properties, see the Spec: Page documentation. context dict, optional A dict containing any context about the request. To see the full reference of supported keys, check them out in the context reference timestamp datetime, optional A datetime object representing when the Page took place. This is most useful if you’re importing historical data. If the Page just happened, leave it blank to use the server’s time. anonymous_id string or int, optional An anonymous session ID for this user. integrations dict, optional A dictionary of destinations to enable or disable Find details on the Page method payload in the Segment Spec . Screen The Screen method lets you record screen views on your mobile app, along with optional extra information about the screen being viewed. If you use a Segment mobile SDK in combination with the library, screen calls are already tracked for you by default.If you want to record your own screen views manually and don’t use a Segment SDK library, learn how below. Example Screen call: analytics . screen ( ' user_id ' , ' Settings ' , ' Brightness ' , { ' from ' : ' Home Screen ' }) The Screen call has the following fields: Field Description user_id string or number The ID for the user that is a part of the group. category string, optional The category of the page. Useful for things like ecommerce where many pages often live under a larger category. name string, optional The name of the page, for example Signup or Home . properties dict, optional A dictionary of properties of the screen. context dict, optional A dict containing any context about the request. To see the full reference of supported keys, check them out in the context reference timestamp datetime, optional A datetime object representing when the Screen took place. This is most useful if you’re importing historical data. If the Screen just happened, leave it blank to use the server’s time. anonymous_id string or int, optional An anonymous session ID for this user. integrations dict, optional A dictionary of destinations to enable or disable Find details on the Screen method payload in the Segment Spec . Group Group lets you associate an identified user with a group. A group could be a company, organization, account, project or team. It also lets you record custom traits about the group, like industry or number of employees. This is useful for tools like Intercom , Preact and Totango , as it ties the user to a group of other users. Example Group call: analytics . group ( ' user_id ' , ' group_id ' , { ' name ' : ' Initech ' , ' domain ' : ' Accounting Software ' }) The Group call has the following fields: Field Description user_id string or number The ID for the user that is a part of the group. group_id string or number The ID of the group. traits dict, optional A dict of traits you know about the group. For a company, they might be things like name , address , or phone . context dict, optional A dict containing any context about the request. To see the full reference of supported keys, check them out in the context reference timestamp datetime, optional A datetime object representing when the Group call took place. This is most useful if you’re importing historical data. If the Group call just happened, leave it blank to use the server’s time. anonymous_id string or int, optional An anonymous session ID for this user. integrations dict, optional A dictionary of destinations to enable or disable Find more details about Group, including the Group method payload , in the Segment Spec . Alias Alias is how you associate one identity with another. This is an advanced method, but it is required to manage user identities successfully in some of Segment’s destinations. In Mixpanel it’s used to associate an anonymous user with an identified user once they sign up. For Kissmetrics if your user switches IDs, you can use Alias to rename the ‘userId’. Example Alias call: analytics . alias ( previous_id , user_id ) The Alias call has the following fields: Field Description previous_id string The previous ID for this user to alias from. user_id string The user ID to alias to. context dict, optional A dict containing any context about the request. To see the full reference of supported keys, check them out in the context reference timestamp datetime, optional A datetime object representing when the Alias took place. This is most useful if you’re importing historical data. If the Alias just happened, leave it blank to use the server’s time. integrations dict, optional A dictionary of destinations to enable or disable Here’s a full example of how Segment might use the Alias call: # the anonymous user does actions under an anonymous ID analytics . track ( ' 92734232-2342423423-973945 ' , ' Anonymous Event ' ) # the anonymous user signs up and is aliased to their new user ID analytics . alias ( ' 92734232-2342423423-973945 ' , ' 1234 ' ) # the user is identified analytics . identify ( ' 1234 ' , { plan : ' Free ' }) # the identified user does actions analytics . track ( ' 1234 ' , ' Identified Action ' ) For more details about Alias, including the Alias call payload , see the Segment Spec . Historical import You can import historical data by adding the timestamp argument to any of your method calls. This can be helpful if you’ve just switched to Segment. Historical imports can only be done into destinations that can accept historical timestamped data. Most analytics tools like Mixpanel, Amplitude, Kissmetrics, etc. can handle that type of data just fine. One common destination that does not accept historical data is Google Analytics since their API cannot accept historical data. If you track things that are happening right now, omit the timestamp and Segment’s servers will timestamp the requests for you. import datetime from dateutil.tz import tzutc timestamp = datetime . datetime ( 2538 , 10 , 17 , 0 , 0 , 0 , 0 , tzinfo = tzutc ()) analytics . track ( ' 019mr8mf4r ' , ' Bought a game ' , { ' game ' : ' Duke Nukem forever ' }, timestamp = timestamp ) Timezones in Python Python’s datetime module supports two types of date and time objects: “naive” objects without timezone information, and “aware” objects that include timezones. By default, newly created datetime objects are naive. You’ll want to make sure to use timezone aware objects when importing data to be sure the timezone information is sent correctly. Segment created an aware datetime object in the example above using the tzinfo argument to the datetime constructor. If the argument were omitted, Segment would not pass timezone info: >>> naive = datetime . datetime ( 2015 , 1 , 5 , 0 , 0 , 0 , 0 ) >>> aware = datetime . datetime ( 2015 , 1 , 5 , 0 , 0 , 0 , 0 , tzinfo = tzutc ()) >>> naive . isoformat () ' 2015-01-05T00:00:00 ' >>> aware . isoformat () ' 2015-01-05T00:00:00+00:00 ' If you have an ISO format timestamp string that contains timezone information, dateutil.parser is capable of creating aware datetime objects: >>> import dateutil.parser >>> dateutil . parser . parse ( ' 2012-10-17T18:58:57.911Z ' ) datetime . datetime ( 2012 , 10 , 17 , 18 , 58 , 57 , 911000 , tzinfo = tzutc ()) >>> dateutil . parser . parse ( ' 2016-06-06T01:46:33.939388+00:00 ' ) datetime . datetime ( 2016 , 6 , 6 , 1 , 46 , 33 , 939388 , tzinfo = tzutc ()) >>> dateutil . parser . parse ( ' 2016-06-06T01:46:33.939388+07:00 ' ) datetime . datetime ( 2016 , 6 , 6 , 1 , 46 , 33 , 939388 , tzinfo = tzoffset ( None , 25200 )) >>> dateutil . parser . parse ( ' 2016-06-06T01:46:33.939388-07:00 ' ) datetime . datetime ( 2016 , 6 , 6 , 1 , 46 , 33 , 939388 , tzinfo = tzoffset ( None , - 25200 )) If you find yourself with a naive object, and know what timezone it should be in, you can also use pytz to create an aware datetime object from the naive one: >>> import datetime >>> import pytz >>> naive = datetime . datetime . now () >>> aware = pytz . timezone ( ' US/Pacific ' ). localize ( naive ) >>> naive . isoformat () ' 2016-06-05T21:52:14.499635 ' >>> aware . isoformat () ' 2016-06-05T21:52:14.499635-07:00 ' The pytz documentation contains some good additional information on timezone usage, as well as how to handle some of the more interesting edge cases. Whatever your method, make sure you use aware datetime objects when importing your data or it will be in the wrong timezone. # Check that a datetime object d is aware assert d . tzinfo is not None and d . tzinfo . utcoffset ( d ) is not None Server logs example import dateutil.parser import segment.analytics as analytics analytics . write_key = ' YOUR_WRITE_KEY ' log = [ ' 2012-10-17T18:58:57.911Z 019mr8mf4r /purchased/tshirt ' ] for entry in log : timestamp_str , user_id , url = entry . split ( ' ' ) timestamp = dateutil . parser . parse ( timestamp_str ) # resulting datetime.datetime object is aware # have a timezone? check yo'self assert timestamp . tzinfo is not None and timestamp . tzinfo . utcoffset ( timestamp ) is not None analytics . track ( user_id , ' Shirt Bought ' , { ' color ' : ' Blue ' , ' revenue ' : 17.90 }, timestamp = timestamp ) analytics . flush () Selecting destinations The Alias, Group, Identify, Page, and Track calls can all be passed an object of integrations that lets you turn certain destinations on or off. By default all destinations are enabled. Here’s an example Track call with the integrations object shown. analytics . track ( ' 9742 ' , ' Song Played ' , integrations = { ' all ' : False , ' Kissmetrics ' : True , ' Google Analytics ' : False }) This example illustrates that this track call goes only to Kissmetrics. 'all': False says that no destination should be enabled unless otherwise specified. 'Kissmetrics': True enables Kissmetrics. Destination flags are case sensitive and match the destination’s name in the docs (for example, “AdLearn Open Platform”, “awe.sm”, or “MailChimp”). Batching Segment’s libraries are built to support high performance environments. It’s safe to use analytics-python on a web server that serves hundreds of requests per second. Every method you call does not result in an HTTP request, but is queued in memory instead. Messages are flushed in batch in the background, which allows for much faster operation. By default, Segment’s Python library will flush: every 100 messages (control with upload_size ) if 0.5 seconds has passed since the last flush (control with upload_interval ) There is a maximum of 500KB per batch request and 32KB per call. HTTP Tracking API limits Segment's HTTP Tracking API accepts batch requests up to 500KB . To avoid errors in event creation, ensure that individual event payload sizes remain below 32KB . What happens if there are just too many messages? If the module detects that it can’t flush faster than it’s receiving messages, it’ll simply stop accepting messages. This means your program will never crash because of a backed up analytics queue. The default max_queue_size is 10000 . Flush You can call the flush method at the end of your program to make sure there’s nothing left in the queue: analytics . flush () Calling this method will block the calling thread until there’s no messages left in the queue. You’ll want to use it as part of your cleanup scripts and avoid using it as part of the request lifecycle. How do I gzip requests? You can compress batched requests before sending them to Segment by setting the gzip argument when constructing a Client. from analytics import Client Client ( ' YOUR_WRITE_KEY ' , gzip = True ) Detecting errors You can listen to events to be called on failed flushes: def on_error ( error , items ): print ( ' Failure ' , error ) analytics . on_error = on_error Logging analytics-python uses the standard python logging module. By default, logging is enabled and set at the logging.WARNING level. If you want it to talk more, you can set a different log_level : import logging logging . getLogger ( ' segment ' ). setLevel ( ' DEBUG ' ) Options If you hate defaults or want to send data to multiple sources, then you can create your own Clients. Keep in mind that each client runs a separate background thread, so you won’t want to create these on every request. Check out these gizmos: from analytics import Client Client ( ' YOUR_WRITE_KEY ' , debug = True , on_error = on_error , send = True , max_queue_size = 100000 , upload_interval = 5 , upload_size = 500 , gzip = True ) Field Description debug bool True to log more verbosely, False by default. send bool False to avoid sending data to Segment, True by default. on_error function Set an error handler to be called whenever errors occur max_queue_size int Maximum number of elements allowed in the queue. If this condition is ever reached, that means you’re identifying / tracking faster than you can flush. If this happens, let Segment know . upload_interval float The frequency, in seconds, to send data to Segment. Default value is 0.5. upload_size int Number of items in a batch to upload. Default value is 100. gzip bool True to compress data with gzip before sending, False by default. sync_mode bool True to disable threading and send all request synchronously, False by default. Experimental, see Background threads and synchronous mode . Django To add analytics to your Django web server, you need to include the initialization code in the ready() method of a custom AppConfig object for one of the apps in your project. This method is responsible for performing initialization tasks for your project. myapp/apps.py file: from django.apps import AppConfig import segment.analytics as analytics class MyAppConfig ( AppConfig ): def ready ( self ): analytics . write_key = ' YOUR_WRITE_KEY ' myapp/__init__.py file: default_app_config = ' myapp.apps.MyAppConfig ' How do I add logging to Django? If you’re troubleshooting your analytics, you’ll want to turn on logging. You need to add the analytics logger and handler to your settings.py . LOGGING = { ' version ' : 1 , ' formatters ' : { ' simple ' : { ' format ' : ' %(levelname)s %(message)s ' } }, ' handlers ' : { ' console ' : { ' level ' : ' DEBUG ' , ' class ' : ' logging.StreamHandler ' , ' formatter ' : ' simple ' } }, ' loggers ' : { ' segment ' : { ' handlers ' : [ ' console ' ], ' level ' : ' DEBUG ' , ' propagate ' : True , } } } and turn on module logging in your initialization call in urls.py . import logging import segment.analytics as analytics analytics . debug = True # turn on debug logging analytics . write_key = ' YOUR_WRITE_KEY ' Google App Engine Google App Engine may not resolve project dependencies. If this is the case add the following to your project alongside analytics-python: requests python-dateutil If you’re having issues with threads outliving your request, check Background threads and synchronous mode OAuth 2.0 Enable OAuth 2.0 in your Segment workspace to guarantee authorized communication between your server environment and Segment’s Tracking API. To support the non-interactive server environment, the OAuth workflow used is a signed client assertion JWT. You will need a public and private key pair where: The public key is uploaded to the Segment dashboard. The private key is kept in your server environment to be used by this SDK. \nYour server will verify its identity by signing a token request and will receive a token that is used to to authorize all communication with the Segment Tracking API. You’ll need to provide the OAuth Application ID and the public key’s ID, both of which are provided in the Segment dashboard.  There are also options available to specify the authorization server, custom scope, maximum number of retries, or a custom HTTP client if your environment has special rules for separate segment endpoints. Be sure to implement handling for Analytics SDK errors. Good logging will help distinguish any configuration issues. For more information, see the Segment OAuth 2.0 documentation . import segment.analytics as analytics with open ( \" private_key.pem \" ) as f : privatekey = f . read () analytics . write_key = ' <YOUR WRITE KEY HERE> ' analytics . oauth_client_id = ' CLIENT_ID ' # OAuth application ID from segment dashboard analytics . oauth_client_key = privatekey # generated as a public/private key pair in PEM format from OpenSSL analytics . oauth_key_id = ' KEY_ID ' # From segment dashboard after uploading public key def on_error ( error , items ): print ( \" An error occurred: \" , error ) analytics . on_error = on_error analytics . track ( ' AUser ' , ' track ' ) analytics . flush () Troubleshooting Request size limits HTTP Tracking API limits Segment's HTTP Tracking API accepts batch requests up to 500KB . To avoid errors in event creation, ensure that individual event payload sizes remain below 32KB . The following tips often help resolve common issues. No events in my debugger Double check that you’ve followed all the steps in the Quickstart . Make sure that you’re calling a Segment API method once the library is successfully installed— identify , track , etc. Make sure your application isn’t shutting down before the Analytics.Client local queue events are pushed to Segment. You can manually call Analytics.Client.Flush() to ensure the queue is fully processed before shutdown. Other common errors If you are experiencing data loss from your Python source, you may be experiencing one or more of the following common errors: Payload is too large : If you attempt to send events larger than 32KB per normal API request or batches of events larger than 500KB per request, Segment’s tracking API responds with 400 Bad Request . Try sending smaller events (or smaller batches) to correct this error. Identifier is not present : Segment’s tracking API requires that each payload has a userId and/or anonymousId . If you send events without either the userId or anonymousId , Segment’s tracking API responds with an no_user_anon_id error. Check the event payload and client instrumentation for more details. Track event is missing name : All Track events to Segment must have a name in string format. Event dropped during deduplication : Segment automatically adds a messageId field to all payloads and uses this value to deduplicate events. If you’re manually setting a messageId value, ensure that each event has a unique value. Incorrect credentials : Double check your credentials for your downstream destination(s). Destination incompatibility : Make sure that the destination you are troubleshooting can accept server-side API calls. You can see compatibility information on the Destination comparison by category page and in the documentation for your specific destination. Destination-specific requirements : Check out the destination’s documentation to see if there are other requirements for using the method and destination that you’re trying to get working. Override context value In some cases, you will want to manually pass in ip or userAgent values. Since Segment does not automatically send these, you can pass these through the context object as follows: analytics . track ( ' 9742 ' , ' Song Played ' , context = { ' ip ' : 1234 , ' userAgent ' : ' Mozilla/5.0 (Linux; U; Android 4.1.1; en-gb; Build/KLP) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30 ' }) Be sure to see the full reference of supported keys . Versioning Check that you have the most recent version. python -c \"import segment.analytics as analytics; print analytics.VERSION\" Does it match the most current version ? If not, update your version. pip install -U segment-analytics-python or easy_install --upgrade segment-analytics-python Background threads and synchronous mode Experimental feature, available since 1.3.0b1 . In some cases, you will want to disable threads and send each request synchronously. If your source is managing tasks asynchronously using software like Celery , consider enabling this option to resolve potential conflicts with the Segment Python library’s threading system. To do so, you can use the sync_mode option: import segment.analytics as analytics analytics . write_key = ' YOUR_WRITE_KEY ' analytics . sync_mode = True This page was last modified: 10 Sep 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Identify Track Page Screen Group Alias Historical import Selecting destinations Batching Logging Options Django Google App Engine OAuth 2.0 Troubleshooting Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "working",
      "website",
      "group",
      "correctly",
      "labeling",
      "performing",
      "block",
      "supported",
      "troubleshooting",
      "custom",
      "getlogger",
      "crash",
      "source",
      "error",
      "database",
      "engine",
      "gizmos",
      "project",
      "author",
      "939388",
      "controller",
      "community",
      "title",
      "easiest",
      "options",
      "identity",
      "myapp",
      "between",
      "blocking",
      "normal",
      "triggered",
      "100000",
      "until",
      "switched",
      "failed",
      "historical",
      "anonymous",
      "constructor",
      "pushed",
      "documentation",
      "quickstart",
      "server",
      "compress",
      "happening",
      "timezones",
      "identifying",
      "category",
      "scripts",
      "attempt",
      "triggers",
      "which",
      "improve",
      "region",
      "simple",
      "separate",
      "python",
      "alias",
      "logging",
      "correct",
      "processed",
      "happened",
      "practices",
      "illustrates",
      "lifecycle",
      "calling",
      "pages",
      "contains",
      "tunnel",
      "05t21",
      "yourself",
      "option",
      "program",
      "include",
      "guarantee",
      "function",
      "errors",
      "intended",
      "utcoffset",
      "debugger",
      "missing",
      "certain",
      "representing",
      "cannot",
      "useragent",
      "played",
      "formatter",
      "identified",
      "individual",
      "every",
      "bookmarked",
      "helpful",
      "collected",
      "where",
      "06t01",
      "destinations",
      "creating",
      "batched",
      "regional",
      "email",
      "float",
      "khtml",
      "recommends",
      "article",
      "desired",
      "release",
      "indicators",
      "serves",
      "batches",
      "dropped",
      "timestamped",
      "whatever",
      "detecting",
      "informs",
      "followed",
      "field",
      "making",
      "during",
      "phone",
      "track",
      "larger",
      "configuration",
      "assertion",
      "install",
      "context",
      "failure",
      "automatically",
      "hundreds",
      "format",
      "privatekey",
      "successfully",
      "on_error",
      "development",
      "initialize",
      "upgrade",
      "should",
      "easy_install",
      "advanced",
      "disable",
      "f4ca124298",
      "create",
      "mixpanel",
      "value",
      "feedback",
      "write",
      "queued",
      "limits",
      "event",
      "subscribe",
      "__init__",
      "localize",
      "reached",
      "control",
      "tasks",
      "payloads",
      "generated",
      "samples",
      "getting",
      "objects",
      "record",
      "thread",
      "traits",
      "uploaded",
      "specify",
      "smith",
      "avalance",
      "sizes",
      "creek",
      "names",
      "might",
      "flushed",
      "analytics",
      "datetime",
      "oauth_client_id",
      "change",
      "useful",
      "false",
      "accounting",
      "switches",
      "accepts",
      "system",
      "session",
      "standard",
      "wrong",
      "signed",
      "mozilla",
      "tzutc",
      "openssl",
      "naive",
      "upload_interval",
      "things",
      "flags",
      "compatibility",
      "application",
      "provide",
      "remain",
      "log_level",
      "timestamp_str",
      "isoformat",
      "integrate",
      "using",
      "screen",
      "sources",
      "testing",
      "another",
      "authorize",
      "credentials",
      "websites",
      "additional",
      "responds",
      "modified",
      "combination",
      "aliased",
      "steps",
      "whenever",
      "already",
      "information",
      "servers",
      "performance",
      "override",
      "domain",
      "scope",
      "added",
      "associate",
      "handling",
      "data",
      "shirt",
      "service",
      "dependencies",
      "libraries",
      "comparison",
      "later",
      "parser",
      "celery",
      "common",
      "github",
      "forever",
      "string",
      "flagship",
      "employees",
      "import",
      "token",
      "authorization",
      "private",
      "assistance",
      "911000",
      "avoid",
      "499635",
      "private_key",
      "otherwise",
      "constructing",
      "blank",
      "17t18",
      "reserved",
      "account",
      "initech",
      "build",
      "trying",
      "object",
      "signup",
      "amplitude",
      "provided",
      "debug",
      "items",
      "group_id",
      "extra",
      "method",
      "accepting",
      "nothing",
      "sync_mode",
      "place",
      "print",
      "rename",
      "seconds",
      "brightness",
      "resolve",
      "multiple",
      "public",
      "identify",
      "containing",
      "since",
      "subtitle",
      "adlearn",
      "allows",
      "timezone",
      "versioning",
      "capable",
      "bought",
      "client_id",
      "required",
      "potential",
      "handlers",
      "critical",
      "either",
      "cleanup",
      "anonymous_id",
      "10000",
      "properties",
      "level",
      "api",
      "default_app_config",
      "views",
      "appconfig",
      "requirements",
      "parameter",
      "entry",
      "segmentapis",
      "manually",
      "tools",
      "key_id",
      "business",
      "replace",
      "specified",
      "mailchimp",
      "follows",
      "supports",
      "unless",
      "oauth_client_key",
      "industries",
      "experimental",
      "issues",
      "applewebkit",
      "visit",
      "viewed",
      "kissmetrics",
      "memory",
      "user_id",
      "methods",
      "leave",
      "messageid",
      "following",
      "there",
      "smaller",
      "updated",
      "identifier",
      "about",
      "pacific",
      "integrations",
      "outliving",
      "under",
      "environments",
      "signs",
      "aware",
      "being",
      "problems",
      "synchronous",
      "preact",
      "consider",
      "possible",
      "setting",
      "requires",
      "oauth_key_id",
      "no_user_anon_id",
      "variables",
      "hypothetical",
      "color",
      "types",
      "feature",
      "levelname",
      "number",
      "faster",
      "specific",
      "gecko",
      "tracked",
      "messages",
      "threading",
      "product",
      "below",
      "shutting",
      "different",
      "batch",
      "listen",
      "events",
      "django",
      "response",
      "without",
      "platform",
      "flush",
      "never",
      "message",
      "enabling",
      "android",
      "batching",
      "update",
      "routes",
      "installed",
      "uploading",
      "destination",
      "importing",
      "shown",
      "recent",
      "address",
      "present",
      "would",
      "signing",
      "downstream",
      "optional",
      "timestamp",
      "enable",
      "previous_id",
      "max_queue_size",
      "company",
      "debugging",
      "condition",
      "enabled",
      "verbosely",
      "sending",
      "dateutil",
      "ensure",
      "omitted",
      "973945",
      "local",
      "logger",
      "05t00",
      "includes",
      "interesting",
      "accept",
      "receiving",
      "special",
      "unique",
      "releases",
      "status",
      "maintenance",
      "class",
      "500kb",
      "workspace",
      "after",
      "thanks",
      "google",
      "split",
      "anonymousid",
      "incompatibility",
      "mobile",
      "retries",
      "adding",
      "happens",
      "changes",
      "nukem",
      "ecommerce",
      "along",
      "deduplicate",
      "creation",
      "means",
      "result",
      "argument",
      "write_key",
      "warning",
      "chose",
      "resulting",
      "background",
      "friends",
      "perform",
      "userid",
      "enables",
      "threads",
      "detects",
      "alongside",
      "dublin",
      "loggers",
      "imports",
      "match",
      "access",
      "25200",
      "updates",
      "synchronously",
      "check",
      "upload_size",
      "upload",
      "double",
      "fields",
      "incorrect",
      "before",
      "totango",
      "frequency",
      "initialization",
      "organization",
      "because",
      "newly",
      "other",
      "library",
      "called",
      "fully",
      "shutdown",
      "growth",
      "interactive",
      "responsible",
      "naming",
      "defaults",
      "flushes",
      "associated",
      "previous",
      "enterprise",
      "available",
      "conflicts",
      "inside",
      "could",
      "breaking",
      "client",
      "through",
      "sensitive",
      "ready",
      "example",
      "2342423423",
      "handler",
      "catalog",
      "setlevel",
      "communication",
      "request",
      "requests",
      "auser",
      "oregon",
      "simply",
      "segment",
      "clients",
      "software",
      "right",
      "second",
      "module",
      "distinguish",
      "receive",
      "parse",
      "queue",
      "success",
      "maximum",
      "contact",
      "managing",
      "purchased",
      "endpoints",
      "identities",
      "important",
      "console",
      "learn",
      "price",
      "operation",
      "including",
      "payload",
      "implement",
      "handle",
      "these",
      "elements",
      "current",
      "occur",
      "started",
      "occurred",
      "92734232",
      "large",
      "019mr8mf4r",
      "settings",
      "revenue",
      "rules",
      "having",
      "instead",
      "cases",
      "branch",
      "always",
      "description",
      "values",
      "dashboard",
      "calls",
      "built",
      "readable",
      "_string",
      "assert",
      "tzinfo",
      "their",
      "passed",
      "allowed",
      "deduplication",
      "propagate",
      "environment",
      "oauth",
      "tshirt",
      "myappconfig",
      "created",
      "represent",
      "version",
      "tzoffset",
      "industry",
      "manage",
      "support",
      "plans",
      "dictionary",
      "tracking",
      "action",
      "backed",
      "streamhandler",
      "usage",
      "default",
      "experiencing",
      "asynchronously",
      "formatters",
      "safari",
      "described",
      "reference",
      "workflow",
      "actions",
      "above",
      "linux",
      "internal",
      "verify",
      "selecting",
      "connections",
      "often",
      "intercom",
      "questions",
      "human",
      "users",
      "your_write_key",
      "anything",
      "instrumentation",
      "production",
      "authorized",
      "details"
    ],
    "howto_steps": [
      "upload_size int Number of items in a batch to upload. Default value is",
      "gzip bool True to compress data with gzip before sending, False by default. sync_mode bool True to disable threading and send all request synchronously, False by default. Experimental, see Background threads and synchronous mode . Django To add analytics to your Django web server, you need to include the initialization code in the ready() method of a custom AppConfig object for one of the apps in your project. This method is responsible for performing initialization tasks for your project. myapp/apps.py file: from django.apps import AppConfig import segment.analytics as analytics class MyAppConfig ( AppConfig ): def ready ( self ): analytics . write_key = ' YOUR_WRITE_KEY ' myapp/__init__.py file: default_app_config = ' myapp.apps.MyAppConfig ' How do I add logging to Django? If you’re troubleshooting your analytics, you’ll want to turn on logging. You need to add the analytics logger and handler to your settings.py . LOGGING = { ' version ' : 1 , ' formatters ' : { ' simple ' : { ' format ' : ' %(levelname)s %(message)s ' } }, ' handlers ' : { ' console ' : { ' level ' : ' DEBUG ' , ' class ' : ' logging.StreamHandler ' , ' formatter ' : ' simple ' } }, ' loggers ' : { ' segment ' : { ' handlers ' : [ ' console ' ], ' level ' : ' DEBUG ' , ' propagate ' : True , } } } and turn on module logging in your initialization call in urls.py . import logging import segment.analytics as analytics analytics . debug = True # turn on debug logging analytics . write_key = ' YOUR_WRITE_KEY ' Google App Engine Google App Engine may not resolve project dependencies. If this is the case add the following to your project alongside analytics-python: requests python-dateutil If you’re having issues with threads outliving your request, check Background threads and synchronous mode OAuth",
      "25200 )) If you find yourself with a naive object, and know what timezone it should be in, you can also use pytz to create an aware datetime object from the naive one: >>> import datetime >>> import pytz >>> naive = datetime . datetime . now () >>> aware = pytz . timezone ( ' US/Pacific ' ). localize ( naive ) >>> naive . isoformat () ' 2016"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/connections/storage/catalog/databricks/",
    "title": " Databricks Destination | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Storage / Catalog / Databricks Destination Databricks Destination On this page Getting started Set up Databricks in Segment Connect your Databricks warehouse Security With the Databricks Destination, you can ingest event data directly from Segment into your Databricks Lakehouse. This page will help you get started with syncing Segment events into your Databricks Lakehouse. Segment has certified the destination for Databricks on AWS and Azure. Getting started Before getting started with the Databricks Destination, note the following prerequisites. The target Databricks workspace must be Unity Catalog enabled. Segment doesn’t support the Hive metastore. Visit the Databricks guide enabling the Unity Catalog for more information. Segment creates managed tables in the Unity catalog. The service account needs access to create schemas on the catalog and can delete, drop, or vacuum tables. Segment supports only OAuth (M2M) for authentication. Segment recommends that you enable Warehouse Selective Sync. This feature enables customization of collections and properties sent to the warehouse. By syncing only relevant and required data, it reduces sync duration and compute costs, optimizing efficiency compared to syncing everything. Learn more about Warehouse Selective Sync . Warehouse size A SQL warehouse is required for compute. Segment recommends a warehouse with the following characteristics: Size : small Type Serverless otherwise Pro Clusters : Minimum of 2 - Maximum of 6 Segment recommends manually starting your SQL warehouse before setting up your Databricks destination. If the SQL warehouse isn’t running, Segment attempts to start the SQL warehouse to validate the connection and may experience a timeout when you hit the Test Connection button during setup. Set up Databricks in Segment Use the following steps to set up Databricks in Segment: Navigate to Connections > Catalog . Select the Destinations tab. Under Connection Type, select Storage , and click on the Databricks storage tile. (Optional) Select a source(s) to connect to the destination. Follow the steps below to connect your Databricks warehouse . Connect your Databricks warehouse Use the five steps below to connect to your Databricks warehouse. You’ll need read and write warehouse permissions for Segment to write to your database. Step 1: Name your destination Add a name to help you identify this warehouse in Segment. You can change this name at any time by navigating to the destination settings ( Connections > Destinations > Settings ) page. Step 2: Enter the Databricks compute resources URL You’ll use the Databricks workspace URL, along with Segment, to access your workspace API. Check your browser’s address bar when inside the workspace. The workspace URL should resemble: https://<workspace-deployment-name>.cloud.databricks.com . Remove any characters after this portion and note the URL for later use. Step 3: Enter a Unity catalog name This catalog is the target catalog where Segment lands your schemas and tables. Follow the Databricks guide for creating a catalog . Be sure to select the storage location created earlier. You can use any valid catalog name (for example, “Segment”). Note this name for later use. Select the catalog you’ve just created. Select the Permissions tab, then click Grant . Select the Segment service principal from the dropdown, and check ALL PRIVILEGES . Click Grant . Step 4: Add the SQL warehouse details from your Databricks warehouse Next, add SQL warehouse details about your compute resource. HTTP Path : The connection details for your SQL warehouse. Port : The port number of your SQL warehouse. Step 5: Add the service principal client ID and OAuth secret Be sure to note the principal ID and the OAuth secret Databricks generates, as you’ll need to enter them in this step. Segment uses the service principal to access your Databricks workspace and associated APIs. Follow the Databricks guide for adding a service principal to your account . This name can be anything, but Segment recommends something that identifies the purpose (for example, “Segment Storage Destinations”). Note the principal application ID that Databricks generates to use in this step. Segment doesn’t require Account admin or Marketplace admin roles. Follow the Databricks instructions to generate an OAuth secret . Note the secret generated by Databricks to use in this step. Once you navigate away from this page, the secret is no longer visible. If you lose or forget the secret, delete the existing secret and create a new one. Once connected, you’ll see a confirmation screen with next steps and more info on using your warehouse. View observability metrics about your Databricks Destination with Delivery Overview Delivery Overview, Segment’s built-in observability tool, is now in public beta for storage destinations. For more information, see the Delivery Overview documentation. Security Segment recommends enabling IP allowlists for added security. All Segment users with workspaces hosted in the US who use allowlists in their warehouses must update those allowlists to include the following ranges: 52.25.130.38/32 34.223.203.0/28 Users with workspaces in the EU must allowlist 3.251.148.96/29 . This page was last modified: 21 Oct 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting started Set up Databricks in Segment Connect your Databricks warehouse Security Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "relevant",
      "connected",
      "directly",
      "access",
      "visit",
      "minimum",
      "click",
      "small",
      "metastore",
      "vacuum",
      "permissions",
      "check",
      "certified",
      "generate",
      "longer",
      "visible",
      "marketplace",
      "source",
      "before",
      "database",
      "analytics",
      "following",
      "change",
      "ingest",
      "cloud",
      "about",
      "everything",
      "starting",
      "instructions",
      "easiest",
      "under",
      "growth",
      "characteristics",
      "dropdown",
      "resemble",
      "problems",
      "associated",
      "generates",
      "forget",
      "require",
      "compute",
      "setting",
      "purpose",
      "admin",
      "documentation",
      "navigate",
      "inside",
      "application",
      "valid",
      "client",
      "customization",
      "managed",
      "compared",
      "navigating",
      "example",
      "creates",
      "feature",
      "workspaces",
      "privileges",
      "integrate",
      "number",
      "screen",
      "catalog",
      "using",
      "websites",
      "improve",
      "experience",
      "follow",
      "request",
      "storage",
      "overview",
      "modified",
      "selective",
      "select",
      "delivery",
      "below",
      "delete",
      "steps",
      "segment",
      "deployment",
      "information",
      "warehouses",
      "events",
      "added",
      "include",
      "allowlists",
      "allowlist",
      "efficiency",
      "data",
      "databricks",
      "unity",
      "service",
      "maximum",
      "enabling",
      "collections",
      "contact",
      "lakehouse",
      "later",
      "syncing",
      "validate",
      "update",
      "earlier",
      "tables",
      "learn",
      "destination",
      "resource",
      "connect",
      "optimizing",
      "those",
      "lands",
      "location",
      "something",
      "address",
      "identifies",
      "assistance",
      "attempts",
      "started",
      "these",
      "browser",
      "otherwise",
      "duration",
      "warehouse",
      "resources",
      "helpful",
      "target",
      "where",
      "destinations",
      "optional",
      "account",
      "enable",
      "security",
      "settings",
      "creating",
      "recommends",
      "grant",
      "connection",
      "built",
      "button",
      "enabled",
      "their",
      "prerequisites",
      "setup",
      "clusters",
      "oauth",
      "confirmation",
      "characters",
      "created",
      "guide",
      "observability",
      "running",
      "during",
      "support",
      "portion",
      "public",
      "workspace",
      "identify",
      "after",
      "costs",
      "roles",
      "hosted",
      "https",
      "thanks",
      "authentication",
      "azure",
      "mobile",
      "required",
      "needs",
      "principal",
      "adding",
      "properties",
      "serverless",
      "api",
      "along",
      "should",
      "secret",
      "generated",
      "ranges",
      "connections",
      "doesn",
      "reduces",
      "create",
      "questions",
      "existing",
      "schemas",
      "timeout",
      "feedback",
      "manually",
      "tools",
      "write",
      "enter",
      "users",
      "enables",
      "event",
      "start",
      "anything",
      "metrics",
      "remove",
      "supports",
      "details"
    ],
    "howto_steps": [
      "Maximum of 6 Segment recommends manually starting your SQL warehouse before setting up your Databricks destination. If the SQL warehouse isn’t running, Segment attempts to start the SQL warehouse to validate the connection and may experience a timeout when you hit the Test Connection button during setup. Set up Databricks in Segment Use the following steps to set up Databricks in Segment: Navigate to Connections > Catalog . Select the Destinations tab. Under Connection Type, select Storage , and click on the Databricks storage tile. (Optional) Select a source(s) to connect to the destination. Follow the steps below to connect your Databricks warehouse . Connect your Databricks warehouse Use the five steps below to connect to your Databricks warehouse. You’ll need read and write warehouse permissions for Segment to write to your database. Step 1: Name your destination Add a name to help you identify this warehouse in Segment. You can change this name at any time by navigating to the destination settings ( Connections > Destinations > Settings ) page. Step 2: Enter the Databricks compute resources URL You’ll use the Databricks workspace URL, along with Segment, to access your workspace API. Check your browser’s address bar when inside the workspace. The workspace URL should resemble: https://<workspace"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#set-up-databricks-in-segment",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/storage/",
    "title": " Data Storage overview | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Data Storage overview Data Storage overview Off-the-shelf analytics tools (like Google Analytics and Mixpanel) offer quick and easy insights about common business questions, and often meet the needs of marketing teams and product managers. However, data analysts and data scientists need access to an organization’s raw data to derive deeper and more customized insights to support their organization. Only users with Business or Team plans can add Warehouse destinations. Segment offers several Data Storage Destinations to help you store your raw Segment data, including: Data Warehouses (available to Team and Business Tier customers) AWS S3 (available to all users) Google Cloud Storage (available to all users) Segment Data Lakes (available to Business Tier customers only) Analytics Academy: Why you should own your data Although the sharing economy is eroding the idea of “ownership,” when it comes to analytics data, we strongly believe that you should own it. This page was last modified: 30 Mar 2023 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "conceptual",
    "keywords": [
      "access",
      "visit",
      "deeper",
      "ownership",
      "analytics",
      "change",
      "organization",
      "cloud",
      "about",
      "easiest",
      "growth",
      "customers",
      "problems",
      "available",
      "documentation",
      "sharing",
      "integrate",
      "however",
      "websites",
      "shelf",
      "offer",
      "improve",
      "request",
      "storage",
      "overview",
      "modified",
      "product",
      "segment",
      "warehouses",
      "store",
      "data",
      "contact",
      "common",
      "economy",
      "including",
      "these",
      "assistance",
      "started",
      "helpful",
      "warehouse",
      "destinations",
      "account",
      "customized",
      "eroding",
      "their",
      "quick",
      "although",
      "managers",
      "teams",
      "analysts",
      "support",
      "plans",
      "thanks",
      "google",
      "mobile",
      "believe",
      "academy",
      "needs",
      "should",
      "comes",
      "connections",
      "scientists",
      "often",
      "questions",
      "create",
      "mixpanel",
      "insights",
      "feedback",
      "tools",
      "marketing",
      "derive",
      "users",
      "lakes",
      "several",
      "business",
      "strongly",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/storage/warehouses/warehouse-syncs/#warehouse-selective-sync",
    "title": " Warehouse Syncs | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Storage / Warehouses / Warehouse Syncs Warehouse Syncs On this page Sync Frequency Sync History Warehouse Selective Sync Instead of constantly streaming data to the warehouse destination, Segment loads data to the warehouse in bulk at regular intervals. Before the data loads, Segment inserts and updates events and objects, and automatically adjusts the schema to make sure the data in the warehouse is inline with the data in Segment. When Segment loads data into your warehouse, each sync goes through two steps: Ping: Segment servers connect to your warehouse. For Redshift warehouses, Segment also runs a query to determine how many slices a cluster has. Common reasons a sync might fail at this step include a blocked VPN or IP, a warehouse that isn’t set to be publicly accessible, or an issue with user permissions or credentials. Load: Segment de-duplicates the transformed data and loads it into your warehouse. If you have queries set up in your warehouse, they run after the data is loaded into your warehouse. Warehouses sync with all data coming from your source. However, Business plan members can manage the data that is sent to their warehouses using Selective Sync . Sync Frequency Your plan determines how frequently data is synced to your warehouse. Plan Frequency Free Once a day (every 86,400 seconds) Team Twice a day (every 43,200 seconds) Business* Up to 24 times a day. Generally, these syncs are fixed to the top of the hour (:00), but these times can vary. *If you’re a Business plan member and would like to adjust your sync frequency, you can do so using the Selective Sync feature. To enable Selective Sync, please go to Warehouse > Settings > Sync Schedule . Why can't I sync more than 24 times per day? We do not set syncs to happen more than once per hour (24 times per day). The warehouse product is not designed for real-time data, so more frequent syncs would not necessarily be helpful. Sync History You can use the Sync History page to see the status and history of data updates in your warehouse. The Sync History page is available for every source connected to each warehouse. This page helps you answer questions like, “Has the data from a specific source been updated recently?” “Did a sync completely fail, or only partially fail?” and “Why wasn’t this sync successful?” The Sync History includes the following information: Sync Status : The possible statuses are: Success : The sync run completed without any notices and all rows synced, OR no rows synced because no data was found. Partial : The sync run completed with some notices and some rows synced. Failure : The sync run completed with some notices and no rows synced. Start Time : The time at which the sync began. This is shown in your local timezone. Duration : The length of time the sync took. Synced Rows : Number of rows successfully synced from the sync run. Notices : A list of errors or warnings found, which could indicate problems with the sync run. Click a notice message to show details about the result, and any errors or warnings for each collection included in the sync run. If a sync run shows a partial success or failure, the next sync attempts to sync any data that was not successfully synced in the prior run. View the Sync History To view the Sync History: Go to Connections > Destinations and choose the warehouse destination you want to view the sync history for. Click the source you want to view the sync history for. (Optional) Click on any of the rows in the Sync History table to see additional details related to that sync. You can view: The Results of your sync which shows the number of rows synced for each collection. The Sync Duration which shows the Preparation and Loading times of your sync. Warehouse Selective Sync Warehouse Selective Sync allows you to manage the data that you send to your warehouses. You can use this feature to stop syncing specific events (also known as collections) or properties that aren’t relevant, and may slow down your warehouse syncs. This feature is only available to Business Tier customers. You must be a Workspace Owner to change Selective Sync settings. With Selective Sync, you can customize which collections and properties from a source are sent to each warehouse. This helps you control the data that is sent to each warehouse, allowing you to sync different sets of data from the same source to different warehouses. NOTE: This feature only affects warehouses , and doesn’t prevent data from going to any other destinations . When you disable a source, collection or property, Segment no longer syncs data from that source. Segment won’t delete any historical data from your warehouse. When you re-enable a source, Segment syncs all events since the last sync. This doesn’t apply when a collection or property is re-enabled. Only new data generated after re-enabling a collection or property will sync to your warehouse. For each warehouse only the first 5,000 collections per source and 5,000 properties per collection are visible in the Selective Sync user interface. Learn more about the limits . Disabling the received_at column will cause your syncs to fail, as all tables use received_at as the sort key. When to use Selective Sync By default, all sources and their collections and properties are sent, and no data is prevented from reaching warehouses. When you disable sources, collections, or properties using Selective Sync, Segment stops sending new data for these sources, collections, or properties to your warehouse. It doesn’t delete any existing data in the warehouse. If you choose to re-enable a source to begin syncing again, Segment loads all data that arrived since the last sync into the warehouse, but doesn’t backfill data that was omitted while these were disabled. When a collection or property is re-enabled, data only syncs going forward. It will not be loaded from the last sync. Enable Selective Sync To use Selective Sync: Go to Connections > Destinations and select the warehouse you want to enable Selective Sync for. Click the Settings tab and click Selective Sync in the left menu. Select which sources, collections, and properties to sync. All that is not selected won’t be synced to your warehouse. Click Save Changes . Change sync settings to a single warehouse from multiple sources To change the sync settings to a single warehouse from multiple sources, follow the same steps as above . This may be valuable if you’re looking to make changes in bulk, such as when setting up a new warehouse. Change sync settings on a specific Warehouse to Source connection To manage data from one specific source to an individual warehouse: Go to Connections > Destinations and select the warehouse you want to change the sync settings for. On the Warehouse Overview page, click the Schema you want to change the sync settings for. On the Settings tab of the Sync History page for that source, select the data you want synced to your warehouse, or deselect the data you don’t want synced. This may be valuable when you’re making smaller changes, for example, disabling all properties from one unnecessary collection. All changes made through Selective Sync only impact an individual warehouse. They don’t impact multiple warehouses at once. To make changes to multiple warehouses, you need to enable/disable data for each individual warehouse. Selective Sync User Interface Limits Regardless of schema size, for each warehouse only the first 5,000 collections per source and 5,000 properties per collection can be managed using the Selective Sync user interface. After you hit any of these limits, all future data is still tracked and sent to your warehouse. New collections created after hitting this limit is not displayed in the Selective Sync table. You will see a warning in the Selective Sync user interface when the warehouse schema has reached 80% of the limit for collections and/or properties. An error message will appear when you’ve reached the limit. Contact Support to edit Selective Sync settings for any collections and/or properties which exceed the limit. Only Workspace Owners can change Selective Sync settings. This page was last modified: 20 Mar 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Sync Frequency Sync History Warehouse Selective Sync Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "regardless",
      "streaming",
      "connected",
      "relevant",
      "click",
      "visit",
      "objects",
      "updates",
      "apply",
      "customize",
      "permissions",
      "query",
      "longer",
      "visible",
      "determine",
      "source",
      "might",
      "notice",
      "frequency",
      "regular",
      "before",
      "interface",
      "error",
      "analytics",
      "following",
      "smaller",
      "change",
      "updated",
      "column",
      "answer",
      "because",
      "times",
      "about",
      "stops",
      "transformed",
      "disabling",
      "easiest",
      "selected",
      "websites",
      "other",
      "valuable",
      "growth",
      "customers",
      "arrived",
      "problems",
      "exceed",
      "statuses",
      "historical",
      "possible",
      "available",
      "setting",
      "documentation",
      "could",
      "owner",
      "through",
      "loaded",
      "managed",
      "disabled",
      "example",
      "feature",
      "loading",
      "preparation",
      "fixed",
      "which",
      "integrate",
      "specific",
      "credentials",
      "however",
      "using",
      "began",
      "accessible",
      "number",
      "sources",
      "property",
      "additional",
      "helps",
      "follow",
      "issue",
      "members",
      "tracked",
      "duplicates",
      "related",
      "request",
      "storage",
      "overview",
      "modified",
      "selective",
      "select",
      "product",
      "results",
      "slices",
      "delete",
      "steps",
      "segment",
      "warehouses",
      "information",
      "servers",
      "table",
      "different",
      "events",
      "include",
      "without",
      "loads",
      "improve",
      "data",
      "coming",
      "success",
      "synced",
      "errors",
      "message",
      "successful",
      "collections",
      "enabling",
      "contact",
      "syncing",
      "completely",
      "inline",
      "notices",
      "started",
      "common",
      "tables",
      "learn",
      "frequently",
      "destination",
      "hitting",
      "limit",
      "included",
      "single",
      "connect",
      "shown",
      "individual",
      "these",
      "reasons",
      "assistance",
      "every",
      "blocked",
      "recently",
      "attempts",
      "allowing",
      "intervals",
      "received_at",
      "choose",
      "would",
      "helpful",
      "warehouse",
      "constantly",
      "duration",
      "known",
      "twice",
      "happen",
      "destinations",
      "optional",
      "generally",
      "prevented",
      "looking",
      "account",
      "enable",
      "publicly",
      "settings",
      "length",
      "warnings",
      "instead",
      "history",
      "while",
      "syncs",
      "collection",
      "connection",
      "inserts",
      "their",
      "enabled",
      "impact",
      "completed",
      "sending",
      "omitted",
      "local",
      "seconds",
      "unnecessary",
      "created",
      "queries",
      "necessarily",
      "schedule",
      "reaching",
      "includes",
      "designed",
      "please",
      "making",
      "multiple",
      "manage",
      "support",
      "status",
      "cause",
      "workspace",
      "forward",
      "after",
      "since",
      "begin",
      "deselect",
      "allows",
      "member",
      "thanks",
      "failure",
      "again",
      "automatically",
      "timezone",
      "cluster",
      "mobile",
      "default",
      "successfully",
      "shows",
      "partial",
      "affects",
      "above",
      "indicate",
      "properties",
      "changes",
      "appear",
      "displayed",
      "found",
      "disable",
      "result",
      "schema",
      "connections",
      "determines",
      "prior",
      "doesn",
      "first",
      "questions",
      "going",
      "create",
      "frequent",
      "existing",
      "warning",
      "adjust",
      "adjusts",
      "feedback",
      "tools",
      "limits",
      "redshift",
      "start",
      "partially",
      "future",
      "owners",
      "business",
      "reached",
      "still",
      "control",
      "prevent",
      "backfill",
      "generated",
      "details"
    ],
    "howto_steps": [
      "Up to 24 times a day. Generally, these syncs are fixed to the top of the hour (:00), but these times can vary."
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#enable-selective-sync",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/storage/catalog/google-cloud-storage/",
    "title": " Google Cloud Storage Destination | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Storage / Catalog / Google Cloud Storage Destination Google Cloud Storage Destination On this page Getting Started Set up Service Account to give Segment access to upload to your Bucket Set up a Google Cloud Bucket for Segment to Copy Objects Configure Google Cloud Storage Destination Troubleshooting The Google Cloud Storage (GCS) destination puts the raw logs of the data Segment receives into your GCS bucket. The data is copied into your bucket at least every hour. You might see multiple files over a period of time depending on how much data is copied. The Google Cloud Storage destination works differently than other destinations in Segment. Segment sends all data from an Engage source to GCS during the sync process, not only the connected audiences and traits. Using a destinations selector like the integrations object doesn’t affect the events events sent to GCS. The Google Cloud Storage destination is in Public Beta, and doesn’t support product features such as deletions or surfacing errors in the UI. Getting Started Create a Service Account to allow Segment to copy files into the bucket Create a bucket in your preferred region. Set up Service Account to give Segment access to upload to your Bucket Go to http://cloud.google.com/iam Click VIEW CONSOLE . Select a project to which you would like to send Segment data In the sidebar, click Service Accounts Click CREATE SERVICE ACCOUNT . In the Name field, give your service account a name, for example, Segment Upload Objects . In the Description field, enter a description that will remind you the purpose of the role. For example, This role gives Segment access to upload raw data files to our bucket . Click CREATE . Click CONTINUE to skip adding Service Account Permissions. We will add permissions directly to the bucket instead. Click CREATE KEY . Select Key Type JSON Click CREATE to create the key. A key downloads to your computer. You’ll use this key when creating the Segment Google Cloud Storage Destination. Keep it in a safe place. Click on DONE to finish creating your Service Account Set up a Google Cloud Bucket for Segment to Copy Objects To receive raw data files from Segment, you must first provide a Google Cloud Storage bucket that can store the raw data files: Go to https://cloud.google.com/storage Click GO TO CONSOLE . Select a project. Click CREATE BUCKET . In the Name field, enter a name for your bucket.\nAny name will work here, but we recommend that include the word “segment”, for example: my-segment-data . In the Storage Class field, we recommend Multi-Regional In the Access Control field, choose Set object-level and bucket-level permissions No Advanced Options are necessary. Click Create to finish creating the bucket. Click the tab PERMISSIONS to show bucket permissions Click ADD MEMBERS In the NEW MEMBERS text input, enter the email address associated with the Service Account we created. Click SELECT A ROLE .\nSelect the STORAGE OBJECT ADMIN role. This gives the Service Account read/write access to objects in this bucket only . We require Object Admin access in order to overwrite existing files. Overwriting is required when running replays or in cases of failure handling. Click SAVE . Congratulations! You now have a bucket ready to accept Segment data. Configure Google Cloud Storage Destination Once the Google Cloud Storage Bucket and Service Account are created, a destination that will send data files to the bucket must be configured: In the Segment Destinations section, click Add Destination .\nYou will be redirected to the Catalog . Search for “Google Cloud Storage”, and click the destination in the catalog. Click Configure Google Cloud Storage . Select the source you want to send to this destination. Enter the values for the settings below: Bucket : The name of the bucket you created on the Google Cloud Storage Console. GCS Credentials : Copy and paste the contents of the credentials (Private Key) file that downloaded to your computer when you created the Google Cloud Service Account. This grants access so Segment can upload raw data files to your bucket Click on the toggle to enable your Destination. Congratulations! You’ve set up a GCS destination. You’ll receive files in your Bucket in 60 minutes, assuming the Segment Source is regularly producing events. Troubleshooting Why is data not syncing to the GCS destination? Common errors which can cause sync failures are: Bucket not configured : A bucket for the GCS destination was not provided. Check the GCS destination settings to confirm that a valid bucket is entered. GCS credentials not configured : Credentials for the GCS destination cannot be found. Confirm that you’ve inputted GCS credentials into the destination settings. Invalid GCS credentials : Credentials for the GCS destination are found, but they are not correctly formatted credentials. Re-enter a valid credential as a setting for the destination to work. Unable to upload files : Segment can’t upload files to GCS due to incorrect credentials (for example, a non-existent bucket), insufficient permissions, or a GCS error. Confirm that credentials and permissions are set correctly. Destination not found : There is no GCS destination connected to the source, and can be connected within the workspace overview page. Destination disabled : The GCS destination for the source is disabled, and can be enabled in the destination settings page. This page was last modified: 08 Aug 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting Started Set up Service Account to give Segment access to upload to your Bucket Set up a Google Cloud Bucket for Segment to Copy Objects Configure Google Cloud Storage Destination Troubleshooting Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "connected",
      "directly",
      "access",
      "click",
      "correctly",
      "objects",
      "differently",
      "regularly",
      "visit",
      "traits",
      "permissions",
      "multi",
      "check",
      "troubleshooting",
      "affect",
      "features",
      "upload",
      "incorrect",
      "source",
      "might",
      "order",
      "configured",
      "error",
      "configure",
      "copied",
      "existent",
      "failures",
      "analytics",
      "section",
      "there",
      "project",
      "change",
      "cloud",
      "necessary",
      "entered",
      "congratulations",
      "integrations",
      "easiest",
      "options",
      "other",
      "accounts",
      "growth",
      "problems",
      "associated",
      "require",
      "setting",
      "purpose",
      "recommend",
      "search",
      "admin",
      "documentation",
      "within",
      "provide",
      "valid",
      "contents",
      "disabled",
      "example",
      "ready",
      "inputted",
      "which",
      "integrate",
      "using",
      "catalog",
      "credentials",
      "websites",
      "improve",
      "sidebar",
      "region",
      "request",
      "process",
      "members",
      "storage",
      "overview",
      "modified",
      "select",
      "product",
      "below",
      "invalid",
      "sends",
      "unable",
      "downloads",
      "segment",
      "remind",
      "replays",
      "least",
      "events",
      "include",
      "confirm",
      "store",
      "handling",
      "receive",
      "data",
      "errors",
      "service",
      "input",
      "contact",
      "syncing",
      "common",
      "overwrite",
      "console",
      "cannot",
      "destination",
      "finish",
      "allow",
      "formatted",
      "these",
      "address",
      "private",
      "every",
      "assistance",
      "started",
      "choose",
      "would",
      "helpful",
      "selector",
      "destinations",
      "account",
      "gives",
      "creating",
      "settings",
      "enable",
      "computer",
      "instead",
      "regional",
      "email",
      "cases",
      "object",
      "deletions",
      "description",
      "values",
      "provided",
      "files",
      "enabled",
      "depending",
      "place",
      "toggle",
      "created",
      "receives",
      "works",
      "field",
      "credential",
      "accept",
      "running",
      "during",
      "support",
      "multiple",
      "redirected",
      "insufficient",
      "period",
      "cause",
      "class",
      "public",
      "workspace",
      "preferred",
      "assuming",
      "https",
      "thanks",
      "google",
      "failure",
      "mobile",
      "continue",
      "required",
      "minutes",
      "downloaded",
      "engage",
      "adding",
      "level",
      "bucket",
      "overwriting",
      "advanced",
      "surfacing",
      "found",
      "first",
      "connections",
      "doesn",
      "create",
      "questions",
      "existing",
      "feedback",
      "tools",
      "enter",
      "write",
      "producing",
      "control",
      "grants",
      "paste",
      "audiences"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#sync-frequency",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#set-up-service-account-to-give-segment-access-to-upload-to-your-bucket",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/spec/common/#integrations",
    "title": " Spec: Common Fields | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Spec / Spec: Common Fields Spec: Common Fields On this page Structure Context Context fields automatically collected Integrations Timestamps FAQ In the Segment Spec all the API calls have a common structure, and a few common fields. However, not all destinations accept all fields included in the Spec. Not sure which fields a destination accepts? Refer to the destination’s documentation page, or check out the open-source destination code on GitHub . Segment University: The Segment Methods Check out our high-level overview of these APIs in Segment University. (Must be logged in to access.) Structure Every API call has the same core structure and fields. These fields describe user identity, timestamping, and mechanical aides like API version. Here’s an example of these common fields in raw JSON: { \"anonymousId\" : \"507f191e810c19729de860ea\" , \"context\" : { \"active\" : true , \"app\" : { \"name\" : \"InitechGlobal\" , \"version\" : \"545\" , \"build\" : \"3.0.1.545\" , \"namespace\" : \"com.production.segment\" }, \"campaign\" : { \"name\" : \"TPS Innovation Newsletter\" , \"source\" : \"Newsletter\" , \"medium\" : \"email\" , \"term\" : \"tps reports\" , \"content\" : \"image link\" }, \"device\" : { \"id\" : \"B5372DB0-C21E-11E4-8DFC-AA07A5B093DB\" , \"advertisingId\" : \"7A3CBEA0-BDF5-11E4-8DFC-AA07A5B093DB\" , \"adTrackingEnabled\" : true , \"manufacturer\" : \"Apple\" , \"model\" : \"iPhone7,2\" , \"name\" : \"maguro\" , \"type\" : \"ios\" , \"token\" : \"ff15bc0c20c4aa6cd50854ff165fd265c838e5405bfeb9571066395b8c9da449\" }, \"ip\" : \"8.8.8.8\" , \"library\" : { \"name\" : \"analytics.js\" , \"version\" : \"2.11.1\" }, \"locale\" : \"en-US\" , \"network\" : { \"bluetooth\" : false , \"carrier\" : \"T-Mobile US\" , \"cellular\" : true , \"wifi\" : false }, \"os\" : { \"name\" : \"iPhone OS\" , \"version\" : \"8.1.3\" }, \"page\" : { \"path\" : \"/academy/\" , \"referrer\" : \"\" , \"search\" : \"\" , \"title\" : \"Analytics Academy\" , \"url\" : \"https://segment.com/academy/\" }, \"referrer\" : { \"id\" : \"ABCD582CDEFFFF01919\" , \"type\" : \"dataxu\" }, \"screen\" : { \"width\" : 320 , \"height\" : 568 , \"density\" : 2 }, \"groupId\" : \"12345\" , \"timezone\" : \"Europe/Amsterdam\" , \"userAgent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36\" , \"userAgentData\" : { \"brands\" : [ { \"brand\" : \"Google Chrome\" , \"version\" : \"113\" }, { \"brand\" : \"Chromium\" , \"version\" : \"113\" }, { \"brand\" : \"Not-A.Brand\" , \"version\" : \"24\" } ], \"mobile\" : false , \"platform\" : \"macOS\" } }, \"integrations\" : { \"All\" : true , \"Mixpanel\" : false , \"Salesforce\" : false }, \"event\" : \"Report Submitted\" , \"messageId\" : \"022bb90c-bbac-11e4-8dfc-aa07a5b093db\" , \"receivedAt\" : \"2015-12-10T04:08:31.909Z\" , \"sentAt\" : \"2015-12-10T04:08:31.581Z\" , \"timestamp\" : \"2015-12-10T04:08:31.905Z\" , \"type\" : \"track\" , \"userId\" : \"97980cfea0067\" , \"version\" : 2 } In more detail these common fields for every API call are: Field Type Description anonymousId required; optional if userID is set instead String A pseudo-unique substitute for a User ID, for cases when you don’t have an absolutely unique identifier. A userId or an anonymousId is required.\n\n  See the Identities docs for more details. context optional Object Dictionary of extra information that provides useful context about a message, but is not directly related to the API call like ip address or locale See the Context field docs for more details. integrations optional Object Dictionary of destinations to either enable or disable\n\n  See the Destinations field docs for more details. messageId implicit String Automatically collected by Segment, a unique identifier for each message that lets you find an individual message across the API. This field is limited to 100 characters. receivedAt implicit Date Automatically set by Segment, the timestamp of when a message is received by Segment\n\n  It is an ISO-8601 date string.  See the Timestamps fields docs for more detail. sentAt optional Date Timestamp of when a message is sent to Segment, used for clock skew correction\n\n    It is set automatically by the Segment tracking libraries. It is an ISO-8601 date string. See the Timestamps fields docs for more detail. timestamp optional Date Timestamp when the message itself took place, defaulted to the current time by the Segment Tracking API, as a ISO-8601 format date string.\n\n  If the event just happened, leave it out and we’ll use the server’s time. If you’re importing data from the past, make sure you to provide a timestamp .See the Timestamps fields docs for more detail. type implicit String Type of message, corresponding to the API method: 'identify' , 'group' , 'track' , 'page' , 'screen' or 'alias' . userId required; optional if anonymousID is set instead String Unique identifier for the user in your database.\n\n  A userId or an anonymousId is required.\n\n  See the Identities docs for more details. version implicit Number Version of the Tracking API that received the message, automatically set by Segment. Beyond this common structure, each API call adds a few specialized top-level fields. Context Context is a dictionary of extra information that provides useful context about a datapoint, for example the user’s ip address or locale . You should only use Context fields for their intended meaning. Field Type Description active Boolean Whether a user is active. This is usually used to flag an .identify() call to just update the traits but not “last seen.” app Object dictionary of information about the current application, containing name , version , and build . This is collected automatically from the mobile libraries when possible. campaign Object Dictionary of information about the campaign that resulted in the API call, containing name , source , medium , term , content , and any other custom UTM parameter. This maps directly to the common UTM campaign parameters. device Object Dictionary of information about the device, containing id , advertisingId , manufacturer , model , name , type , and version . Note: If you collect information about iOS devices, note that the model value set by Apple might not exactly correspond to an iPhone model number. For example, an iPhone 15 Pro Max has a model value of iPhone16,2 . ip String Current user’s IP address. library Object Dictionary of information about the library making the requests to the API, containing name and version . locale String Locale string for the current user, for example en-US . network Object Dictionary of information about the current network connection, containing bluetooth , carrier , cellular , and wifi . If the context.network.cellular and context.network.wifi fields are empty, then the user is offline. os Object Dictionary of information about the operating system, containing name and version . page Object Dictionary of information about the current page in the browser, containing path , referrer , search , title and url . This is automatically collected by Analytics.js . referrer Object Dictionary of information about the way the user was referred to the website or app, containing type , name , url , and link . screen Object Dictionary of information about the device’s screen, containing density , height , and width . timezone String Timezones are sent as tzdata strings to add user timezone information which might be stripped from the timestamp, for example America/New_York . groupId String Group / Account ID. This is useful in B2B use cases where you need to attribute your non-group calls to a company or account. It is relied on by several Customer Success and CRM tools. traits Object Dictionary of traits of the current user. This is useful in cases where you need to track an event, but also associate information from a previous Identify call. You should fill this object the same way you would fill traits in an identify call . userAgent String User agent of the device making the request. userAgentData Object The user agent data of the device making the request. This always contains brands , mobile , platform , and may contain bitness , model , platformVersion , uaFullVersion , fullVersionList , wow64 , if requested and available. This populates if the Client Hints API is available on the browser. This may contain more information than is available in the userAgent in some cases. channel String where the request originated from: server, browser or mobile Context fields automatically collected Below is a chart that shows you which context variables are populated automatically by the iOS, Android, and analytics.js libraries. Other libraries only collect context.library , any other context variables must be sent manually. Context Field Analytics.js Analytics-ios Analytics-android app.name ✅ ✅ app.version ✅ ✅ app.build ✅ ✅ campaign.name ✅ campaign.source ✅ campaign.medium ✅ campaign.term ✅ campaign.content ✅ device.type ✅ ✅ device.id ✅ ✅ device.advertisingId ✅ ✅ device.adTrackingEnabled ✅ ✅ device.manufacturer ✅ ✅ device.model ✅ ✅ device.name ✅ ✅ library.name ✅ ✅ ✅ library.version ✅ ✅ ✅ ip* ✅ ✅ ✅ locale ✅ ✅ ✅ network.bluetooth ✅ network.carrier ✅ ✅ network.cellular ✅ ✅ network.wifi ✅ ✅ os.name ✅ ✅ os.version ✅ ✅ page.path ✅ page.referrer ✅ page.search ✅ page.title ✅ page.url ✅ screen.density ✅ screen.height ✅ ✅ screen.width ✅ ✅ traits ✅ ✅ userAgent ✅ ✅ userAgentData* ✅ timezone ✅ ✅ ✅ IP Address isn’t collected by Segment’s libraries, but is instead filled in by Segment’s servers when it receives a message for client side events only . IPv6 Segment doesn’t support automatically collecting IPv6 addresses. The Android library collects screen.density with this method . userAgentData is only collected if the Client Hints API is available on the browser. Segment doesn’t collect or append to the context of subsequent calls in the new mobile libraries (Swift, Kotlin, and React Native). To pass the context variables which are not automatically collected by Segment’s libraries, you must manually include them in the event payload. The following code shows how to pass groupId as the context field of Analytics.js’s .track() event: analytics . track ( \" Report Submitted \" , {}, { context : { groupId : \" 1234 \" } }); To add fields to the context object in the new mobile libraries, you must utilize a custom plugin. Documentation for creating plugins for each library can be found here: React Native Swift Kotlin Integrations A dictionary of destination names that the message should be sent to. 'All' is a special key that applies when no key for a specific destination is found. Integrations defaults to the following: { All : true , Salesforce : false , } This is because Salesforce has strict limits on API calls. Sending data to the rest of Segment’s destinations is opt-out so if you don’t specify the destination as false in this object, it will be sent to rest of the destinations that can accept it. Timestamps Every API call has four timestamps, originalTimestamp , timestamp , sentAt , and receivedAt. They’re used for very different purposes. All timestamps are ISO-8601 date strings, and are in the UTC timezone. To see the user’s timezone information, check the timezone field that’s automatically collected by client-side libraries . You must use ISO-8601 date strings that include timezones when you use timestamps with Engage . If you send custom traits without a timezone, Segment doesn’t save the timestamp value. Timestamp overview Timestamp Calculated Description originalTimestamp Time on the client device when call was invoked OR The timestamp value manually passed in through server-side libraries. Used by Segment to calculate timestamp . Note: originalTimestamp is not useful for analysis since it’s not always trustworthy as it can be easily adjusted and affected by clock skew. sentAt Time on client device when call was sent. OR sentAt value manually passed in. Used by Segment to calculate timestamp . Note: sentAt is not useful for analysis since it’s not always trustworthy as it can be easily adjusted and affected by clock skew. receivedAt Time on Segment server clock when call was received Used by Segment to calculate timestamp , and used as sort key in Warehouses. Note: For max query speed, receivedAt is the recommended timestamp for analysis when chronology does not matter as chronology is not ensured. timestamp Calculated by Segment to correct client-device clock skew using the following formula: receivedAt - ( sentAt - originalTimestamp ) Used by Segment to send to downstream destinations, and used for historical replays. Note: Recommended timestamp for analysis when chronology does matter. originalTimestamp The originalTimestamp tells you when call was invoked on the client device or the value of timestamp that you manually passed in. Note: The originalTimestamp timestamp is not useful for any analysis since it’s not always trustworthy as it can be easily adjusted and affected by clock skew. sentAt The sentAt timestamp specifies the clock time for the client’s device when the network request was made to the Segment API. For libraries and systems that send batched requests, there can be a long gap between a datapoint’s timestamp and sentAt . Combined with receivedAt , Segment uses sentAt to correct the original timestamp in situations where a user’s device clock cannot be trusted (mobile phones and browsers). The sentAt and receivedAt timestamps are assumed to occur at the same time (maximum a few hundred milliseconds), and therefore the difference is the user’s device clock skew, which can be applied back to correct the timestamp . Note: The sentAt timestamp is not useful for any analysis since it’s tainted by user’s clock skew. Segment now adds `sentAt` to a payload when the batch is complete and initially tried to the Segment API for the Swift, Kotlin, and C# mobile libraries This update changes the value of the Segment-calculated timestamp to align closer with the receivedAt value rather than the originalTimestamp value. For most users who are online when events are sent, this does not significantly impact their data. However, if your application utilizes an offline mode where events are queued up for any period of time, the timestamp value for those users now more closely reflects when Segment received the events rather than the time they occurred on the users’ devices. receivedAt The receivedAt timestamp is added to incoming messages as soon as they hit the API. It’s used in combination with sentAt to correct clock skew, and also to aid with debugging libraries and systems that deliver events in batches. The receivedAt timestamp is most important as the sort key in Segment’s Warehouses product. Use this for max query speed when retrieving data from your Warehouse. Note: Chronological order of events is not ensured with receivedAt . timestamp The timestamp timestamp specifies when the data point occurred, corrected for client-device clock skew. This is the timestamp that is passed to downstream destinations and used for historical replays. It is important to use this timestamp for importing historical data to the API. If you are using the Segment server Source libraries, or passing calls directly to the HTTP API endpoint, you can manually set the timestamp field. This change updates the originalTimestamp field of the Segment event. If you use a Segment Source in device mode, the library generates timestamp and you cannot manually set one directly in the call payload. Segment calculates timestamp as timestamp = receivedAt - (sentAt - originalTimeStamp) . For client-side tracking it’s possible for the client to spoof the originalTimeStamp , which may result in a calculated timestamp value set in the future. FAQ Why Are Events Received with Timestamps Set in the Past or Future? If you’re using one of Segment’s client-side libraries, please note that several factors can cause timestamp discrepancies in your event data. Overriding Timestamp Value: When a manual timestamp is set in the payload with a date in the past, it can cause events to appear as if they were sent earlier than they actually were. Analytics.js Source with Retries Enabled: The Retries feature supports offline traffic by queuing events in Analytics.js. These events are sent or retried later when an internet connection is available, keeping the original timestamp intact. Mobile App Backgrounded or Closed: If a user closes the app, events may be queued within the app. These queued events won’t be sent until the app is re-opened, potentially in the future, leading to timestamp discrepancies. Inaccurate Browser/Device Clock Settings: Timestamps can be incorrect if the client’s device time is inaccurate, as the originalTimestamp relies on the client device’s clock, which can be manually adjusted. Traffic from Internet Bots: Internet Bots can sometimes send requests with unusual timestamps, either intentionally or due to incorrect settings, leading to discrepancies. This page was last modified: 30 Oct 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Structure Context Context fields automatically collected Integrations Timestamps FAQ Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "model",
      "website",
      "group",
      "retrieving",
      "applied",
      "significantly",
      "meaning",
      "custom",
      "source",
      "database",
      "keeping",
      "filled",
      "pseudo",
      "ff15bc0c20c4aa6cd50854ff165fd265c838e5405bfeb9571066395b8c9da449",
      "title",
      "507f191e810c19729de860ea",
      "easiest",
      "closes",
      "identity",
      "adjusted",
      "absolutely",
      "between",
      "closed",
      "sometimes",
      "fullversionlist",
      "closer",
      "until",
      "adtrackingenabled",
      "historical",
      "documentation",
      "server",
      "timezones",
      "originaltimestamp",
      "calculate",
      "iphone7",
      "new_york",
      "which",
      "improve",
      "specifies",
      "alias",
      "correct",
      "sentat",
      "happened",
      "warehouses",
      "contains",
      "macos",
      "spoof",
      "subsequent",
      "platformversion",
      "include",
      "potentially",
      "7a3cbea0",
      "intended",
      "maguro",
      "content",
      "collects",
      "backgrounded",
      "cannot",
      "useragent",
      "submitted",
      "channel",
      "carrier",
      "individual",
      "correction",
      "every",
      "helpful",
      "collected",
      "warehouse",
      "where",
      "destinations",
      "swift",
      "substitute",
      "creating",
      "batched",
      "email",
      "khtml",
      "online",
      "locale",
      "batches",
      "ensured",
      "trusted",
      "receives",
      "field",
      "calculates",
      "making",
      "cause",
      "track",
      "context",
      "chart",
      "automatically",
      "format",
      "incoming",
      "should",
      "appear",
      "disable",
      "10t04",
      "newsletter",
      "create",
      "mixpanel",
      "clock",
      "apple",
      "value",
      "feedback",
      "corresponding",
      "queued",
      "limits",
      "event",
      "datapoint",
      "assumed",
      "actually",
      "calculated",
      "directly",
      "iphone",
      "traits",
      "specify",
      "provides",
      "query",
      "situations",
      "might",
      "names",
      "analytics",
      "change",
      "customer",
      "useful",
      "97980cfea0067",
      "false",
      "react",
      "bluetooth",
      "accepts",
      "system",
      "mozilla",
      "passing",
      "contain",
      "populated",
      "iphone16",
      "intel",
      "application",
      "provide",
      "traffic",
      "recommended",
      "integrate",
      "screen",
      "using",
      "websites",
      "wow64",
      "europe",
      "related",
      "modified",
      "combination",
      "purposes",
      "utilizes",
      "information",
      "servers",
      "browsers",
      "added",
      "referrer",
      "associate",
      "medium",
      "data",
      "applies",
      "empty",
      "libraries",
      "later",
      "timestamps",
      "common",
      "github",
      "string",
      "complete",
      "token",
      "12345",
      "assistance",
      "matter",
      "difference",
      "network",
      "build",
      "account",
      "endpoint",
      "object",
      "tried",
      "overriding",
      "implicit",
      "extra",
      "america",
      "brand",
      "method",
      "usually",
      "place",
      "initechglobal",
      "invoked",
      "refer",
      "please",
      "trustworthy",
      "period",
      "identify",
      "containing",
      "since",
      "aides",
      "timezone",
      "required",
      "defaulted",
      "academy",
      "logged",
      "either",
      "leading",
      "aa07a5b093db",
      "level",
      "retried",
      "across",
      "api",
      "kotlin",
      "parameter",
      "tools",
      "manually",
      "innovation",
      "analysis",
      "supports",
      "addresses",
      "uafullversion",
      "applewebkit",
      "visit",
      "strict",
      "reports",
      "order",
      "methods",
      "leave",
      "messageid",
      "identifier",
      "following",
      "there",
      "milliseconds",
      "exactly",
      "about",
      "integrations",
      "problems",
      "agent",
      "hints",
      "possible",
      "correspond",
      "within",
      "variables",
      "rather",
      "affected",
      "feature",
      "speed",
      "initially",
      "tzdata",
      "number",
      "however",
      "gecko",
      "specific",
      "tainted",
      "macintosh",
      "messages",
      "product",
      "below",
      "different",
      "replays",
      "batch",
      "events",
      "relies",
      "without",
      "platform",
      "populates",
      "native",
      "message",
      "itself",
      "receivedat",
      "therefore",
      "android",
      "update",
      "phones",
      "earlier",
      "formula",
      "destination",
      "importing",
      "included",
      "append",
      "factors",
      "whether",
      "originated",
      "width",
      "attribute",
      "address",
      "bitness",
      "browser",
      "would",
      "detail",
      "downstream",
      "optional",
      "point",
      "intact",
      "timestamp",
      "operating",
      "enable",
      "connection",
      "chronological",
      "density",
      "company",
      "beyond",
      "debugging",
      "enabled",
      "sending",
      "mechanical",
      "device",
      "internet",
      "accept",
      "special",
      "unique",
      "dataxu",
      "salesforce",
      "https",
      "manual",
      "google",
      "thanks",
      "anonymousid",
      "amsterdam",
      "mobile",
      "chronology",
      "retries",
      "align",
      "engage",
      "changes",
      "intentionally",
      "result",
      "doesn",
      "stripped",
      "brands",
      "utilize",
      "manufacturer",
      "userid",
      "referred",
      "offline",
      "received",
      "access",
      "updates",
      "10_15_7",
      "specialized",
      "check",
      "plugin",
      "incorrect",
      "fields",
      "chrome",
      "boolean",
      "because",
      "opened",
      "other",
      "library",
      "growth",
      "limited",
      "defaults",
      "previous",
      "generates",
      "devices",
      "available",
      "search",
      "campaign",
      "systems",
      "client",
      "through",
      "example",
      "unusual",
      "resulted",
      "request",
      "requests",
      "overview",
      "segment",
      "groupid",
      "combined",
      "b5372db0",
      "advertisingid",
      "success",
      "timestamping",
      "maximum",
      "contact",
      "hundred",
      "corrected",
      "report",
      "identities",
      "important",
      "payload",
      "structure",
      "university",
      "describe",
      "those",
      "current",
      "these",
      "chromium",
      "occur",
      "occurred",
      "started",
      "namespace",
      "settings",
      "useragentdata",
      "instead",
      "cases",
      "original",
      "always",
      "reflects",
      "description",
      "calls",
      "their",
      "passed",
      "impact",
      "discrepancies",
      "strings",
      "characters",
      "image",
      "version",
      "collecting",
      "support",
      "dictionary",
      "plugins",
      "tracking",
      "shows",
      "safari",
      "active",
      "abcd582cdeffff01919",
      "deliver",
      "requested",
      "inaccurate",
      "found",
      "connections",
      "cellular",
      "relied",
      "tells",
      "closely",
      "questions",
      "easily",
      "height",
      "parameters",
      "collect",
      "users",
      "several",
      "future",
      "queuing",
      "production",
      "022bb90c",
      "details"
    ],
    "howto_steps": [
      "✅ ✅ ✅ locale ✅ ✅ ✅ network.bluetooth ✅ network.carrier ✅ ✅ network.cellular ✅ ✅ network.wifi ✅ ✅ os.name ✅ ✅ os.version ✅ ✅ page.path ✅ page.referrer ✅ page.search ✅ page.title ✅ page.url ✅ screen.density ✅ screen.height ✅ ✅ screen.width ✅ ✅ traits ✅ ✅ userAgent ✅ ✅ userAgentData",
      "✅ timezone ✅ ✅ ✅ IP Address isn’t collected by Segment’s libraries, but is instead filled in by Segment’s servers when it receives a message for client side events only . IPv6 Segment doesn’t support automatically collecting IPv6 addresses. The Android library collects screen.density with this method . userAgentData is only collected if the Client Hints API is available on the browser. Segment doesn’t collect or append to the context of subsequent calls in the new mobile libraries (Swift, Kotlin, and React Native). To pass the context variables which are not automatically collected by Segment’s libraries, you must manually include them in the event payload. The following code shows how to pass groupId as the context field of Analytics.js’s .track() event: analytics . track ( \" Report Submitted \" , {}, { context : { groupId : \" 1234 \" } }); To add fields to the context object in the new mobile libraries, you must utilize a custom plugin. Documentation for creating plugins for each library can be found here: React Native Swift Kotlin Integrations A dictionary of destination names that the message should be sent to. 'All' is a special key that applies when no key for a specific destination is found. Integrations defaults to the following: { All : true , Salesforce : false , } This is because Salesforce has strict limits on API calls. Sending data to the rest of Segment’s destinations is opt",
      "( sentAt",
      "originalTimestamp ) Used by Segment to send to downstream destinations, and used for historical replays. Note: Recommended timestamp for analysis when chronology does matter. originalTimestamp The originalTimestamp tells you when call was invoked on the client device or the value of timestamp that you manually passed in. Note: The originalTimestamp timestamp is not useful for any analysis since it’s not always trustworthy as it can be easily adjusted and affected by clock skew. sentAt The sentAt timestamp specifies the clock time for the client’s device when the network request was made to the Segment API. For libraries and systems that send batched requests, there can be a long gap between a datapoint’s timestamp and sentAt . Combined with receivedAt , Segment uses sentAt to correct the original timestamp in situations where a user’s device clock cannot be trusted (mobile phones and browsers). The sentAt and receivedAt timestamps are assumed to occur at the same time (maximum a few hundred milliseconds), and therefore the difference is the user’s device clock skew, which can be applied back to correct the timestamp . Note: The sentAt timestamp is not useful for any analysis since it’s tainted by user’s clock skew. Segment now adds `sentAt` to a payload when the batch is complete and initially tried to the Segment API for the Swift, Kotlin, and C# mobile libraries This update changes the value of the Segment",
      "(sentAt",
      "originalTimeStamp) . For client"
    ],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#retries",
    "title": " Analytics.js Source | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Libraries / Website / Analytics.js Source Analytics.js Source Community x Maintenance x Flagship ✓ ? Flagship libraries offer the most up-to-date functionality on Segment’s most popular platforms. Segment actively maintains flagship libraries, which benefit from new feature releases and ongoing development and support. On this page Getting started Benefits of Analytics.js Basic tracking methods Utility methods Managing data flow with the Integrations object Retries Batching Plugins and source middleware Video player plugins Cross-subdomain analytics UTM Tracking Analytics.js performance Tracking Blockers and Browser Privacy Settings Installing the library under a custom global namespace Add destinations from npm Segment Inspector Example uses External dependencies Analytics.js enables you to send your data to hundreds of destination tools without having to learn, test, or use a new API every time. Segment’s Analytics.js library is fully open-source and can be viewed on GitHub . Getting started Use the Analytics.js QuickStart Guide to learn how to add Analytics.js to your site. Once you’ve installed the library, read on for the detailed API reference. Benefits of Analytics.js Analytics.js provides two key benefits over the previous version. Performance Analytics.js reduces page load time and improves site performance. Its package size is ~70% smaller than its predecessor, the classic version of Analytics.js. Many factors impact page load time, including network conditions, hosting locations, and page weight. Page weight for each customer integration varies based on the number of device-mode destinations that are enabled for each source. The more device-mode destinations that are enabled, the more data gets added to the library, which will impact the weight of the library. Developer experience Analytics.js improves developer experience by introducing new ways for developers to augment events throughout the event timeline. For example, developers can augment events either before or after an event occurs, or while the event is in-flight. For example, you can use Analytics.js to build features that: Ensure you have user consent to track before an event fires Enrich events with customer or page context while in-flight with middleware Check an event for errors after the event is sent to Segment Basic tracking methods The basic tracking methods below serve as the building blocks of your Segment tracking. They include Identify , Track , Page , Group , and Alias . These methods correspond with those used in the Segment Spec . The documentation on this page explains how to use these methods in Analytics.js. Good to know For any of the methods described in this page, you can replace the properties in the code samples with variables that represent the data collected. Identify Use the identify method to link your users and their actions, to a recognizable userId and traits . You can see an identify example in the Quickstart guide or find details on the identify method payload . `identify` and anonymous visitors Segment recommends against using identify for anonymous visitors to your site. Analytics.js automatically retrieves an anonymousId from localStorage or assigns one for new visitors, and then attaches it to all page and track events both before and after an identify . The Identify method follows the format below: analytics . identify ([ userId ], [ traits ], [ options ], [ callback ]); The Identify call has the following fields: Field Type Description userId optional String The database ID for the user. If you don’t know who the user is yet, you can omit the userId and just record traits . You can read more about identities in the identify reference . traits optional Object A dictionary of traits you know about the user, like email or name . You can read more about traits in the identify reference . options optional Object A dictionary of options. For example, enable or disable specific destinations for the call. Note: If you do not pass a traits object, pass an empty object (as an ‘{}’) before options . callback optional Function A function executed after a timeout of 300 ms, giving the browser time to make outbound requests first. By default, Analytics.js caches traits in the browser’s localStorage and attaches them to each Identify call. For example, you might call Identify when someone signs up for a newsletter but hasn’t yet created an account on your site. The example below shows an Identify call (using hard-coded traits) that you might send in this case. analytics . identify ({ nickname : ' Amazing Grace ' , favoriteCompiler : ' A-0 ' , industry : ' Computer Science ' }); Then, when the user completes the sign up process, you might see the following: analytics . identify ( ' 12091906-01011992 ' , { name : ' Grace Hopper ' , email : ' grace@usnavy.gov ' }); The traits object for the second call also includes nickname , favoriteCompiler , and industry . You may omit both traits and options, and pass the callback as the second argument. analytics . identify ( ' 12091906-01011992 ' , function (){ // Do something after the identify request has been sent // Note: site-critical functionality should not depend on your analytics provider }); Track The Track method lets you record actions your users perform. You can see a track example in the Quickstart guide or find details on the track method payload . The Track method follows the format below: analytics . track ( event , [ properties ], [ options ], [ callback ]); The track call has the following fields: Field Type Description event String The name of the event you’re tracking. You can read more about the track method and recommended event names. properties Object Optional. A dictionary of properties for the event. If the event was 'Added to Cart' , it might have properties like price and productType . options Object Optional. A dictionary of options. For example, enable or disable specific destinations for the call. Note: If you do not pass a properties object, pass an empty object (like ‘{}’) before options . callback Function Optional. A function that runs after a timeout of 300 ms, giving the browser time to make outbound requests first. The only required argument in Analytics.js is an event name string . You can read more about how Segment recommends you name events . Example Track call: analytics . track ( ' Article Completed ' , { title : ' How to Create a Tracking Plan ' , course : ' Intro to Analytics ' , }); For more information about choosing which events to track, event naming, and more, check out Analytics Academy . The only required argument on Track calls in Analytics.js is an event name string. Read more about how Segment recommends naming your events . Track link trackLink is a helper method that attaches the track call as a handler to a link.\nWith trackLink , Analytics.js inserts a timeout of 300 ms to give the track call more time. This is useful when a page would redirect before the track method could complete all requests. The trackLink method follows the format below. analytics . trackLink ( element , event , [ properties ]) Field Type Description element(s) Element or Array DOM element to bind with track method. You may pass an array of elements or jQuery objects. Note: This must be an element, not a CSS selector. event String or Function The name of the event, passed to the track method. Or a function that returns a string to use as the name of the track event. properties optional Object or Function A dictionary of properties to pass with the track method or a function that returns an object to use as the properties of the event. Example: var link = document . getElementById ( ' free-trial-link ' ); analytics . trackLink ( link , ' Clicked Free-Trial Link ' , { plan : ' Enterprise ' }); Track form trackForm is a helper method that binds a track call to a form submission.\nThe trackForm method inserts a timeout of 300 ms to give the track call more time to complete. This is useful to prevent a page from redirecting before the track method could complete all requests. The trackForm method follows the format below. analytics . trackForm ( form , event , [ properties ]) Field Type Description form(s) Element or Array The form element to track or an array of form elements or jQuery objects. Note: trackForm takes an element, not a CSS selector. Segment recommends that you wait until the DOM loads before passing the form element. event String or Function The name of the event, passed to the track method. Or a function that returns a string to use as the name of the track event. properties optional Object or Function A dictionary of properties to pass with the track method. Or a function that returns an object to use as the properties of the event. Example: var form = document . getElementById ( ' signup-form ' ); analytics . trackForm ( form , ' Signed Up ' , { plan : ' Premium ' , revenue : 99.00 }); Page The Page method lets you record page views on your website, along with optional extra information about the page viewed by the user. Because some Destinations require a page call to instantiate their libraries, you must call page at least once per page load. You can call it more than once if needed, for example, on virtual page changes in a single page app. See the implementation guide for more information about calling the Page method . Analytics.js includes a Page call by default as the final line in the Analytics.js snippet . You can update this page call within the guidelines below. The page method follows the format below. analytics . page ([ category ], [ name ], [ properties ], [ options ], [ callback ]); The page call has the following fields: Field Type Description category optional String The category of the page. Useful for cases like ecommerce where many pages might live under a single category. Note: if you pass only one string to page it is assumed to be name . You must include a name to send a category . name optional String The name of the page. properties optional Object A dictionary of properties of the page. Note: Analytics.js collects url , title , referrer and path are automatically. This defaults to a canonical url , if available, and falls back to document.location.href . options optional Object A dictionary of options. For example, enable or disable specific destinations for the call. Note: If you do not pass a properties object, pass an empty object (like ‘{}’) before options . callback optional Function A function that runs after a timeout of 300 ms, giving the browser time to make outbound requests first. However, this function might not execute if one of the device-mode libraries has been blocked from loading. Default page properties Analytics.js adds properties to each page call. analytics . page ( ' Pricing ' ); Segment adds the following information: analytics . page ( ' Pricing ' , { title : ' Segment Pricing ' , url : ' https://segment.com/pricing ' , path : ' /pricing ' , referrer : ' https://segment.com/warehouses ' }); You can override these values by explicitly setting them in your calls. For example: analytics . page ( ' Pricing ' , { title : ' My Overridden Title ' , path : ' /pricing/view ' }); Translates to: analytics . page ( ' Pricing ' , { title : ' My Overridden Title ' , url : ' https://segment.com/pricing ' , path : ' /pricing/view ' , referrer : ' https://segment.com/warehouses ' }); Segment sets the path and url property to the value of the canonical element on your page. If a canonical element is not set, the values will be set from the browser. Group The Group method associates an identified user with a company, organization, project, workspace, team, tribe, platoon, assemblage, cluster, troop, gang, party, society or any other collective noun you come up with for the same concept. This is useful for tools like Intercom , Preact , and Totango , as it ties the user to a group of other users. The Group method follows the format below. analytics . group ( groupId , [ traits ], [ options ], [ callback ]); The Group call has the following fields: Field Type Description groupId String The Group ID to associate with the current user. traits optional Object A dictionary of traits for the group. Example traits for a group include address , website , and employees . options optional Object A dictionary of options. For example, enable or disable specific destinations for the call. Note: If you do not pass a properties object, pass an empty object (like ‘{}’) before options . callback optional Function A function that runs after a timeout of 300 ms, giving the browser time to make outbound requests first. Example group call: analytics . group ( ' UNIVAC Working Group ' , { principles : [ ' Eckert ' , ' Mauchly ' ], site : ' Eckert–Mauchly Computer Corporation ' , statedGoals : ' Develop the first commercial computer ' , industry : ' Technology ' }); By default, Analytics.js caches group traits in the browser’s local storage and attaches them to each group call, similar to how the identify method works. Find more details about group , including the group payload, in the Group Spec . Alias The Alias method combines two unassociated user identities. Segment usually handles aliasing automatically when you call identify on a user, however some tools require an explicit alias call. This is an advanced method, but it’s required to manage user identities successfully in some Segment destinations like Kissmetrics and Mixpanel . The Alias method follows the format below: analytics . alias ( userId , [ previousId ], [ options ], [ callback ]); The Alias call has the following fields: Field Type Description userId String The new user ID you want to associate with the user. previousId optional String The previous ID that the user was recognized by. This defaults to the currently identified user’s ID. options optional Object A dictionary of options. For example, enable or disable specific destinations for the call. callback optional Function A function that is executed after a timeout of 300 ms, giving the browser time to make outbound requests first. For more details about Alias, including the alias call payload , check out the Segment Spec . Utility methods The Analytics.js utility methods help you change how Segment loads on your page. They include: Load Ready Debug On (Emitter) Timeout Reset (Logout) Keepalive Load The load method is also available when you load analytics.js through the NPM package . You can load a buffered version of analytics.js that requires you to call load explicitly before analytics.js initiates any network activity. This is useful if you want to, for example, wait for user consent before you fetch tracking destinations or send buffered events to Segment. Call load one time only. export const analytics = new AnalyticsBrowser () analytics . identify ( \" hello world \" ) if ( userConsentsToBeingTracked ) { analytics . load ({ writeKey : ' <YOUR_WRITE_KEY> ' }) // destinations loaded, enqueued events are flushed } You can also use load if you fetch some settings asynchronously. const analytics = new AnalyticsBrowser () fetchWriteKey (). then ( writeKey => analytics . load ({ writeKey })) analytics . identify ( \" hello world \" ) Ready The ready method lets you pass in a method that gets called after Analytics.js finishes initializing and after all enabled device-mode destinations load. It’s like jQuery’s ready method , except for Destinations. Because it doesn’t fire until all enabled device-mode destinations are loaded, it can’t be used to change configuration options for downstream SDKs. That can only be done if the SDK is loaded natively. The ready method isn’t invoked if any Destination throws an error (for example, for an expired API key, incorrect settings configuration, or when a Destination is blocked by the browser) during initialization. If you want to check when Analytics.js has loaded, you can look at the value of window.analytics.initialized . When it’s true, the library has successfully initialized, even if some destinations are blocked. Note : window.analytics.initialized is a simple boolean, not an event or a pub/sub system. This means you can’t subscribe to changes in its value. If you need to detect when it changes from false to true , you must set up a polling mechanism to monitor the value. The code in the ready function only executes after ready is emitted. If you want to access end-tool library methods that do not match any Analytics.js methods, like adding an extra setting to Mixpanel, you can use a ready callback so that you’re guaranteed to have access to the Mixpanel object, like so: analytics . ready ( function () { window . mixpanel . set_config ({ verbose : true }); }); The ready method uses the following format: analytics . ready ( callback ); The ready method has the following fields: Field Type Description callback Function A function to be executed after all enabled destinations have loaded. Debug Calling the debug method turns on debug mode, which logs helpful messages to the console. Subsequent Segment events generate messages in the developer console after you invoke debug . Enable: analytics . debug ( true ); Disable: analytics . debug ( false ); Emitter The global analytics object emits events whenever you call alias , group , identify , track , or page . Use the on method to set listeners for these events and run your own custom code. This can be useful if you want to send data to a service for which Segment doesn’t have a destination. analytics . on ( method , callback ); Field Type Description method String Name of the method to listen for. callback Function A function to execute after each emitted method, taking three arguments: event , properties , options . Example: analytics . on ( ' track ' , function ( event , properties , options ) { bigdataTool . push ([ ' recordEvent ' , event ]); }); This method emits events before they are processed by the Segment integration, and may not include some of the normalization Segment performs on the client before sending the data to the Segment servers. Note Page event properties are stored in the options object. Extending timeout The timeout method sets the length (in milliseconds) of callbacks and helper functions. This is useful if you have multiple scripts that need to fire in your callback or trackLink , trackForm helper function. The example below sets the timeout to 500 ms. analytics . timeout ( 500 ); If you’re triggering ad network conversion pixels, Segment recommends extending timeout to 500 ms to account for slow load times. Reset or log out Calling reset resets the id , including anonymousId , and clears traits for the currently identified user and group. analytics . reset (); The reset method only clears the cookies and localStorage created by Segment. It doesn’t clear data from other integrated tools, as those native libraries might set their own cookies to manage user tracking, sessions, and manage state. To completely clear out the user session, see the documentation provided by those tools. Segment doesn’t share localStorage across subdomains. If you use Segment tracking on multiple subdomains, you must call analytics.reset() for each subdomain to completely clear out the user session. Keepalive You can utilize this in instances where an API call fires on a hard redirect, and are missed from getting captured in Segment. If you set this flag to true, it enables firing the event before the redirect. This is available for all events. You can read more about this in the Github PR . Managing data flow with the Integrations object Tip : You can change how your data flows in several different ways without having to change your code. See Filtering Data to learn more. You can pass an integrations object in the options of Alias, Group, Identify, Page, and Track methods to send data to only the selected destinations. By default, all Destinations are enabled. The example below sends a message only to Intercom and Google Analytics. analytics . identify ( ' user_123 ' , { email : ' jane.kim@example.com ' , name : ' Jane Kim ' }, { integrations : { ' All ' : false , ' Intercom ' : true , ' Google Analytics ' : true } }); 'All': false tells Segment not to send data to any Destinations by default, unless they’re explicitly listed as true in the next lines. As an opposite example, the snippet below sends a message to all integrations except Intercom and Google Analytics. analytics . identify ( ' user_123 ' , { email : ' jane.kim@example.com ' , name : ' Jane Kim ' }, { integrations : { ' Intercom ' : false , ' Google Analytics ' : false } }); You don’t need to include 'All': true in this call because it’s implied as the default behavior. Instead, only list the destinations that you want to exclude, with a false flag for each. Destination flags are case sensitive and match the destination’s name in the docs (for example, “AdLearn Open Platform”, “awe.sm”, “Mailchimp”, etc). If a Destination has more than one acceptable name, this appears in the documentation for that destination. Business tier customers can filter Track calls from the Source Schema page in the Segment UI. Segment recommends that you use the UI to simplify filter management and make updates without changing your site’s code. Load options Note: To use this feature, you must be on snippet version 4.1.0 or later. You can get the latest version of the snippet from the Analytics.js Quickstart . You can modify the .load method in Analytics.js (the second line of the snippet) to take a second argument. If you pass an object with an integrations dictionary, then Segment only loads the integrations in that dictionary that are marked as enabled with the boolean value true . You can only call .load on page load, or reload (refresh). If you modify the .load method between page loads, it doesn’t have any effect until the page is reloaded. For example: analytics . load ( ' writekey ' , { integrations : { All : false , ' Google Analytics ' : true , ' Segment.io ' : true } }) This way, you can conditionally load integrations based on what customers opt into on your site. The example below shows how you might load only the tools that the user agreed to use. onConsentDialogClosed ( function ( consentedTools ){ analytics . load ( ' writekey ' , { integrations : consentedTools }) }) Bundle obfuscation You can also add an obfuscate property to the object in the second parameter, which obscures the URL from which your integrations and destination actions are loaded. This helps prevent words that are flagged by ad blockers to not be detected in your URL, enabling the integration to properly load. For example: analytics . load ( ' writekey ' , { obfuscate : true }) The obfuscate value is false by default. ISO string conversion By default, the Analytics.js library will convert ISO8061 strings to a Date object before passing it to downstream device-mode integrations. If you would like to disable this functionality and send those strings as they are passed to the event, you can use the load method to pass in the disableAutoISOConversion option. For example: analytics . load ( ' writekey ' , { disableAutoISOConversion : true }) Client hints Some userAgent strings are frozen and contain less information. If you would like to request more information when it’s available, you can pass an array of strings with fields you would like to request to the highEntropyValuesClientHints option. The example array below contains all possible values. For example: analytics . load ( ' writekey ' , { highEntropyValuesClientHints : [ ' architecture ' , ' bitness ' , ' model ' , ' platformVersion ' , ' uaFullVersion ' , ' fullVersionList ' , ' wow64 ' ] }) Disabling For testing or staging environments, it can be useful to disable your SDK to ensure no events send. If disable: true is passed, all analytics method calls will be a no-op, and no network calls will be initiated. analytics . load ( ' writekey ' , { disable : true }) For wrapper/plugin authors: if you have a use case where you need special access to the CDN Settings (for example, consent management), you can also pass a function. This API waits for cdnSettings to be fetched. Keep in mind that cdnSettings is an unstable object. analytics . load ( ' writekey ' , { disable : ( cdnSettings ) => true }) Retries When enabled, Analytics.js automatically retries network and server errors. With persistent retries, Analytics.js can: Support offline tracking . Analytics.js queues your events and delivers them when the user comes back online. Better handle network issues . When your application can’t connect to the Segment API, Segment continues to store the events on the browser to prevent data loss. Analytics.js stores events in localStorage and falls back to in-memory storage when localStorage is unavailable. It retries up to 10 times with an incrementally increasing back-off time between each retry. Analytics.js queues up to 100 events at a time to avoid using too much of the device’s local storage. See the destination Retries documentation to learn more. Batching Batching is the ability to group multiple requests or calls into one request or API call. All requests sent within the same batch have the same receivedAt time. With Analytics.js, you can send events to Segment in batches. Sending events in batches enables you to have: Delivery of multiple events with fewer API calls Fewer errors if a connection is lost because an entire batch will retry at once rather than multiple calls retrying at random times. Setup You can start batching by changing the strategy to \"batching\" and the parameters for size and timeout within the load method in the analytics object. Batching requires both parameters. analytics . load ( \" <write_key> \" , { integrations : { \" Segment.io \" : { deliveryStrategy : { strategy : \" batching \" , config : { size : 10 , timeout : 5000 } } } } }); You can check to see if batching works by checking your source’s debugger in Sources > Debugger . When you select an event and view the Raw code, the receivedAt time of all the events in the batch should be the same. Batch size The batch size is the threshold that forces all batched events to be sent once it’s reached. For example, size: 10 means that after triggering 10 events, Analytics.js sends those 10 events together as a batch to Segment. Your total batched events can’t exceed the maximum payload size of 500 KB, with a limit of 32 KB for each event in the batch. If the 500 KB limit is reached, the batch will be split. Timeout timeout is the number of milliseconds that forces all events queued for batching to be sent, regardless of the batch size, once it’s reached. For example, timeout: 5000 sends every event in the batch to Segment once 5 seconds passes. Batching FAQs Will Analytics.js deliver events that are in the queue when a user closes the browser? Analytics.js does its best to deliver the queued events before the browser closes, but the delivery isn’t guaranteed. Upon receiving the beforeunload browser event, Analytics.js attempts to flush the queue using fetch requests with keepalive set to true. Since the max size of keepalive payloads is limited to 64 KB, if the queue size is bigger than 64 KB at the time the browser closes, then there is a chance of losing a subset of the queued events. Reducing the batch size or timeout will alleviate this issue, but that will be a trade-off decision. Can other destinations receive batched events? No, this batching only impacts events sent to Segment. Once the batch reaches Segment, it’s split up and follows the normal path of an event. Will batching impact billing or throughput? No, batching won’t impact billing or throughput. Can I use batching with partner integrations? Partner integrations don’t support batching as all other partner integrations run one event at a time. Only Segment.io events support batched delivery. Does batching work on all browsers? Batching won’t work on Internet Explorer. If a source has retry enabled, does the retry behavior change when using batching? Batching delays retries, as events that are queued for batching aren’t retried until a batch delivery fails. When using Middlewares as a source and destination, is there a change in behavior when using batching? No, there is no change in behavior to Middlewares. When using Segment features (Schema filtering, integrations object, Protocols) to filter events from going to destinations (device and cloud-mode), will batching impact the filtering of events? No, there is no impact to how events filter. Plugins and source middleware When you develop against Analytics 2.0, the plugins you write can augment functionality, enrich data, and control the flow and delivery of events. From modifying event payloads to changing analytics functionality, plugins and middleware help to speed up the process of getting things done. Plugins and source middleware accomplish the same thing, but plugins are significantly more powerful (but more verbose to implement). For basic use cases like adding event fields or dropping specific events, use source middleware . If you need more granular control of the lifecycle, or want to be able to abort the Segment initialization, you should use plugins . Source Middleware Source middleware runs before any other plugins. You can use this to enrich or drop an event. Example usage of addSourceMiddleware Here are some examples of using addSourceMiddleware for enrichment and validation. Enrichment analytics . addSourceMiddleware (({ payload , next }) => { const { event } = payload . obj . context if ( event . type === ' track ' ) { event . event . toLowerCase () } next ( payload ) }); Validation analytics . addSourceMiddleware (({ payload , next }) => { const { event } = payload . obj . context if ( ! isValid ( event )) { return null // event is dropped } next ( payload ) }); Advanced Plugin API For advanced modification to the event pipeline. Type Details before Executes before event processing begins. These are plugins that run before any other plugins run. Thrown errors here can block the event pipeline. Source middleware added via addSourceMiddleware is treated as a before plugin. enrichment Executes as the first level of event processing. These plugins modify an event. Thrown errors here can block the event pipeline. destination Executes as events begin to pass off to destinations. Segment.io is implemented as a destination plugin. Thrown errors here will not block the event pipeline. after Executes after all event processing completes. You can use this to perform cleanup operations. utility Executes only once during the analytics.js bootstrap. Gives you access to the analytics instance via the plugin’s load() method. This doesn’t allow you to modify events. Example plugins Here’s an example of a plugin that converts all track event names to lowercase before the event goes through the rest of the pipeline: export const lowercase : Plugin = { name : ' Lowercase events ' , type : ' enrichment ' , version : ' 1.0.0 ' , isLoaded : () => true , load : () => Promise . resolve (), track : ( ctx ) => { ctx . updateEvent ( ' event ' , ctx . event . event . toLowerCase ()) return ctx } } const identityStitching = () => { let user const identity = { // Identifies your plugin in the Plugins stack. // Access `window.analytics.queue.plugins` to see the full list of plugins name : ' Identity Stitching ' , // Defines where in the event timeline a plugin should run type : ' enrichment ' , version : ' 0.1.0 ' , // use the `load` hook to bootstrap your plugin // The load hook will receive a context object as its first argument // followed by a reference to the analytics.js instance from the page load : async ( _ctx , ajs ) => { user = ajs . user () }, // Used to signal that a plugin has been property loaded isLoaded : () => user !== undefined , // Applies the plugin code to every `identify` call in Analytics.js // You can override any of the existing types in the Segment Spec. async identify ( ctx ) { // Request some extra info to enrich your `identify` events from // an external API. const req = await fetch ( `https://jsonplaceholder.typicode.com/users/ ${ ctx . event . userId } ` ) const userReq = await req . json () // ctx.updateEvent can be used to update deeply nested properties // in your events. It's a safe way to change events as it'll //  create any missing objects and properties you may require. ctx . updateEvent ( ' traits.custom ' , userReq ) user . traits ( userReq ) // Every plugin must return a `ctx` object, so that the event // timeline can continue processing. return ctx }, } return identity } // Registers Segment's new plugin into Analytics.js await window . analytics . register ( identityStitching ()) Here’s an example of a utility plugin that allows you to change the format of the anonymous_id cookie: window . analytics . ready (() => { window . analytics . register ({ name : ' Cookie Compatibility ' , version : ' 0.1.0 ' , type : ' utility ' , load : ( _ctx , ajs ) => { const user = ajs . user () const cookieJar = user . cookies const cookieSetter = cookieJar . set . bind ( cookieJar ) // blindly convert any values into JSON strings cookieJar . set = ( key , value , opts ) => cookieSetter ( key , JSON . stringify ( value ), opts ) // stringify any existing IDs user . anonymousId ( user . anonymousId ()) user . id ( user . id ()) }, isLoaded : () => true }) }) You can view Segment’s existing plugins to see more examples. Register a plugin Registering plugins enable you to modify your analytics implementation to best fit your needs. You can register a plugin using this: // A promise will resolve once the plugins have been successfully loaded into Analytics.js // You can register multiple plugins at once by using the variable args interface in Analytics.js await window . analytics . register ( pluginA , pluginB , pluginN ) Video player plugins Segment offers video player ‘plugins’ so you can quickly collect video events using Analytics.js. See the specific documentation below to learn more: YouTube Vimeo Cross-subdomain analytics Analytics.js tracks across subdomains out of the box. All Segment destinations fully support this feature. To track activity on your subdomains, include the Segment Analytics.js snippet on each subdomain. Segment sets users’ anonymousId on the top-level domain, so that users are tracked across any subdomain. Because Segment tracks across subdomains, you can either use the same Segment source, or use separate sources for each subdomain. What you decide depends on your team’s goals for tracking each subdomain. Segment doesn’t offer tracking across top-level domains out of the box. If you want to track across top-level domains, you can utilize Segment’s Querystring API to pass the anonymousId from Website A to Website B in the query string. When a user moves from Website A to Website B with the anonymousId in the query string, Analytics.js reads that value and sets the anonymousId to it, rather than generating a new one. UTM Tracking UTM parameters are only used when linking to your site from outside your domain. When a visitor arrives using a link containing UTM parameters, Segment’s analytics.js library will parse the URL query string and add the information to the event payload. For more information about UTM tracking, see the Tracking Customers Across Channels and Devices documentation. UTM parameters contain three essential components (utm_source, utm_medium, utm_campaign) and two optional (utm_content, utm_term). For example, if you include the following three parameters in your URL: ?utm_source=mysource&utm_medium=email&utm_campaign=mytestcampaign , once a visitor arrives using a link containing the above, Segment automatically grabs the UTM parameters and subsequent events will contain these parameters within the ‘context’ object (visible in the raw view of your Source Debugger.) So, for example, if somebody follows the link with above query string to your site, the subsequent ‘page’ call in your Debugger should contain the below and will be passed to any enabled destinations: \" context \" : { \" campaign \" : { \" medium \" : \" email \" , \" name \" : \" mytestcampaign \" , \" source \" : \" mysource \" , }, Whenever the UTM parameters are no longer a part of the URL, Segment no longer includes them. For example, if the user goes to a new page within your website which does not contain these parameters, they will not be included in subsequent events. UTM parameters are non-persistent by default as they could potentially cause data accuracy problems. Here’s an example of why: Say a user clicks on an ad and lands on your site. He navigates around and bookmarks an internal page - or maybe shares a link with a friend, who shares it with another friend. All those links would then point back to the same test utm_source as the initial referrer for any purchase. Segment doesn’t validate UTM parameter names. This design supports the flexibility to track both standard parameters (for example, utm_source, utm_medium) and custom parameters defined by users. As a result, all parameters present in the URL collected as is, and are added to the context field without checks for naming conventions or validity. If you want to ensure that only standard UTM parameters (such as, utm_source, utm_medium, utm_campaign, utm_content, utm_term) are included in the context.campaign object, you can implement Source middleware in your Analytics.js setup. For example: window . analytics . addSourceMiddleware (({ payload , next }) => { if ( payload . obj . context ?. campaign ) { const allowedFields = [ \" source \" , \" medium \" , \" term \" , \" campaign \" , \" content \" ]; const campaign = payload . obj . context . campaign ; Object . keys ( campaign ). forEach ( key => { if ( ! allowedFields . includes ( key )) { delete campaign [ key ]; } }); } next ( payload ); }); This middleware filters out any non-standard parameters from the context.campaign object before they’re sent to Segment or forwarded to your enabled destinations. Analytics.js performance The Analytics.js library and all Destination libraries are loaded with the HTML script async tag . This also means that Segment fires methods asynchronously, so you should adjust your code accordingly if you require that events be sent from the browser in a specific order. While many tools require access to the DOM or cookies, for the Zendesk, Salesforce, and Mailchimp destinations, Segment doesn’t need to load a native JavaScript library. Instead, Segment’s servers send data to the end-tools. Segment loads the libraries required for your enabled Destinations. When you disable a destination, the custom version of Analytics.js loaded on your site stops requesting that library. Using Analytics.js doesn’t offer a large performance benefit, but is more performant than installing each of the destinations individually. And as more destinations move to accept data directly from Segment, you’ll receive more performance benefits automatically. One option, if you don’t want to use any bundled third-party tools, is to use the Analytics-Node package. Analytics.js doesn’t set third-party cookies and only sets first-party cookies. Bundle size Segment’s Analytics.js JavaScript snippet increases the page size by about 1.1KB. The snippet asynchronously requests and loads a customized JavaScript bundle ( analytics.min.js ), which contains the code and settings needed to load your device-mode destinations . The size of this file changes depending on the number of and which destinations you enable. Without any destinations enabled, the analytics.min.js file is about 62KB. Each time you enable a destination, the file’s size may increase slightly. Cookies set by Analytics.js Segment sets three cookies in general: Cookie Description ajs_anonymous_id An anonymous ID generated by Analytics.js, used for Segment calls. ajs_group_id A group ID that can be specified by making a group() call with Analytics.js. ajs_user_id A user ID that can be specified by making an identify() call with Analytics.js. For Google Chrome, these cookies expire by default one year after the date created. Other supported browsers might have a different expiration time. Some user/group traits are also stored in localStorage : Cookie Description ajs_user_traits The traits that are passed in an identify() call. ajs_group_properties The properties that are passed in a group() call. Note that localStorage variables don’t expire because the browser defines that functionality. Local storage cookies used by Analytics.js Analytics.js uses localstorage cookies if you have retries enabled, to keep track of retry timing. The ack cookie is a timer used to see if another tab should claim the retry queue. The reclaimStart and reclaimEnd cookies determine if a tab takes over the queue from another tab. The inProgress and queue cookies track events in progress, and events queued for retry. For more information, visit the Segment localstorage-retry library . You can set the debug cookie to analytics.js to log debug messages from Analytics.js to the console. Tracking Blockers and Browser Privacy Settings Segment does not endorse bypassing tracking blockers or browser privacy settings for client-side tracking. Your users have control over what gets loaded on their pages and can use plugins or browser settings to block third-party scripts, including Segment. To minimize client-side data loss, Segment recommends you choose from the following routes: Respect the user’s decision to implement tracking blockers or use privacy settings, knowing that, unfortunately, some data will be lost. Ask the customer to disable the tracking blockers or adjust their privacy settings (for example, in the case of large, corporate customers). Move as many events and tracking actions as possible to a server-side library, which won’t encounter the same limitations. To minimize client-side data loss, Segment provides a few workarounds. However, it’s important to note that Segment cannot guarantee their effectiveness. Use the bundle obfuscation feature. You can add an obfuscate property to the object in the second parameter, which obscures the URL from which your integrations and destination actions are loaded. This helps prevent words that are flagged by ad blockers to not be detected in your URL, enabling the integration to properly load. Create a custom proxy . This changes the URL that Segment loads from (cdn.segment.com) and the outgoing requests generated when events are triggered (api.segment.io). Consider implementing the Segment Edge SDK . The Segment Edge SDK leverages Cloudflare Workers to facilitate first-party data collection and real-time user profiling for app personalization. It integrates Segment’s library into web apps, manages user identity via HttpOnly cookies, and employs an internal router for efficient data processing and user experience customization. This innovative approach simplifies tracking and personalization for Segment customers. More information is available in the Edge SDK README . Consider using one of Segment’s server-side libraries . Using a server-side library eliminates concerns about tracking blockers and privacy browsers that can prevent Segment from loading. This option may require additional code to track actions like a Page call, as you now need to manually pass contextual information that would have been automatically collected by Analytics.js, like url , path , and referrer . Note that some destinations are device-mode only. Installing the library under a custom global namespace When you load Analytics.js through snippet code, by default, the SDK installs on window.analytics global variable. If this causes a conflict with another library on your page, you can change the global variable used by Analytics.js if you use snippet version 5.2.1 or later. Change the global variable in the beginning of your snippet code as shown below. In this case, Analytics.js uses window.custom_key to load instead of window.analytics . - !function(){var i=\"analytics\", ...\n  + !function(){var i=\"custom_key\", ... Add destinations from npm Bundle the destinations you want loaded from npm instead of having them loaded from a remote CDN. This enables you to have fewer network requests when adding destinations. To add actions-based destinations from npm: import vwo from ' @segment/analytics-browser-actions-vwo ' import braze from ' @segment/analytics-browser-actions-braze ' const analytics = AnalyticsBrowser . load ({ writeKey : ' <WRITE_KEY> ' , plugins : [ vwo , braze ], }) Pass in the destination plugin to the added config option called plugins .  A list of all action destination packages can be found on GitHub in the @segmentio/action-destinations repository. To add classic destinations from npm: import { AnalyticsBrowser } from ' @segment/analytics-next ' import GoogleAnalyticsIntegration from ' @segment/analytics.js-integration-google-analytics ' // The following example assumes configuration for Google Analytics will be available in the fetched settings const analytics = AnalyticsBrowser . load ({ writeKey : ' <WRITE_KEY> ' , classicIntegrations : [ GoogleAnalyticsIntegration ] }), Segment Inspector The Segment Inspector is a Chrome web extension that enables you to debug your Segment integration on web applications instrumented with Analytics.js. Analytics.js sends data to the extension so that you can see how events change before they’re sent to your destinations and so that you can verify that the event details are correct. The Segment Inspector also lets you analyze and confirm that API calls made from your website arrive to your Analytics.js source. For the Segment inspector to work, you must enable the Analytics.js source. To add the Segment Inspector as a Chrome extension: Go to the Segment Inspector in the Chrome web store . Click Add to Chrome . Click Add Extension in the pop-up window. Once installed, use the Inspect Elements developer tool in Chrome to use the Segment Inspector. To access the Inspector, go to the top menu bar of Chrome and navigate to View > Developer > Developer Tools and go to the Segment tab. On the Segment tab, you can: Filter the different calls by type Search based off of the content in the calls Identify users Components of the Segment Inspector The Segment Inspector is composed of these three components: The Diagnostics tab This tab shows the library versions and the list of active integrations that are running. When you select an integration, you can see the options that passed while the integration loads. If you made any local overrides within the integration or on the page itself, they appear highlighted in the code. The Events tab This tab enables you to select an event and see the specific details of the event. You can view the time the event occurred, the status of the event (whether it sent or failed), what plugins were added, and how the context object changed. Any changes made to the payload appear highlighted. Select the double-checked icon to see the payload at the delivery stage. Select the fx icon to see the payloads after plugins ran. Select the single-checked icon to see the payload as it was when the event triggered. The Identity tab This tab enables you to see the information of a user if you’re using the identify feature. You can associate the data to an individual and measure their activity across multiple sessions and devices. This tab only shows the user’s traits that are on the client. If you’re not using the identify feature, the user remains anonymous. Example uses Here are some examples of using Analytics.js. Note that the examples assume Analytics.js is installed through npm . Next.js with-segment-analytics with-segment-analytics-pages-router Vanilla React, Vue See Usage in Common Frameworks & SPAs External dependencies Analytics.js production dependencies are listed under the dependencies key . This page was last modified: 17 Dec 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting started Benefits of Analytics.js Basic tracking methods Utility methods Managing data flow with the Integrations object Retries Batching Plugins and source middleware Video player plugins Cross-subdomain analytics UTM Tracking Analytics.js performance Tracking Blockers and Browser Privacy Settings Installing the library under a custom global namespace Add destinations from npm Segment Inspector Example uses External dependencies Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "classic",
      "working",
      "website",
      "model",
      "canonical",
      "firing",
      "group",
      "javascript",
      "concerns",
      "block",
      "significantly",
      "supported",
      "forwarded",
      "custom",
      "previousid",
      "source",
      "packages",
      "interface",
      "error",
      "database",
      "generating",
      "appears",
      "project",
      "reads",
      "array",
      "dropping",
      "community",
      "title",
      "easiest",
      "closes",
      "addsourcemiddleware",
      "options",
      "utility",
      "identity",
      "between",
      "pluginb",
      "customers",
      "fullversionlist",
      "normal",
      "triggered",
      "wrapper",
      "analyze",
      "until",
      "failed",
      "flagged",
      "implied",
      "router",
      "utm_medium",
      "anonymous",
      "benefits",
      "begins",
      "external",
      "quickstart",
      "documentation",
      "integrated",
      "server",
      "arrive",
      "translates",
      "recordevent",
      "powerful",
      "redirect",
      "category",
      "scripts",
      "which",
      "maybe",
      "state",
      "buffered",
      "entire",
      "remote",
      "onconsentdialogclosed",
      "improve",
      "simple",
      "installing",
      "variable",
      "delays",
      "separate",
      "alias",
      "correct",
      "execute",
      "processed",
      "latest",
      "lifecycle",
      "calling",
      "clears",
      "except",
      "pages",
      "warehouses",
      "getelementbyid",
      "contains",
      "increasing",
      "improves",
      "finishes",
      "subsequent",
      "option",
      "platformversion",
      "implementation",
      "include",
      "potentially",
      "set_config",
      "actively",
      "guarantee",
      "youtube",
      "function",
      "obfuscation",
      "predecessor",
      "errors",
      "const",
      "handles",
      "ongoing",
      "somebody",
      "tracks",
      "collects",
      "content",
      "against",
      "completely",
      "debugger",
      "missing",
      "cookiesetter",
      "increase",
      "takes",
      "useragent",
      "user_123",
      "defines",
      "cannot",
      "cross",
      "causes",
      "identified",
      "individual",
      "goals",
      "beforeunload",
      "every",
      "blocked",
      "authors",
      "impacts",
      "linking",
      "platforms",
      "explicit",
      "helpful",
      "collected",
      "ajs_user_traits",
      "choose",
      "where",
      "activity",
      "destinations",
      "forces",
      "implementing",
      "marked",
      "frozen",
      "manages",
      "eliminates",
      "batched",
      "while",
      "email",
      "moves",
      "collection",
      "recommends",
      "giving",
      "reducing",
      "refresh",
      "article",
      "01011992",
      "online",
      "window",
      "passes",
      "inspect",
      "installs",
      "batches",
      "httponly",
      "dropped",
      "waits",
      "maintains",
      "works",
      "followed",
      "field",
      "making",
      "during",
      "attaches",
      "cause",
      "track",
      "emitted",
      "configuration",
      "grace",
      "pricing",
      "reloaded",
      "queues",
      "context",
      "document",
      "automatically",
      "initialized",
      "hundreds",
      "format",
      "cluster",
      "continue",
      "successfully",
      "development",
      "inspector",
      "agreed",
      "persistent",
      "treated",
      "fires",
      "package",
      "isvalid",
      "should",
      "appear",
      "unassociated",
      "advanced",
      "disable",
      "diagnostics",
      "first",
      "newsletter",
      "video",
      "create",
      "taking",
      "mixpanel",
      "existing",
      "retrieves",
      "value",
      "feedback",
      "write",
      "queued",
      "event",
      "subscribe",
      "total",
      "assumed",
      "reached",
      "pipeline",
      "initiates",
      "threshold",
      "associates",
      "control",
      "12091906",
      "payloads",
      "generated",
      "offers",
      "samples",
      "getting",
      "defined",
      "userreq",
      "directly",
      "objects",
      "record",
      "words",
      "commercial",
      "partner",
      "traits",
      "explorer",
      "provides",
      "query",
      "progress",
      "knowing",
      "determine",
      "troop",
      "keepalive",
      "might",
      "names",
      "ajs_anonymous_id",
      "middlewares",
      "flushed",
      "analytics",
      "change",
      "customer",
      "cloud",
      "useful",
      "natively",
      "false",
      "unavailable",
      "around",
      "clear",
      "react",
      "detected",
      "selected",
      "websites",
      "system",
      "session",
      "properly",
      "standard",
      "ajs_group_id",
      "passing",
      "signed",
      "player",
      "contain",
      "clicks",
      "depend",
      "lowercase",
      "exceed",
      "utm_content",
      "emitter",
      "together",
      "things",
      "bigger",
      "flags",
      "ajs_user_id",
      "decide",
      "compatibility",
      "application",
      "navigates",
      "writekey",
      "someone",
      "instantiate",
      "loaded",
      "retry",
      "retrying",
      "typicode",
      "leverages",
      "profiling",
      "approach",
      "recommended",
      "integrate",
      "using",
      "testing",
      "sources",
      "basic",
      "stringify",
      "wow64",
      "benefit",
      "helper",
      "property",
      "bigdatatool",
      "another",
      "encounter",
      "additional",
      "storage",
      "modified",
      "whenever",
      "share",
      "information",
      "tribe",
      "servers",
      "fetchwritekey",
      "performance",
      "binds",
      "override",
      "browsers",
      "domain",
      "consentedtools",
      "verbose",
      "added",
      "flexibility",
      "components",
      "referrer",
      "store",
      "arguments",
      "explicitly",
      "associate",
      "updateevent",
      "returns",
      "flight",
      "medium",
      "checked",
      "data",
      "favoritecompiler",
      "applies",
      "service",
      "subdomain",
      "localstorage",
      "dependencies",
      "empty",
      "libraries",
      "element",
      "assigns",
      "later",
      "validate",
      "visitor",
      "common",
      "behavior",
      "github",
      "grabs",
      "string",
      "augment",
      "complete",
      "limit",
      "flagship",
      "employees",
      "custom_key",
      "import",
      "single",
      "braze",
      "reclaimend",
      "privacy",
      "trade",
      "identifies",
      "assistance",
      "initializing",
      "proxy",
      "avoid",
      "snippet",
      "popular",
      "depends",
      "network",
      "build",
      "account",
      "computer",
      "better",
      "guaranteed",
      "object",
      "varies",
      "signup",
      "checks",
      "customized",
      "univac",
      "provided",
      "debug",
      "exclude",
      "acceptable",
      "disableautoisoconversion",
      "extra",
      "inserts",
      "consent",
      "method",
      "usually",
      "completed",
      "society",
      "depending",
      "reaches",
      "virtual",
      "executes",
      "workers",
      "nickname",
      "seconds",
      "guide",
      "resolve",
      "stores",
      "invoked",
      "opposite",
      "vanilla",
      "running",
      "multiple",
      "endorse",
      "analyticsbrowser",
      "repository",
      "collective",
      "effect",
      "identify",
      "architecture",
      "conventions",
      "eckert",
      "since",
      "containing",
      "conflict",
      "allows",
      "adlearn",
      "facilitate",
      "vimeo",
      "applications",
      "filters",
      "required",
      "provider",
      "academy",
      "critical",
      "either",
      "cleanup",
      "needs",
      "anonymous_id",
      "properties",
      "retried",
      "level",
      "across",
      "api",
      "strategy",
      "integration",
      "views",
      "cookiejar",
      "going",
      "listed",
      "parameter",
      "tools",
      "manually",
      "fewer",
      "essential",
      "expiration",
      "protocols",
      "bundled",
      "business",
      "register",
      "changed",
      "replace",
      "follows",
      "mailchimp",
      "modifying",
      "specified",
      "prevent",
      "supports",
      "integrates",
      "unless",
      "uafullversion",
      "regardless",
      "issues",
      "async",
      "monitor",
      "expired",
      "incrementally",
      "visit",
      "click",
      "viewed",
      "kissmetrics",
      "mytestcampaign",
      "memory",
      "foreach",
      "emits",
      "lines",
      "order",
      "caches",
      "methods",
      "resets",
      "following",
      "smaller",
      "filter",
      "there",
      "personalization",
      "milliseconds",
      "validity",
      "weight",
      "about",
      "times",
      "stops",
      "integrations",
      "disabling",
      "querystring",
      "mysource",
      "requesting",
      "checking",
      "contextual",
      "under",
      "environments",
      "signs",
      "develop",
      "problems",
      "middleware",
      "three",
      "iso8061",
      "hints",
      "preact",
      "consider",
      "hopper",
      "setting",
      "correspond",
      "tracklink",
      "possible",
      "bundle",
      "extending",
      "requires",
      "within",
      "navigate",
      "measure",
      "reload",
      "variables",
      "flows",
      "introducing",
      "rather",
      "types",
      "feature",
      "loading",
      "speed",
      "assume",
      "number",
      "specific",
      "however",
      "cookies",
      "reclaimstart",
      "tracked",
      "messages",
      "issue",
      "missed",
      "trial",
      "implemented",
      "respect",
      "select",
      "delivery",
      "below",
      "extension",
      "convert",
      "pluginn",
      "friend",
      "completes",
      "functionality",
      "billing",
      "coded",
      "promise",
      "different",
      "batch",
      "least",
      "events",
      "listen",
      "highentropyvaluesclienthints",
      "bypassing",
      "without",
      "platform",
      "channels",
      "accordingly",
      "native",
      "cookie",
      "classicintegrations",
      "premium",
      "flush",
      "registering",
      "building",
      "message",
      "itself",
      "fetch",
      "receivedat",
      "enabling",
      "thing",
      "currently",
      "falls",
      "limitations",
      "similar",
      "batching",
      "update",
      "obscures",
      "routes",
      "losing",
      "modification",
      "stage",
      "thrown",
      "initiated",
      "installed",
      "destination",
      "validation",
      "redirecting",
      "allow",
      "listeners",
      "enrichment",
      "included",
      "shares",
      "connect",
      "factors",
      "allowedfields",
      "hosting",
      "shown",
      "whether",
      "lands",
      "address",
      "bitness",
      "present",
      "random",
      "browser",
      "operations",
      "would",
      "downstream",
      "employs",
      "throughput",
      "third",
      "simplifies",
      "optional",
      "isloaded",
      "point",
      "gives",
      "sessions",
      "enable",
      "increases",
      "bookmarks",
      "registers",
      "trackform",
      "mechanism",
      "pixels",
      "filtering",
      "connection",
      "performant",
      "company",
      "enabled",
      "turns",
      "stitching",
      "minimize",
      "sending",
      "arrives",
      "setup",
      "ensure",
      "simplify",
      "timer",
      "efficient",
      "local",
      "device",
      "internet",
      "individually",
      "includes",
      "party",
      "accept",
      "subdomains",
      "receiving",
      "special",
      "occurs",
      "jsonplaceholder",
      "releases",
      "guidelines",
      "maintenance",
      "course",
      "status",
      "quickly",
      "workspace",
      "salesforce",
      "after",
      "changing",
      "recognized",
      "claim",
      "modify",
      "submission",
      "https",
      "google",
      "thanks",
      "anonymousid",
      "producttype",
      "split",
      "utm_term",
      "timing",
      "mobile",
      "retries",
      "stored",
      "conditionally",
      "expire",
      "adding",
      "needed",
      "changes",
      "concept",
      "ecommerce",
      "blindly",
      "along",
      "normalization",
      "cdnsettings",
      "means",
      "result",
      "schema",
      "doesn",
      "locations",
      "inprogress",
      "readme",
      "argument",
      "mauchly",
      "world",
      "write_key",
      "accomplish",
      "enrich",
      "utilize",
      "beginning",
      "timeout",
      "detailed",
      "performs",
      "perform",
      "fetched",
      "enables",
      "serve",
      "userid",
      "offline",
      "timeline",
      "start",
      "composed",
      "callback",
      "examples",
      "assumes",
      "management",
      "triggering",
      "match",
      "instance",
      "access",
      "amazing",
      "updates",
      "script",
      "versions",
      "generate",
      "check",
      "plugin",
      "obfuscate",
      "converts",
      "features",
      "longer",
      "captured",
      "visible",
      "incorrect",
      "fields",
      "design",
      "double",
      "tolowercase",
      "before",
      "developers",
      "totango",
      "detect",
      "initialization",
      "recognizable",
      "bootstrap",
      "based",
      "statedgoals",
      "chrome",
      "organization",
      "because",
      "boolean",
      "alleviate",
      "identitystitching",
      "initial",
      "outgoing",
      "plugina",
      "fully",
      "library",
      "other",
      "called",
      "growth",
      "limited",
      "googleanalyticsintegration",
      "assemblage",
      "naming",
      "defaults",
      "chance",
      "previous",
      "final",
      "enterprise",
      "require",
      "innovative",
      "devices",
      "available",
      "usnavy",
      "search",
      "aliasing",
      "deliverystrategy",
      "campaign",
      "could",
      "through",
      "client",
      "customization",
      "blocks",
      "sensitive",
      "example",
      "ready",
      "decision",
      "return",
      "handler",
      "catalog",
      "offer",
      "deeply",
      "experience",
      "request",
      "requests",
      "process",
      "helps",
      "links",
      "sends",
      "config",
      "delete",
      "export",
      "segment",
      "cloudflare",
      "hello",
      "effectiveness",
      "platoon",
      "conditions",
      "groupid",
      "second",
      "confirm",
      "reset",
      "unstable",
      "loads",
      "undefined",
      "remains",
      "functions",
      "receive",
      "technology",
      "parse",
      "queue",
      "maximum",
      "invoke",
      "contact",
      "continues",
      "managing",
      "identities",
      "important",
      "console",
      "abort",
      "learn",
      "combines",
      "price",
      "ajs_group_properties",
      "blockers",
      "including",
      "payload",
      "those",
      "executed",
      "userconsentstobeingtracked",
      "implement",
      "highlighted",
      "clicked",
      "elements",
      "these",
      "something",
      "choosing",
      "location",
      "current",
      "started",
      "handle",
      "attempts",
      "outside",
      "unfortunately",
      "namespace",
      "occurred",
      "large",
      "slightly",
      "selector",
      "throughout",
      "processing",
      "corporate",
      "workarounds",
      "settings",
      "revenue",
      "length",
      "utm_source",
      "having",
      "zendesk",
      "instead",
      "cases",
      "visitors",
      "logout",
      "enqueued",
      "description",
      "values",
      "accuracy",
      "calls",
      "signal",
      "segmentio",
      "utm_campaign",
      "their",
      "passed",
      "impact",
      "jquery",
      "strings",
      "ability",
      "throws",
      "created",
      "await",
      "represent",
      "version",
      "industry",
      "support",
      "manage",
      "dictionary",
      "staging",
      "domains",
      "plugins",
      "tracking",
      "purchase",
      "begin",
      "action",
      "instrumented",
      "outbound",
      "conversion",
      "corporation",
      "usage",
      "default",
      "instances",
      "shows",
      "asynchronously",
      "subset",
      "science",
      "reference",
      "described",
      "polling",
      "actions",
      "above",
      "general",
      "active",
      "intro",
      "deliver",
      "delivers",
      "callbacks",
      "comes",
      "internal",
      "found",
      "global",
      "verify",
      "frameworks",
      "connections",
      "principles",
      "reduces",
      "tells",
      "intercom",
      "questions",
      "adjust",
      "explains",
      "parameters",
      "collect",
      "users",
      "overridden",
      "developer",
      "several",
      "granular",
      "your_write_key",
      "stack",
      "nested",
      "fails",
      "production",
      "overrides",
      "details"
    ],
    "howto_steps": [
      "or maybe shares a link with a friend, who shares it with another friend. All those links would then point back to the same test utm_source as the initial referrer for any purchase. Segment doesn’t validate UTM parameter names. This design supports the flexibility to track both standard parameters (for example, utm_source, utm_medium) and custom parameters defined by users. As a result, all parameters present in the URL collected as is, and are added to the context field without checks for naming conventions or validity. If you want to ensure that only standard UTM parameters (such as, utm_source, utm_medium, utm_campaign, utm_content, utm_term) are included in the context.campaign object, you can implement Source middleware in your Analytics.js setup. For example: window . analytics . addSourceMiddleware (({ payload , next }) => { if ( payload . obj . context ?. campaign ) { const allowedFields = [ \" source \" , \" medium \" , \" term \" , \" campaign \" , \" content \" ]; const campaign = payload . obj . context . campaign ; Object . keys ( campaign ). forEach ( key => { if ( ! allowedFields . includes ( key )) { delete campaign [ key ]; } }); } next ( payload ); }); This middleware filters out any non",
      "!function(){var i=\"analytics\", ...\n  + !function(){var i=\"custom_key\", ... Add destinations from npm Bundle the destinations you want loaded from npm instead of having them loaded from a remote CDN. This enables you to have fewer network requests when adding destinations. To add actions"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/connections/spec/identify/#traits",
    "title": " Spec: Identify | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Spec / Spec: Identify Spec: Identify On this page Example Identities Custom traits The Segment Identify call lets you tie a user to their actions and record traits about them.  It includes a unique User ID and any optional traits you know about the user, like their email, name, and more. Segment University: The Identify Method Check out our high-level overview of the Identify method in Segment University. (Must be logged in to access.) Segment recommends that you make an Identify call: After a user first registers After a user logs in When a user updates their info (for example, they change or add a new address) The first three examples are pretty self-explanatory, but many might ask: why you would call Identify on every page load if you’re storing the userId in the cookie/local storage? Calling Identify in one of Segment’s libraries is one of the first steps to getting started with Segment. Refer to library-specific documentation for more details. Here’s the payload of a typical Identify call with most common fields removed: { \"type\" : \"identify\" , \"traits\" : { \"name\" : \"Peter Gibbons\" , \"email\" : \"peter@example.com\" , \"plan\" : \"premium\" , \"logins\" : 5 }, \"userId\" : \"97980cfea0067\" } And here’s the corresponding JavaScript event that would generate the above payload: analytics . identify ( \" 97980cfea0067 \" , { name : \" Peter Gibbons \" , email : \" peter@example.com \" , plan : \" premium \" , logins : 5 }); Based on the library you use, the syntax in the examples might be different. You can find library-specific documentation on the Sources Overview page. Beyond the common fields, an Identify call has the following fields: Field Type Description traits optional Object Free-form dictionary of traits of the user, like email or name .\n\n  See the Traits field docs for a list of reserved trait names. userId required; optional if anonymousID is set instead String Unique identifier for the user in your database.\n\n  A userId or an anonymousId is required.\n\n  See the Identities docs for more details. Note that these traits coming in from your source events are called custom traits . Example Here’s a complete example of an Identify call: { \"anonymousId\" : \"507f191e810c19729de860ea\" , \"channel\" : \"browser\" , \"context\" : { \"ip\" : \"8.8.8.8\" , \"userAgent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36\" }, \"integrations\" : { \"All\" : false , \"Mixpanel\" : true , \"Salesforce\" : true }, \"messageId\" : \"022bb90c-bbac-11e4-8dfc-aa07a5b093db\" , \"receivedAt\" : \"2015-02-23T22:28:55.387Z\" , \"sentAt\" : \"2015-02-23T22:28:55.111Z\" , \"timestamp\" : \"2015-02-23T22:28:55.111Z\" , \"traits\" : { \"name\" : \"Peter Gibbons\" , \"email\" : \"peter@example.com\" , \"plan\" : \"premium\" , \"logins\" : 5 , \"address\" : { \"street\" : \"6th St\" , \"city\" : \"San Francisco\" , \"state\" : \"CA\" , \"postalCode\" : \"94103\" , \"country\" : \"USA\" } }, \"type\" : \"identify\" , \"userId\" : \"97980cfea0067\" , \"version\" : \"1.1\" } Create your own Identify call Use the following interactive code pen to see what your Identify calls would look like with user-provided information: Sample Identify Name: Please enter your name. Email: Please enter a valid email address. Plan: Please enter a valid Plan name. Logins: Please enter only numbers in the 'Logins' field. Street: Please enter a valid street address, including the street name and number. City: Please enter a valid city name in the 'City' field. State: Please enter a valid two-letter state code in all caps, like 'CA' for California. Zip Code: Please enter a valid five-digit zip code. Country: Please enter a two-letter country code in all caps, like 'US' for United States. Sample Identify Call Sample output goes here! Identities The Identify call specifies a customer identity that you can reference across the customer’s whole lifetime. Every Identify call must have a User ID or an Anonymous ID , depending on how much you know about the user in question. Anonymous ID There are certain cases where you don’t actually know who the user is according to your database, but you still want to be able to tie them to traits, events, or page views. For example, you may not know who a user is when tracking newsletter signups or anonymous page views. In these cases, you should use an Anonymous ID. The Anonymous ID can be any pseudo-unique identifier. For example, on your servers you can use a session id. If you don’t have any readily available identifier, you can always generate a new random one — Segment recommends UUIDv4 format . Segment’s browser and mobile libraries automatically use Anonymous IDs to keep track of users as they navigate around your website or app, so you don’t need to worry about them when using those libraries. Here’s an example of a JavaScript event for an anonymous user: analytics . identify ({ subscriptionStatus : ' inactive ' }); User ID User IDs are a more permanent and robust identifier, like a database ID. Since these IDs are consistent across a customer’s lifetime, Identify calls should include a User ID as often as possible. A User ID is usually the unique identifier that you recognize a user by in your own database. For example, if you’re using MongoDB, User IDs might look something like this: 507f191e810c19729de860ea . Segment recommends using database IDs, in uuidv4 format , instead of email addresses or usernames because database IDs never change. That guarantees that even if the user changes their email address, you can still recognize them as the same person in all of your analytics tools, and you’ll be able to correlate analytics data with your own internal database. Instead of using an email address or a username as a User ID, send them along as custom traits . Custom traits Custom traits are pieces of information you know about a user that are included in an Identify call. These could be demographics like age or gender , account-specific like plan , or even things like whether a user has seen a particular A/B test variation. Segment has reserved some custom traits that have semantic meanings for users, and will handle them in special ways. For example, Segment always expects email to be a string of the user’s email address. Segment sends this on to destinations like Mailchimp that require an email address for their tracking. Only use reserved traits for their intended meaning. Reserved custom traits Segment has standardized: Trait Type Description address Object Street address of a user optionally containing: city , country , postalCode , state , or street age Number Age of a user avatar String URL to an avatar image for the user birthday Date User’s birthday company Object Company the user represents, optionally containing: name (String), id (String or Number), industry (String), employee_count (Number) or plan (String) createdAt Date Date the user’s account was first created. Segment recommends using ISO-8601 date strings. description String Description of the user email String Email address of a user firstName String First name of a user gender String Gender of a user id String Unique ID in your database for a user lastName String Last name of a user name String Full name of a user. If you only pass a first and last name Segment automatically fills in the full name for you. phone String Phone number of a user title String Title of a user, usually related to their position at a specific company. Example: “VP of Engineering” username String User’s username. This should be unique to each user, like the usernames of Twitter or GitHub. website String Website of a user You might be used to some destinations recognizing special traits by slightly different names. For example, Mixpanel recognizes a $created trait when the user’s account was first created, while Intercom recognizes the same trait as created_at instead. Segment attempts to handle all the destination-specific conversions for you automatically. If you need help understanding if a specific field will be converted to a destination, take a look at Segment’s open source integration code , view the destination’s documentation, or contact Segment support . You can pass these reserved traits using camelCase or snake_case , so in JavaScript you can match the rest of your camelCase code by sending firstName , while in Ruby you can match your snake-case code by sending first_name . That way the API never seems alien to your code base. Keep in mind that not all destinations support these reserved traits, so sending these traits in camelCase and snake_case can result in two sets of traits in other destinations. This page was last modified: 23 Apr 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Example Identities Custom traits Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "signups",
      "website",
      "birthday",
      "match",
      "applewebkit",
      "access",
      "pretty",
      "lifetime",
      "javascript",
      "record",
      "assistance",
      "robust",
      "typical",
      "updates",
      "visit",
      "traits",
      "generate",
      "check",
      "custom",
      "meaning",
      "firstname",
      "fields",
      "source",
      "might",
      "names",
      "database",
      "messageid",
      "based",
      "analytics",
      "twitter",
      "subscriptionstatus",
      "following",
      "identifier",
      "change",
      "chrome",
      "customer",
      "there",
      "created_at",
      "around",
      "because",
      "removed",
      "97980cfea0067",
      "about",
      "false",
      "pseudo",
      "title",
      "507f191e810c19729de860ea",
      "integrations",
      "easiest",
      "websites",
      "other",
      "library",
      "called",
      "identity",
      "session",
      "mozilla",
      "growth",
      "interactive",
      "addresses",
      "uuidv4",
      "meanings",
      "states",
      "problems",
      "permanent",
      "three",
      "intel",
      "require",
      "converted",
      "possible",
      "available",
      "things",
      "anonymous",
      "documentation",
      "navigate",
      "could",
      "position",
      "valid",
      "example",
      "integrate",
      "specific",
      "state",
      "gecko",
      "sources",
      "postalcode",
      "number",
      "using",
      "macintosh",
      "snake_case",
      "improve",
      "request",
      "trait",
      "guarantees",
      "specifies",
      "related",
      "storage",
      "overview",
      "modified",
      "sentat",
      "sends",
      "calling",
      "segment",
      "steps",
      "information",
      "username",
      "servers",
      "recognizing",
      "california",
      "different",
      "events",
      "include",
      "94103",
      "storing",
      "cookie",
      "numbers",
      "premium",
      "never",
      "data",
      "coming",
      "receivedat",
      "intended",
      "libraries",
      "contact",
      "first_name",
      "usernames",
      "street",
      "identities",
      "common",
      "francisco",
      "certain",
      "github",
      "string",
      "useragent",
      "output",
      "destination",
      "complete",
      "10_9_5",
      "including",
      "included",
      "channel",
      "avatar",
      "payload",
      "those",
      "university",
      "whether",
      "handle",
      "explanatory",
      "address",
      "these",
      "every",
      "question",
      "started",
      "something",
      "random",
      "browser",
      "standardized",
      "engineering",
      "would",
      "attempts",
      "pieces",
      "slightly",
      "helpful",
      "where",
      "destinations",
      "optional",
      "reserved",
      "timestamp",
      "account",
      "conversions",
      "registers",
      "instead",
      "cases",
      "email",
      "inactive",
      "while",
      "object",
      "always",
      "mongodb",
      "description",
      "khtml",
      "recommends",
      "provided",
      "calls",
      "readily",
      "camelcase",
      "company",
      "beyond",
      "their",
      "snake",
      "method",
      "alien",
      "usually",
      "sending",
      "depending",
      "employee_count",
      "fills",
      "strings",
      "according",
      "local",
      "createdat",
      "created",
      "image",
      "refer",
      "includes",
      "field",
      "version",
      "please",
      "digit",
      "united",
      "letter",
      "whole",
      "demographics",
      "special",
      "industry",
      "unique",
      "gender",
      "dictionary",
      "phone",
      "recognizes",
      "optionally",
      "support",
      "track",
      "tracking",
      "identify",
      "salesforce",
      "after",
      "containing",
      "since",
      "peter",
      "represents",
      "thanks",
      "understanding",
      "anonymousid",
      "context",
      "automatically",
      "format",
      "mobile",
      "required",
      "lastname",
      "safari",
      "logins",
      "logged",
      "reference",
      "semantic",
      "actions",
      "above",
      "aa07a5b093db",
      "level",
      "changes",
      "across",
      "should",
      "along",
      "api",
      "internal",
      "integration",
      "views",
      "first",
      "connections",
      "result",
      "often",
      "newsletter",
      "gibbons",
      "intercom",
      "create",
      "questions",
      "mixpanel",
      "syntax",
      "23t22",
      "correlate",
      "person",
      "recognize",
      "tools",
      "seems",
      "feedback",
      "enter",
      "corresponding",
      "users",
      "userid",
      "event",
      "particular",
      "consistent",
      "actually",
      "examples",
      "still",
      "sample",
      "variation",
      "expects",
      "mailchimp",
      "country",
      "worry",
      "022bb90c",
      "details"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/unify/traits/custom-traits/",
    "title": " Custom Traits | Segment Documentation",
    "platform": "segment",
    "content": "Home / Unify / Traits / Custom Traits Custom Traits On this page Comparing trait types Using custom traits Reserved custom traits Custom traits are user or account traits collected from the Identify calls you send to Segment. For example, these could be demographics like age or gender , account-specific like plan , or even things like whether a user has seen a particular A/B test variation. From your sources, send custom traits as pieces of information that you know about a user in an Identify call. As opposed to computed traits which are computed from your source data, or SQL Traits which are computed from warehouse data, custom traits are created from source events you pass into Segment and have no trait limits. Comparing trait types View the table below to better understand how Segment collects custom, computed, and SQL traits. You can use the Profile explorer ( Unify > Profile explorer ) to view traits attached to a profile. Trait type Description Custom traits Traits created from source events you pass into Segment. From your sources, send custom traits as pieces of information that you know about a user in an Identify call. Computed traits Traits collected from computations off of event and event property data from your sources. Create user or account-level calculations like most_viewed_page or total_num_orders for a customer. Learn more by viewing types of computed traits . SQL traits Traits created by running SQL queries on data in your warehouse. SQL traits are a type of computed trait. SQL traits help you import traits from your data warehouse back into Segment to build audiences or enhance data that you send to other destinations. Using custom traits Here’s the payload of a typical Identify call with custom traits (with most common fields removed): { \"type\" : \"identify\" , \"traits\" : { \"name\" : \"John Smith\" , \"email\" : \"john@example.com\" , \"plan\" : \"premium\" , \"logins\" : 5 }, \"userId\" : \"97980cfea0067\" } And here’s the corresponding JavaScript event that would generate the above payload: analytics . identify ( \" 97980cfea0067 \" , { name : \" John Smith \" , email : \" john@example.com \" , plan : \" premium \" , logins : 5 }); Any source event where there’s a traits object and key value pairs generates custom traits. Custom traits are mutable and update to the latest value seen by the user’s Identify events. When an audience that previously generated Identify events is deleted, the data for the audience key is still attached to profiles that entered the audience and becomes visible in Segment as a custom trait. Reserved custom traits Segment has reserved some custom traits that have semantic meanings for users, and will handle them in special ways. For example, Segment always expects email to be a string of the user’s email address. Segment sends this on to destinations like Mailchimp that require an email address for their tracking. Only use reserved custom traits for their intended meaning. Reserved custom traits Segment has standardized: Trait Type Description address Object Street address of a user optionally containing: city , country , postalCode , state , or street age Number Age of a user avatar String URL to an avatar image for the user birthday Date User’s birthday company Object Company the user represents, optionally containing: name (String), id (String or Number), industry (String), employee_count (Number) or plan (String) createdAt Date Date the user’s account was first created. Segment recommends using ISO-8601 date strings. description String Description of the user email String Email address of a user firstName String First name of a user gender String Gender of a user id String Unique ID in your database for a user lastName String Last name of a user name String Full name of a user. If you only pass a first and last name Segment automatically fills in the full name for you. phone String Phone number of a user title String Title of a user, usually related to their position at a specific company. Example: “VP of Engineering” username String User’s username. This should be unique to each user, like the usernames of Twitter or GitHub. website String Website of a user To learn more about using an Identify call to tie custom traits to profiles, visit Segment’s Identify documentation . This page was last modified: 12 Apr 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Comparing trait types Using custom traits Reserved custom traits Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "birthday",
      "calculations",
      "audience",
      "website",
      "visit",
      "javascript",
      "unify",
      "typical",
      "traits",
      "generate",
      "computed",
      "explorer",
      "smith",
      "custom",
      "visible",
      "meaning",
      "firstname",
      "source",
      "fields",
      "database",
      "analytics",
      "twitter",
      "there",
      "change",
      "customer",
      "removed",
      "97980cfea0067",
      "about",
      "entered",
      "title",
      "easiest",
      "other",
      "becomes",
      "growth",
      "meanings",
      "problems",
      "generates",
      "most_viewed_page",
      "require",
      "things",
      "previously",
      "documentation",
      "could",
      "position",
      "example",
      "types",
      "which",
      "integrate",
      "specific",
      "using",
      "state",
      "sources",
      "pairs",
      "postalcode",
      "number",
      "improve",
      "property",
      "request",
      "websites",
      "trait",
      "related",
      "modified",
      "below",
      "latest",
      "sends",
      "segment",
      "information",
      "username",
      "table",
      "events",
      "premium",
      "comparing",
      "data",
      "intended",
      "collects",
      "contact",
      "update",
      "usernames",
      "street",
      "common",
      "github",
      "learn",
      "string",
      "import",
      "avatar",
      "payload",
      "whether",
      "handle",
      "these",
      "address",
      "engineering",
      "assistance",
      "started",
      "standardized",
      "would",
      "helpful",
      "collected",
      "pieces",
      "warehouse",
      "where",
      "destinations",
      "reserved",
      "account",
      "build",
      "better",
      "understand",
      "email",
      "object",
      "always",
      "description",
      "recommends",
      "calls",
      "company",
      "their",
      "usually",
      "employee_count",
      "computations",
      "fills",
      "strings",
      "viewing",
      "createdat",
      "profiles",
      "created",
      "queries",
      "total_num_orders",
      "image",
      "attached",
      "demographics",
      "industry",
      "special",
      "running",
      "unique",
      "gender",
      "phone",
      "support",
      "optionally",
      "tracking",
      "identify",
      "deleted",
      "containing",
      "represents",
      "thanks",
      "automatically",
      "mobile",
      "mutable",
      "lastname",
      "logins",
      "opposed",
      "semantic",
      "above",
      "level",
      "should",
      "first",
      "enhance",
      "create",
      "questions",
      "profile",
      "value",
      "feedback",
      "tools",
      "corresponding",
      "users",
      "userid",
      "limits",
      "event",
      "particular",
      "variation",
      "still",
      "expects",
      "mailchimp",
      "country",
      "audiences",
      "generated"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "integration",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#alias",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/#identify",
    "title": " Analytics.js Source | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Libraries / Website / Analytics.js Source Analytics.js Source Community x Maintenance x Flagship ✓ ? Flagship libraries offer the most up-to-date functionality on Segment’s most popular platforms. Segment actively maintains flagship libraries, which benefit from new feature releases and ongoing development and support. On this page Getting started Benefits of Analytics.js Basic tracking methods Utility methods Managing data flow with the Integrations object Retries Batching Plugins and source middleware Video player plugins Cross-subdomain analytics UTM Tracking Analytics.js performance Tracking Blockers and Browser Privacy Settings Installing the library under a custom global namespace Add destinations from npm Segment Inspector Example uses External dependencies Analytics.js enables you to send your data to hundreds of destination tools without having to learn, test, or use a new API every time. Segment’s Analytics.js library is fully open-source and can be viewed on GitHub . Getting started Use the Analytics.js QuickStart Guide to learn how to add Analytics.js to your site. Once you’ve installed the library, read on for the detailed API reference. Benefits of Analytics.js Analytics.js provides two key benefits over the previous version. Performance Analytics.js reduces page load time and improves site performance. Its package size is ~70% smaller than its predecessor, the classic version of Analytics.js. Many factors impact page load time, including network conditions, hosting locations, and page weight. Page weight for each customer integration varies based on the number of device-mode destinations that are enabled for each source. The more device-mode destinations that are enabled, the more data gets added to the library, which will impact the weight of the library. Developer experience Analytics.js improves developer experience by introducing new ways for developers to augment events throughout the event timeline. For example, developers can augment events either before or after an event occurs, or while the event is in-flight. For example, you can use Analytics.js to build features that: Ensure you have user consent to track before an event fires Enrich events with customer or page context while in-flight with middleware Check an event for errors after the event is sent to Segment Basic tracking methods The basic tracking methods below serve as the building blocks of your Segment tracking. They include Identify , Track , Page , Group , and Alias . These methods correspond with those used in the Segment Spec . The documentation on this page explains how to use these methods in Analytics.js. Good to know For any of the methods described in this page, you can replace the properties in the code samples with variables that represent the data collected. Identify Use the identify method to link your users and their actions, to a recognizable userId and traits . You can see an identify example in the Quickstart guide or find details on the identify method payload . `identify` and anonymous visitors Segment recommends against using identify for anonymous visitors to your site. Analytics.js automatically retrieves an anonymousId from localStorage or assigns one for new visitors, and then attaches it to all page and track events both before and after an identify . The Identify method follows the format below: analytics . identify ([ userId ], [ traits ], [ options ], [ callback ]); The Identify call has the following fields: Field Type Description userId optional String The database ID for the user. If you don’t know who the user is yet, you can omit the userId and just record traits . You can read more about identities in the identify reference . traits optional Object A dictionary of traits you know about the user, like email or name . You can read more about traits in the identify reference . options optional Object A dictionary of options. For example, enable or disable specific destinations for the call. Note: If you do not pass a traits object, pass an empty object (as an ‘{}’) before options . callback optional Function A function executed after a timeout of 300 ms, giving the browser time to make outbound requests first. By default, Analytics.js caches traits in the browser’s localStorage and attaches them to each Identify call. For example, you might call Identify when someone signs up for a newsletter but hasn’t yet created an account on your site. The example below shows an Identify call (using hard-coded traits) that you might send in this case. analytics . identify ({ nickname : ' Amazing Grace ' , favoriteCompiler : ' A-0 ' , industry : ' Computer Science ' }); Then, when the user completes the sign up process, you might see the following: analytics . identify ( ' 12091906-01011992 ' , { name : ' Grace Hopper ' , email : ' grace@usnavy.gov ' }); The traits object for the second call also includes nickname , favoriteCompiler , and industry . You may omit both traits and options, and pass the callback as the second argument. analytics . identify ( ' 12091906-01011992 ' , function (){ // Do something after the identify request has been sent // Note: site-critical functionality should not depend on your analytics provider }); Track The Track method lets you record actions your users perform. You can see a track example in the Quickstart guide or find details on the track method payload . The Track method follows the format below: analytics . track ( event , [ properties ], [ options ], [ callback ]); The track call has the following fields: Field Type Description event String The name of the event you’re tracking. You can read more about the track method and recommended event names. properties Object Optional. A dictionary of properties for the event. If the event was 'Added to Cart' , it might have properties like price and productType . options Object Optional. A dictionary of options. For example, enable or disable specific destinations for the call. Note: If you do not pass a properties object, pass an empty object (like ‘{}’) before options . callback Function Optional. A function that runs after a timeout of 300 ms, giving the browser time to make outbound requests first. The only required argument in Analytics.js is an event name string . You can read more about how Segment recommends you name events . Example Track call: analytics . track ( ' Article Completed ' , { title : ' How to Create a Tracking Plan ' , course : ' Intro to Analytics ' , }); For more information about choosing which events to track, event naming, and more, check out Analytics Academy . The only required argument on Track calls in Analytics.js is an event name string. Read more about how Segment recommends naming your events . Track link trackLink is a helper method that attaches the track call as a handler to a link.\nWith trackLink , Analytics.js inserts a timeout of 300 ms to give the track call more time. This is useful when a page would redirect before the track method could complete all requests. The trackLink method follows the format below. analytics . trackLink ( element , event , [ properties ]) Field Type Description element(s) Element or Array DOM element to bind with track method. You may pass an array of elements or jQuery objects. Note: This must be an element, not a CSS selector. event String or Function The name of the event, passed to the track method. Or a function that returns a string to use as the name of the track event. properties optional Object or Function A dictionary of properties to pass with the track method or a function that returns an object to use as the properties of the event. Example: var link = document . getElementById ( ' free-trial-link ' ); analytics . trackLink ( link , ' Clicked Free-Trial Link ' , { plan : ' Enterprise ' }); Track form trackForm is a helper method that binds a track call to a form submission.\nThe trackForm method inserts a timeout of 300 ms to give the track call more time to complete. This is useful to prevent a page from redirecting before the track method could complete all requests. The trackForm method follows the format below. analytics . trackForm ( form , event , [ properties ]) Field Type Description form(s) Element or Array The form element to track or an array of form elements or jQuery objects. Note: trackForm takes an element, not a CSS selector. Segment recommends that you wait until the DOM loads before passing the form element. event String or Function The name of the event, passed to the track method. Or a function that returns a string to use as the name of the track event. properties optional Object or Function A dictionary of properties to pass with the track method. Or a function that returns an object to use as the properties of the event. Example: var form = document . getElementById ( ' signup-form ' ); analytics . trackForm ( form , ' Signed Up ' , { plan : ' Premium ' , revenue : 99.00 }); Page The Page method lets you record page views on your website, along with optional extra information about the page viewed by the user. Because some Destinations require a page call to instantiate their libraries, you must call page at least once per page load. You can call it more than once if needed, for example, on virtual page changes in a single page app. See the implementation guide for more information about calling the Page method . Analytics.js includes a Page call by default as the final line in the Analytics.js snippet . You can update this page call within the guidelines below. The page method follows the format below. analytics . page ([ category ], [ name ], [ properties ], [ options ], [ callback ]); The page call has the following fields: Field Type Description category optional String The category of the page. Useful for cases like ecommerce where many pages might live under a single category. Note: if you pass only one string to page it is assumed to be name . You must include a name to send a category . name optional String The name of the page. properties optional Object A dictionary of properties of the page. Note: Analytics.js collects url , title , referrer and path are automatically. This defaults to a canonical url , if available, and falls back to document.location.href . options optional Object A dictionary of options. For example, enable or disable specific destinations for the call. Note: If you do not pass a properties object, pass an empty object (like ‘{}’) before options . callback optional Function A function that runs after a timeout of 300 ms, giving the browser time to make outbound requests first. However, this function might not execute if one of the device-mode libraries has been blocked from loading. Default page properties Analytics.js adds properties to each page call. analytics . page ( ' Pricing ' ); Segment adds the following information: analytics . page ( ' Pricing ' , { title : ' Segment Pricing ' , url : ' https://segment.com/pricing ' , path : ' /pricing ' , referrer : ' https://segment.com/warehouses ' }); You can override these values by explicitly setting them in your calls. For example: analytics . page ( ' Pricing ' , { title : ' My Overridden Title ' , path : ' /pricing/view ' }); Translates to: analytics . page ( ' Pricing ' , { title : ' My Overridden Title ' , url : ' https://segment.com/pricing ' , path : ' /pricing/view ' , referrer : ' https://segment.com/warehouses ' }); Segment sets the path and url property to the value of the canonical element on your page. If a canonical element is not set, the values will be set from the browser. Group The Group method associates an identified user with a company, organization, project, workspace, team, tribe, platoon, assemblage, cluster, troop, gang, party, society or any other collective noun you come up with for the same concept. This is useful for tools like Intercom , Preact , and Totango , as it ties the user to a group of other users. The Group method follows the format below. analytics . group ( groupId , [ traits ], [ options ], [ callback ]); The Group call has the following fields: Field Type Description groupId String The Group ID to associate with the current user. traits optional Object A dictionary of traits for the group. Example traits for a group include address , website , and employees . options optional Object A dictionary of options. For example, enable or disable specific destinations for the call. Note: If you do not pass a properties object, pass an empty object (like ‘{}’) before options . callback optional Function A function that runs after a timeout of 300 ms, giving the browser time to make outbound requests first. Example group call: analytics . group ( ' UNIVAC Working Group ' , { principles : [ ' Eckert ' , ' Mauchly ' ], site : ' Eckert–Mauchly Computer Corporation ' , statedGoals : ' Develop the first commercial computer ' , industry : ' Technology ' }); By default, Analytics.js caches group traits in the browser’s local storage and attaches them to each group call, similar to how the identify method works. Find more details about group , including the group payload, in the Group Spec . Alias The Alias method combines two unassociated user identities. Segment usually handles aliasing automatically when you call identify on a user, however some tools require an explicit alias call. This is an advanced method, but it’s required to manage user identities successfully in some Segment destinations like Kissmetrics and Mixpanel . The Alias method follows the format below: analytics . alias ( userId , [ previousId ], [ options ], [ callback ]); The Alias call has the following fields: Field Type Description userId String The new user ID you want to associate with the user. previousId optional String The previous ID that the user was recognized by. This defaults to the currently identified user’s ID. options optional Object A dictionary of options. For example, enable or disable specific destinations for the call. callback optional Function A function that is executed after a timeout of 300 ms, giving the browser time to make outbound requests first. For more details about Alias, including the alias call payload , check out the Segment Spec . Utility methods The Analytics.js utility methods help you change how Segment loads on your page. They include: Load Ready Debug On (Emitter) Timeout Reset (Logout) Keepalive Load The load method is also available when you load analytics.js through the NPM package . You can load a buffered version of analytics.js that requires you to call load explicitly before analytics.js initiates any network activity. This is useful if you want to, for example, wait for user consent before you fetch tracking destinations or send buffered events to Segment. Call load one time only. export const analytics = new AnalyticsBrowser () analytics . identify ( \" hello world \" ) if ( userConsentsToBeingTracked ) { analytics . load ({ writeKey : ' <YOUR_WRITE_KEY> ' }) // destinations loaded, enqueued events are flushed } You can also use load if you fetch some settings asynchronously. const analytics = new AnalyticsBrowser () fetchWriteKey (). then ( writeKey => analytics . load ({ writeKey })) analytics . identify ( \" hello world \" ) Ready The ready method lets you pass in a method that gets called after Analytics.js finishes initializing and after all enabled device-mode destinations load. It’s like jQuery’s ready method , except for Destinations. Because it doesn’t fire until all enabled device-mode destinations are loaded, it can’t be used to change configuration options for downstream SDKs. That can only be done if the SDK is loaded natively. The ready method isn’t invoked if any Destination throws an error (for example, for an expired API key, incorrect settings configuration, or when a Destination is blocked by the browser) during initialization. If you want to check when Analytics.js has loaded, you can look at the value of window.analytics.initialized . When it’s true, the library has successfully initialized, even if some destinations are blocked. Note : window.analytics.initialized is a simple boolean, not an event or a pub/sub system. This means you can’t subscribe to changes in its value. If you need to detect when it changes from false to true , you must set up a polling mechanism to monitor the value. The code in the ready function only executes after ready is emitted. If you want to access end-tool library methods that do not match any Analytics.js methods, like adding an extra setting to Mixpanel, you can use a ready callback so that you’re guaranteed to have access to the Mixpanel object, like so: analytics . ready ( function () { window . mixpanel . set_config ({ verbose : true }); }); The ready method uses the following format: analytics . ready ( callback ); The ready method has the following fields: Field Type Description callback Function A function to be executed after all enabled destinations have loaded. Debug Calling the debug method turns on debug mode, which logs helpful messages to the console. Subsequent Segment events generate messages in the developer console after you invoke debug . Enable: analytics . debug ( true ); Disable: analytics . debug ( false ); Emitter The global analytics object emits events whenever you call alias , group , identify , track , or page . Use the on method to set listeners for these events and run your own custom code. This can be useful if you want to send data to a service for which Segment doesn’t have a destination. analytics . on ( method , callback ); Field Type Description method String Name of the method to listen for. callback Function A function to execute after each emitted method, taking three arguments: event , properties , options . Example: analytics . on ( ' track ' , function ( event , properties , options ) { bigdataTool . push ([ ' recordEvent ' , event ]); }); This method emits events before they are processed by the Segment integration, and may not include some of the normalization Segment performs on the client before sending the data to the Segment servers. Note Page event properties are stored in the options object. Extending timeout The timeout method sets the length (in milliseconds) of callbacks and helper functions. This is useful if you have multiple scripts that need to fire in your callback or trackLink , trackForm helper function. The example below sets the timeout to 500 ms. analytics . timeout ( 500 ); If you’re triggering ad network conversion pixels, Segment recommends extending timeout to 500 ms to account for slow load times. Reset or log out Calling reset resets the id , including anonymousId , and clears traits for the currently identified user and group. analytics . reset (); The reset method only clears the cookies and localStorage created by Segment. It doesn’t clear data from other integrated tools, as those native libraries might set their own cookies to manage user tracking, sessions, and manage state. To completely clear out the user session, see the documentation provided by those tools. Segment doesn’t share localStorage across subdomains. If you use Segment tracking on multiple subdomains, you must call analytics.reset() for each subdomain to completely clear out the user session. Keepalive You can utilize this in instances where an API call fires on a hard redirect, and are missed from getting captured in Segment. If you set this flag to true, it enables firing the event before the redirect. This is available for all events. You can read more about this in the Github PR . Managing data flow with the Integrations object Tip : You can change how your data flows in several different ways without having to change your code. See Filtering Data to learn more. You can pass an integrations object in the options of Alias, Group, Identify, Page, and Track methods to send data to only the selected destinations. By default, all Destinations are enabled. The example below sends a message only to Intercom and Google Analytics. analytics . identify ( ' user_123 ' , { email : ' jane.kim@example.com ' , name : ' Jane Kim ' }, { integrations : { ' All ' : false , ' Intercom ' : true , ' Google Analytics ' : true } }); 'All': false tells Segment not to send data to any Destinations by default, unless they’re explicitly listed as true in the next lines. As an opposite example, the snippet below sends a message to all integrations except Intercom and Google Analytics. analytics . identify ( ' user_123 ' , { email : ' jane.kim@example.com ' , name : ' Jane Kim ' }, { integrations : { ' Intercom ' : false , ' Google Analytics ' : false } }); You don’t need to include 'All': true in this call because it’s implied as the default behavior. Instead, only list the destinations that you want to exclude, with a false flag for each. Destination flags are case sensitive and match the destination’s name in the docs (for example, “AdLearn Open Platform”, “awe.sm”, “Mailchimp”, etc). If a Destination has more than one acceptable name, this appears in the documentation for that destination. Business tier customers can filter Track calls from the Source Schema page in the Segment UI. Segment recommends that you use the UI to simplify filter management and make updates without changing your site’s code. Load options Note: To use this feature, you must be on snippet version 4.1.0 or later. You can get the latest version of the snippet from the Analytics.js Quickstart . You can modify the .load method in Analytics.js (the second line of the snippet) to take a second argument. If you pass an object with an integrations dictionary, then Segment only loads the integrations in that dictionary that are marked as enabled with the boolean value true . You can only call .load on page load, or reload (refresh). If you modify the .load method between page loads, it doesn’t have any effect until the page is reloaded. For example: analytics . load ( ' writekey ' , { integrations : { All : false , ' Google Analytics ' : true , ' Segment.io ' : true } }) This way, you can conditionally load integrations based on what customers opt into on your site. The example below shows how you might load only the tools that the user agreed to use. onConsentDialogClosed ( function ( consentedTools ){ analytics . load ( ' writekey ' , { integrations : consentedTools }) }) Bundle obfuscation You can also add an obfuscate property to the object in the second parameter, which obscures the URL from which your integrations and destination actions are loaded. This helps prevent words that are flagged by ad blockers to not be detected in your URL, enabling the integration to properly load. For example: analytics . load ( ' writekey ' , { obfuscate : true }) The obfuscate value is false by default. ISO string conversion By default, the Analytics.js library will convert ISO8061 strings to a Date object before passing it to downstream device-mode integrations. If you would like to disable this functionality and send those strings as they are passed to the event, you can use the load method to pass in the disableAutoISOConversion option. For example: analytics . load ( ' writekey ' , { disableAutoISOConversion : true }) Client hints Some userAgent strings are frozen and contain less information. If you would like to request more information when it’s available, you can pass an array of strings with fields you would like to request to the highEntropyValuesClientHints option. The example array below contains all possible values. For example: analytics . load ( ' writekey ' , { highEntropyValuesClientHints : [ ' architecture ' , ' bitness ' , ' model ' , ' platformVersion ' , ' uaFullVersion ' , ' fullVersionList ' , ' wow64 ' ] }) Disabling For testing or staging environments, it can be useful to disable your SDK to ensure no events send. If disable: true is passed, all analytics method calls will be a no-op, and no network calls will be initiated. analytics . load ( ' writekey ' , { disable : true }) For wrapper/plugin authors: if you have a use case where you need special access to the CDN Settings (for example, consent management), you can also pass a function. This API waits for cdnSettings to be fetched. Keep in mind that cdnSettings is an unstable object. analytics . load ( ' writekey ' , { disable : ( cdnSettings ) => true }) Retries When enabled, Analytics.js automatically retries network and server errors. With persistent retries, Analytics.js can: Support offline tracking . Analytics.js queues your events and delivers them when the user comes back online. Better handle network issues . When your application can’t connect to the Segment API, Segment continues to store the events on the browser to prevent data loss. Analytics.js stores events in localStorage and falls back to in-memory storage when localStorage is unavailable. It retries up to 10 times with an incrementally increasing back-off time between each retry. Analytics.js queues up to 100 events at a time to avoid using too much of the device’s local storage. See the destination Retries documentation to learn more. Batching Batching is the ability to group multiple requests or calls into one request or API call. All requests sent within the same batch have the same receivedAt time. With Analytics.js, you can send events to Segment in batches. Sending events in batches enables you to have: Delivery of multiple events with fewer API calls Fewer errors if a connection is lost because an entire batch will retry at once rather than multiple calls retrying at random times. Setup You can start batching by changing the strategy to \"batching\" and the parameters for size and timeout within the load method in the analytics object. Batching requires both parameters. analytics . load ( \" <write_key> \" , { integrations : { \" Segment.io \" : { deliveryStrategy : { strategy : \" batching \" , config : { size : 10 , timeout : 5000 } } } } }); You can check to see if batching works by checking your source’s debugger in Sources > Debugger . When you select an event and view the Raw code, the receivedAt time of all the events in the batch should be the same. Batch size The batch size is the threshold that forces all batched events to be sent once it’s reached. For example, size: 10 means that after triggering 10 events, Analytics.js sends those 10 events together as a batch to Segment. Your total batched events can’t exceed the maximum payload size of 500 KB, with a limit of 32 KB for each event in the batch. If the 500 KB limit is reached, the batch will be split. Timeout timeout is the number of milliseconds that forces all events queued for batching to be sent, regardless of the batch size, once it’s reached. For example, timeout: 5000 sends every event in the batch to Segment once 5 seconds passes. Batching FAQs Will Analytics.js deliver events that are in the queue when a user closes the browser? Analytics.js does its best to deliver the queued events before the browser closes, but the delivery isn’t guaranteed. Upon receiving the beforeunload browser event, Analytics.js attempts to flush the queue using fetch requests with keepalive set to true. Since the max size of keepalive payloads is limited to 64 KB, if the queue size is bigger than 64 KB at the time the browser closes, then there is a chance of losing a subset of the queued events. Reducing the batch size or timeout will alleviate this issue, but that will be a trade-off decision. Can other destinations receive batched events? No, this batching only impacts events sent to Segment. Once the batch reaches Segment, it’s split up and follows the normal path of an event. Will batching impact billing or throughput? No, batching won’t impact billing or throughput. Can I use batching with partner integrations? Partner integrations don’t support batching as all other partner integrations run one event at a time. Only Segment.io events support batched delivery. Does batching work on all browsers? Batching won’t work on Internet Explorer. If a source has retry enabled, does the retry behavior change when using batching? Batching delays retries, as events that are queued for batching aren’t retried until a batch delivery fails. When using Middlewares as a source and destination, is there a change in behavior when using batching? No, there is no change in behavior to Middlewares. When using Segment features (Schema filtering, integrations object, Protocols) to filter events from going to destinations (device and cloud-mode), will batching impact the filtering of events? No, there is no impact to how events filter. Plugins and source middleware When you develop against Analytics 2.0, the plugins you write can augment functionality, enrich data, and control the flow and delivery of events. From modifying event payloads to changing analytics functionality, plugins and middleware help to speed up the process of getting things done. Plugins and source middleware accomplish the same thing, but plugins are significantly more powerful (but more verbose to implement). For basic use cases like adding event fields or dropping specific events, use source middleware . If you need more granular control of the lifecycle, or want to be able to abort the Segment initialization, you should use plugins . Source Middleware Source middleware runs before any other plugins. You can use this to enrich or drop an event. Example usage of addSourceMiddleware Here are some examples of using addSourceMiddleware for enrichment and validation. Enrichment analytics . addSourceMiddleware (({ payload , next }) => { const { event } = payload . obj . context if ( event . type === ' track ' ) { event . event . toLowerCase () } next ( payload ) }); Validation analytics . addSourceMiddleware (({ payload , next }) => { const { event } = payload . obj . context if ( ! isValid ( event )) { return null // event is dropped } next ( payload ) }); Advanced Plugin API For advanced modification to the event pipeline. Type Details before Executes before event processing begins. These are plugins that run before any other plugins run. Thrown errors here can block the event pipeline. Source middleware added via addSourceMiddleware is treated as a before plugin. enrichment Executes as the first level of event processing. These plugins modify an event. Thrown errors here can block the event pipeline. destination Executes as events begin to pass off to destinations. Segment.io is implemented as a destination plugin. Thrown errors here will not block the event pipeline. after Executes after all event processing completes. You can use this to perform cleanup operations. utility Executes only once during the analytics.js bootstrap. Gives you access to the analytics instance via the plugin’s load() method. This doesn’t allow you to modify events. Example plugins Here’s an example of a plugin that converts all track event names to lowercase before the event goes through the rest of the pipeline: export const lowercase : Plugin = { name : ' Lowercase events ' , type : ' enrichment ' , version : ' 1.0.0 ' , isLoaded : () => true , load : () => Promise . resolve (), track : ( ctx ) => { ctx . updateEvent ( ' event ' , ctx . event . event . toLowerCase ()) return ctx } } const identityStitching = () => { let user const identity = { // Identifies your plugin in the Plugins stack. // Access `window.analytics.queue.plugins` to see the full list of plugins name : ' Identity Stitching ' , // Defines where in the event timeline a plugin should run type : ' enrichment ' , version : ' 0.1.0 ' , // use the `load` hook to bootstrap your plugin // The load hook will receive a context object as its first argument // followed by a reference to the analytics.js instance from the page load : async ( _ctx , ajs ) => { user = ajs . user () }, // Used to signal that a plugin has been property loaded isLoaded : () => user !== undefined , // Applies the plugin code to every `identify` call in Analytics.js // You can override any of the existing types in the Segment Spec. async identify ( ctx ) { // Request some extra info to enrich your `identify` events from // an external API. const req = await fetch ( `https://jsonplaceholder.typicode.com/users/ ${ ctx . event . userId } ` ) const userReq = await req . json () // ctx.updateEvent can be used to update deeply nested properties // in your events. It's a safe way to change events as it'll //  create any missing objects and properties you may require. ctx . updateEvent ( ' traits.custom ' , userReq ) user . traits ( userReq ) // Every plugin must return a `ctx` object, so that the event // timeline can continue processing. return ctx }, } return identity } // Registers Segment's new plugin into Analytics.js await window . analytics . register ( identityStitching ()) Here’s an example of a utility plugin that allows you to change the format of the anonymous_id cookie: window . analytics . ready (() => { window . analytics . register ({ name : ' Cookie Compatibility ' , version : ' 0.1.0 ' , type : ' utility ' , load : ( _ctx , ajs ) => { const user = ajs . user () const cookieJar = user . cookies const cookieSetter = cookieJar . set . bind ( cookieJar ) // blindly convert any values into JSON strings cookieJar . set = ( key , value , opts ) => cookieSetter ( key , JSON . stringify ( value ), opts ) // stringify any existing IDs user . anonymousId ( user . anonymousId ()) user . id ( user . id ()) }, isLoaded : () => true }) }) You can view Segment’s existing plugins to see more examples. Register a plugin Registering plugins enable you to modify your analytics implementation to best fit your needs. You can register a plugin using this: // A promise will resolve once the plugins have been successfully loaded into Analytics.js // You can register multiple plugins at once by using the variable args interface in Analytics.js await window . analytics . register ( pluginA , pluginB , pluginN ) Video player plugins Segment offers video player ‘plugins’ so you can quickly collect video events using Analytics.js. See the specific documentation below to learn more: YouTube Vimeo Cross-subdomain analytics Analytics.js tracks across subdomains out of the box. All Segment destinations fully support this feature. To track activity on your subdomains, include the Segment Analytics.js snippet on each subdomain. Segment sets users’ anonymousId on the top-level domain, so that users are tracked across any subdomain. Because Segment tracks across subdomains, you can either use the same Segment source, or use separate sources for each subdomain. What you decide depends on your team’s goals for tracking each subdomain. Segment doesn’t offer tracking across top-level domains out of the box. If you want to track across top-level domains, you can utilize Segment’s Querystring API to pass the anonymousId from Website A to Website B in the query string. When a user moves from Website A to Website B with the anonymousId in the query string, Analytics.js reads that value and sets the anonymousId to it, rather than generating a new one. UTM Tracking UTM parameters are only used when linking to your site from outside your domain. When a visitor arrives using a link containing UTM parameters, Segment’s analytics.js library will parse the URL query string and add the information to the event payload. For more information about UTM tracking, see the Tracking Customers Across Channels and Devices documentation. UTM parameters contain three essential components (utm_source, utm_medium, utm_campaign) and two optional (utm_content, utm_term). For example, if you include the following three parameters in your URL: ?utm_source=mysource&utm_medium=email&utm_campaign=mytestcampaign , once a visitor arrives using a link containing the above, Segment automatically grabs the UTM parameters and subsequent events will contain these parameters within the ‘context’ object (visible in the raw view of your Source Debugger.) So, for example, if somebody follows the link with above query string to your site, the subsequent ‘page’ call in your Debugger should contain the below and will be passed to any enabled destinations: \" context \" : { \" campaign \" : { \" medium \" : \" email \" , \" name \" : \" mytestcampaign \" , \" source \" : \" mysource \" , }, Whenever the UTM parameters are no longer a part of the URL, Segment no longer includes them. For example, if the user goes to a new page within your website which does not contain these parameters, they will not be included in subsequent events. UTM parameters are non-persistent by default as they could potentially cause data accuracy problems. Here’s an example of why: Say a user clicks on an ad and lands on your site. He navigates around and bookmarks an internal page - or maybe shares a link with a friend, who shares it with another friend. All those links would then point back to the same test utm_source as the initial referrer for any purchase. Segment doesn’t validate UTM parameter names. This design supports the flexibility to track both standard parameters (for example, utm_source, utm_medium) and custom parameters defined by users. As a result, all parameters present in the URL collected as is, and are added to the context field without checks for naming conventions or validity. If you want to ensure that only standard UTM parameters (such as, utm_source, utm_medium, utm_campaign, utm_content, utm_term) are included in the context.campaign object, you can implement Source middleware in your Analytics.js setup. For example: window . analytics . addSourceMiddleware (({ payload , next }) => { if ( payload . obj . context ?. campaign ) { const allowedFields = [ \" source \" , \" medium \" , \" term \" , \" campaign \" , \" content \" ]; const campaign = payload . obj . context . campaign ; Object . keys ( campaign ). forEach ( key => { if ( ! allowedFields . includes ( key )) { delete campaign [ key ]; } }); } next ( payload ); }); This middleware filters out any non-standard parameters from the context.campaign object before they’re sent to Segment or forwarded to your enabled destinations. Analytics.js performance The Analytics.js library and all Destination libraries are loaded with the HTML script async tag . This also means that Segment fires methods asynchronously, so you should adjust your code accordingly if you require that events be sent from the browser in a specific order. While many tools require access to the DOM or cookies, for the Zendesk, Salesforce, and Mailchimp destinations, Segment doesn’t need to load a native JavaScript library. Instead, Segment’s servers send data to the end-tools. Segment loads the libraries required for your enabled Destinations. When you disable a destination, the custom version of Analytics.js loaded on your site stops requesting that library. Using Analytics.js doesn’t offer a large performance benefit, but is more performant than installing each of the destinations individually. And as more destinations move to accept data directly from Segment, you’ll receive more performance benefits automatically. One option, if you don’t want to use any bundled third-party tools, is to use the Analytics-Node package. Analytics.js doesn’t set third-party cookies and only sets first-party cookies. Bundle size Segment’s Analytics.js JavaScript snippet increases the page size by about 1.1KB. The snippet asynchronously requests and loads a customized JavaScript bundle ( analytics.min.js ), which contains the code and settings needed to load your device-mode destinations . The size of this file changes depending on the number of and which destinations you enable. Without any destinations enabled, the analytics.min.js file is about 62KB. Each time you enable a destination, the file’s size may increase slightly. Cookies set by Analytics.js Segment sets three cookies in general: Cookie Description ajs_anonymous_id An anonymous ID generated by Analytics.js, used for Segment calls. ajs_group_id A group ID that can be specified by making a group() call with Analytics.js. ajs_user_id A user ID that can be specified by making an identify() call with Analytics.js. For Google Chrome, these cookies expire by default one year after the date created. Other supported browsers might have a different expiration time. Some user/group traits are also stored in localStorage : Cookie Description ajs_user_traits The traits that are passed in an identify() call. ajs_group_properties The properties that are passed in a group() call. Note that localStorage variables don’t expire because the browser defines that functionality. Local storage cookies used by Analytics.js Analytics.js uses localstorage cookies if you have retries enabled, to keep track of retry timing. The ack cookie is a timer used to see if another tab should claim the retry queue. The reclaimStart and reclaimEnd cookies determine if a tab takes over the queue from another tab. The inProgress and queue cookies track events in progress, and events queued for retry. For more information, visit the Segment localstorage-retry library . You can set the debug cookie to analytics.js to log debug messages from Analytics.js to the console. Tracking Blockers and Browser Privacy Settings Segment does not endorse bypassing tracking blockers or browser privacy settings for client-side tracking. Your users have control over what gets loaded on their pages and can use plugins or browser settings to block third-party scripts, including Segment. To minimize client-side data loss, Segment recommends you choose from the following routes: Respect the user’s decision to implement tracking blockers or use privacy settings, knowing that, unfortunately, some data will be lost. Ask the customer to disable the tracking blockers or adjust their privacy settings (for example, in the case of large, corporate customers). Move as many events and tracking actions as possible to a server-side library, which won’t encounter the same limitations. To minimize client-side data loss, Segment provides a few workarounds. However, it’s important to note that Segment cannot guarantee their effectiveness. Use the bundle obfuscation feature. You can add an obfuscate property to the object in the second parameter, which obscures the URL from which your integrations and destination actions are loaded. This helps prevent words that are flagged by ad blockers to not be detected in your URL, enabling the integration to properly load. Create a custom proxy . This changes the URL that Segment loads from (cdn.segment.com) and the outgoing requests generated when events are triggered (api.segment.io). Consider implementing the Segment Edge SDK . The Segment Edge SDK leverages Cloudflare Workers to facilitate first-party data collection and real-time user profiling for app personalization. It integrates Segment’s library into web apps, manages user identity via HttpOnly cookies, and employs an internal router for efficient data processing and user experience customization. This innovative approach simplifies tracking and personalization for Segment customers. More information is available in the Edge SDK README . Consider using one of Segment’s server-side libraries . Using a server-side library eliminates concerns about tracking blockers and privacy browsers that can prevent Segment from loading. This option may require additional code to track actions like a Page call, as you now need to manually pass contextual information that would have been automatically collected by Analytics.js, like url , path , and referrer . Note that some destinations are device-mode only. Installing the library under a custom global namespace When you load Analytics.js through snippet code, by default, the SDK installs on window.analytics global variable. If this causes a conflict with another library on your page, you can change the global variable used by Analytics.js if you use snippet version 5.2.1 or later. Change the global variable in the beginning of your snippet code as shown below. In this case, Analytics.js uses window.custom_key to load instead of window.analytics . - !function(){var i=\"analytics\", ...\n  + !function(){var i=\"custom_key\", ... Add destinations from npm Bundle the destinations you want loaded from npm instead of having them loaded from a remote CDN. This enables you to have fewer network requests when adding destinations. To add actions-based destinations from npm: import vwo from ' @segment/analytics-browser-actions-vwo ' import braze from ' @segment/analytics-browser-actions-braze ' const analytics = AnalyticsBrowser . load ({ writeKey : ' <WRITE_KEY> ' , plugins : [ vwo , braze ], }) Pass in the destination plugin to the added config option called plugins .  A list of all action destination packages can be found on GitHub in the @segmentio/action-destinations repository. To add classic destinations from npm: import { AnalyticsBrowser } from ' @segment/analytics-next ' import GoogleAnalyticsIntegration from ' @segment/analytics.js-integration-google-analytics ' // The following example assumes configuration for Google Analytics will be available in the fetched settings const analytics = AnalyticsBrowser . load ({ writeKey : ' <WRITE_KEY> ' , classicIntegrations : [ GoogleAnalyticsIntegration ] }), Segment Inspector The Segment Inspector is a Chrome web extension that enables you to debug your Segment integration on web applications instrumented with Analytics.js. Analytics.js sends data to the extension so that you can see how events change before they’re sent to your destinations and so that you can verify that the event details are correct. The Segment Inspector also lets you analyze and confirm that API calls made from your website arrive to your Analytics.js source. For the Segment inspector to work, you must enable the Analytics.js source. To add the Segment Inspector as a Chrome extension: Go to the Segment Inspector in the Chrome web store . Click Add to Chrome . Click Add Extension in the pop-up window. Once installed, use the Inspect Elements developer tool in Chrome to use the Segment Inspector. To access the Inspector, go to the top menu bar of Chrome and navigate to View > Developer > Developer Tools and go to the Segment tab. On the Segment tab, you can: Filter the different calls by type Search based off of the content in the calls Identify users Components of the Segment Inspector The Segment Inspector is composed of these three components: The Diagnostics tab This tab shows the library versions and the list of active integrations that are running. When you select an integration, you can see the options that passed while the integration loads. If you made any local overrides within the integration or on the page itself, they appear highlighted in the code. The Events tab This tab enables you to select an event and see the specific details of the event. You can view the time the event occurred, the status of the event (whether it sent or failed), what plugins were added, and how the context object changed. Any changes made to the payload appear highlighted. Select the double-checked icon to see the payload at the delivery stage. Select the fx icon to see the payloads after plugins ran. Select the single-checked icon to see the payload as it was when the event triggered. The Identity tab This tab enables you to see the information of a user if you’re using the identify feature. You can associate the data to an individual and measure their activity across multiple sessions and devices. This tab only shows the user’s traits that are on the client. If you’re not using the identify feature, the user remains anonymous. Example uses Here are some examples of using Analytics.js. Note that the examples assume Analytics.js is installed through npm . Next.js with-segment-analytics with-segment-analytics-pages-router Vanilla React, Vue See Usage in Common Frameworks & SPAs External dependencies Analytics.js production dependencies are listed under the dependencies key . This page was last modified: 17 Dec 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Getting started Benefits of Analytics.js Basic tracking methods Utility methods Managing data flow with the Integrations object Retries Batching Plugins and source middleware Video player plugins Cross-subdomain analytics UTM Tracking Analytics.js performance Tracking Blockers and Browser Privacy Settings Installing the library under a custom global namespace Add destinations from npm Segment Inspector Example uses External dependencies Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "classic",
      "working",
      "website",
      "model",
      "canonical",
      "firing",
      "group",
      "javascript",
      "concerns",
      "block",
      "significantly",
      "supported",
      "forwarded",
      "custom",
      "previousid",
      "source",
      "packages",
      "interface",
      "error",
      "database",
      "generating",
      "appears",
      "project",
      "reads",
      "array",
      "dropping",
      "community",
      "title",
      "easiest",
      "closes",
      "addsourcemiddleware",
      "options",
      "utility",
      "identity",
      "between",
      "pluginb",
      "customers",
      "fullversionlist",
      "normal",
      "triggered",
      "wrapper",
      "analyze",
      "until",
      "failed",
      "flagged",
      "implied",
      "router",
      "utm_medium",
      "anonymous",
      "benefits",
      "begins",
      "external",
      "quickstart",
      "documentation",
      "integrated",
      "server",
      "arrive",
      "translates",
      "recordevent",
      "powerful",
      "redirect",
      "category",
      "scripts",
      "which",
      "maybe",
      "state",
      "buffered",
      "entire",
      "remote",
      "onconsentdialogclosed",
      "improve",
      "simple",
      "installing",
      "variable",
      "delays",
      "separate",
      "alias",
      "correct",
      "execute",
      "processed",
      "latest",
      "lifecycle",
      "calling",
      "clears",
      "except",
      "pages",
      "warehouses",
      "getelementbyid",
      "contains",
      "increasing",
      "improves",
      "finishes",
      "subsequent",
      "option",
      "platformversion",
      "implementation",
      "include",
      "potentially",
      "set_config",
      "actively",
      "guarantee",
      "youtube",
      "function",
      "obfuscation",
      "predecessor",
      "errors",
      "const",
      "handles",
      "ongoing",
      "somebody",
      "tracks",
      "collects",
      "content",
      "against",
      "completely",
      "debugger",
      "missing",
      "cookiesetter",
      "increase",
      "takes",
      "useragent",
      "user_123",
      "defines",
      "cannot",
      "cross",
      "causes",
      "identified",
      "individual",
      "goals",
      "beforeunload",
      "every",
      "blocked",
      "authors",
      "impacts",
      "linking",
      "platforms",
      "explicit",
      "helpful",
      "collected",
      "ajs_user_traits",
      "choose",
      "where",
      "activity",
      "destinations",
      "forces",
      "implementing",
      "marked",
      "frozen",
      "manages",
      "eliminates",
      "batched",
      "while",
      "email",
      "moves",
      "collection",
      "recommends",
      "giving",
      "reducing",
      "refresh",
      "article",
      "01011992",
      "online",
      "window",
      "passes",
      "inspect",
      "installs",
      "batches",
      "httponly",
      "dropped",
      "waits",
      "maintains",
      "works",
      "followed",
      "field",
      "making",
      "during",
      "attaches",
      "cause",
      "track",
      "emitted",
      "configuration",
      "grace",
      "pricing",
      "reloaded",
      "queues",
      "context",
      "document",
      "automatically",
      "initialized",
      "hundreds",
      "format",
      "cluster",
      "continue",
      "successfully",
      "development",
      "inspector",
      "agreed",
      "persistent",
      "treated",
      "fires",
      "package",
      "isvalid",
      "should",
      "appear",
      "unassociated",
      "advanced",
      "disable",
      "diagnostics",
      "first",
      "newsletter",
      "video",
      "create",
      "taking",
      "mixpanel",
      "existing",
      "retrieves",
      "value",
      "feedback",
      "write",
      "queued",
      "event",
      "subscribe",
      "total",
      "assumed",
      "reached",
      "pipeline",
      "initiates",
      "threshold",
      "associates",
      "control",
      "12091906",
      "payloads",
      "generated",
      "offers",
      "samples",
      "getting",
      "defined",
      "userreq",
      "directly",
      "objects",
      "record",
      "words",
      "commercial",
      "partner",
      "traits",
      "explorer",
      "provides",
      "query",
      "progress",
      "knowing",
      "determine",
      "troop",
      "keepalive",
      "might",
      "names",
      "ajs_anonymous_id",
      "middlewares",
      "flushed",
      "analytics",
      "change",
      "customer",
      "cloud",
      "useful",
      "natively",
      "false",
      "unavailable",
      "around",
      "clear",
      "react",
      "detected",
      "selected",
      "websites",
      "system",
      "session",
      "properly",
      "standard",
      "ajs_group_id",
      "passing",
      "signed",
      "player",
      "contain",
      "clicks",
      "depend",
      "lowercase",
      "exceed",
      "utm_content",
      "emitter",
      "together",
      "things",
      "bigger",
      "flags",
      "ajs_user_id",
      "decide",
      "compatibility",
      "application",
      "navigates",
      "writekey",
      "someone",
      "instantiate",
      "loaded",
      "retry",
      "retrying",
      "typicode",
      "leverages",
      "profiling",
      "approach",
      "recommended",
      "integrate",
      "using",
      "testing",
      "sources",
      "basic",
      "stringify",
      "wow64",
      "benefit",
      "helper",
      "property",
      "bigdatatool",
      "another",
      "encounter",
      "additional",
      "storage",
      "modified",
      "whenever",
      "share",
      "information",
      "tribe",
      "servers",
      "fetchwritekey",
      "performance",
      "binds",
      "override",
      "browsers",
      "domain",
      "consentedtools",
      "verbose",
      "added",
      "flexibility",
      "components",
      "referrer",
      "store",
      "arguments",
      "explicitly",
      "associate",
      "updateevent",
      "returns",
      "flight",
      "medium",
      "checked",
      "data",
      "favoritecompiler",
      "applies",
      "service",
      "subdomain",
      "localstorage",
      "dependencies",
      "empty",
      "libraries",
      "element",
      "assigns",
      "later",
      "validate",
      "visitor",
      "common",
      "behavior",
      "github",
      "grabs",
      "string",
      "augment",
      "complete",
      "limit",
      "flagship",
      "employees",
      "custom_key",
      "import",
      "single",
      "braze",
      "reclaimend",
      "privacy",
      "trade",
      "identifies",
      "assistance",
      "initializing",
      "proxy",
      "avoid",
      "snippet",
      "popular",
      "depends",
      "network",
      "build",
      "account",
      "computer",
      "better",
      "guaranteed",
      "object",
      "varies",
      "signup",
      "checks",
      "customized",
      "univac",
      "provided",
      "debug",
      "exclude",
      "acceptable",
      "disableautoisoconversion",
      "extra",
      "inserts",
      "consent",
      "method",
      "usually",
      "completed",
      "society",
      "depending",
      "reaches",
      "virtual",
      "executes",
      "workers",
      "nickname",
      "seconds",
      "guide",
      "resolve",
      "stores",
      "invoked",
      "opposite",
      "vanilla",
      "running",
      "multiple",
      "endorse",
      "analyticsbrowser",
      "repository",
      "collective",
      "effect",
      "identify",
      "architecture",
      "conventions",
      "eckert",
      "since",
      "containing",
      "conflict",
      "allows",
      "adlearn",
      "facilitate",
      "vimeo",
      "applications",
      "filters",
      "required",
      "provider",
      "academy",
      "critical",
      "either",
      "cleanup",
      "needs",
      "anonymous_id",
      "properties",
      "retried",
      "level",
      "across",
      "api",
      "strategy",
      "integration",
      "views",
      "cookiejar",
      "going",
      "listed",
      "parameter",
      "tools",
      "manually",
      "fewer",
      "essential",
      "expiration",
      "protocols",
      "bundled",
      "business",
      "register",
      "changed",
      "replace",
      "follows",
      "mailchimp",
      "modifying",
      "specified",
      "prevent",
      "supports",
      "integrates",
      "unless",
      "uafullversion",
      "regardless",
      "issues",
      "async",
      "monitor",
      "expired",
      "incrementally",
      "visit",
      "click",
      "viewed",
      "kissmetrics",
      "mytestcampaign",
      "memory",
      "foreach",
      "emits",
      "lines",
      "order",
      "caches",
      "methods",
      "resets",
      "following",
      "smaller",
      "filter",
      "there",
      "personalization",
      "milliseconds",
      "validity",
      "weight",
      "about",
      "times",
      "stops",
      "integrations",
      "disabling",
      "querystring",
      "mysource",
      "requesting",
      "checking",
      "contextual",
      "under",
      "environments",
      "signs",
      "develop",
      "problems",
      "middleware",
      "three",
      "iso8061",
      "hints",
      "preact",
      "consider",
      "hopper",
      "setting",
      "correspond",
      "tracklink",
      "possible",
      "bundle",
      "extending",
      "requires",
      "within",
      "navigate",
      "measure",
      "reload",
      "variables",
      "flows",
      "introducing",
      "rather",
      "types",
      "feature",
      "loading",
      "speed",
      "assume",
      "number",
      "specific",
      "however",
      "cookies",
      "reclaimstart",
      "tracked",
      "messages",
      "issue",
      "missed",
      "trial",
      "implemented",
      "respect",
      "select",
      "delivery",
      "below",
      "extension",
      "convert",
      "pluginn",
      "friend",
      "completes",
      "functionality",
      "billing",
      "coded",
      "promise",
      "different",
      "batch",
      "least",
      "events",
      "listen",
      "highentropyvaluesclienthints",
      "bypassing",
      "without",
      "platform",
      "channels",
      "accordingly",
      "native",
      "cookie",
      "classicintegrations",
      "premium",
      "flush",
      "registering",
      "building",
      "message",
      "itself",
      "fetch",
      "receivedat",
      "enabling",
      "thing",
      "currently",
      "falls",
      "limitations",
      "similar",
      "batching",
      "update",
      "obscures",
      "routes",
      "losing",
      "modification",
      "stage",
      "thrown",
      "initiated",
      "installed",
      "destination",
      "validation",
      "redirecting",
      "allow",
      "listeners",
      "enrichment",
      "included",
      "shares",
      "connect",
      "factors",
      "allowedfields",
      "hosting",
      "shown",
      "whether",
      "lands",
      "address",
      "bitness",
      "present",
      "random",
      "browser",
      "operations",
      "would",
      "downstream",
      "employs",
      "throughput",
      "third",
      "simplifies",
      "optional",
      "isloaded",
      "point",
      "gives",
      "sessions",
      "enable",
      "increases",
      "bookmarks",
      "registers",
      "trackform",
      "mechanism",
      "pixels",
      "filtering",
      "connection",
      "performant",
      "company",
      "enabled",
      "turns",
      "stitching",
      "minimize",
      "sending",
      "arrives",
      "setup",
      "ensure",
      "simplify",
      "timer",
      "efficient",
      "local",
      "device",
      "internet",
      "individually",
      "includes",
      "party",
      "accept",
      "subdomains",
      "receiving",
      "special",
      "occurs",
      "jsonplaceholder",
      "releases",
      "guidelines",
      "maintenance",
      "course",
      "status",
      "quickly",
      "workspace",
      "salesforce",
      "after",
      "changing",
      "recognized",
      "claim",
      "modify",
      "submission",
      "https",
      "google",
      "thanks",
      "anonymousid",
      "producttype",
      "split",
      "utm_term",
      "timing",
      "mobile",
      "retries",
      "stored",
      "conditionally",
      "expire",
      "adding",
      "needed",
      "changes",
      "concept",
      "ecommerce",
      "blindly",
      "along",
      "normalization",
      "cdnsettings",
      "means",
      "result",
      "schema",
      "doesn",
      "locations",
      "inprogress",
      "readme",
      "argument",
      "mauchly",
      "world",
      "write_key",
      "accomplish",
      "enrich",
      "utilize",
      "beginning",
      "timeout",
      "detailed",
      "performs",
      "perform",
      "fetched",
      "enables",
      "serve",
      "userid",
      "offline",
      "timeline",
      "start",
      "composed",
      "callback",
      "examples",
      "assumes",
      "management",
      "triggering",
      "match",
      "instance",
      "access",
      "amazing",
      "updates",
      "script",
      "versions",
      "generate",
      "check",
      "plugin",
      "obfuscate",
      "converts",
      "features",
      "longer",
      "captured",
      "visible",
      "incorrect",
      "fields",
      "design",
      "double",
      "tolowercase",
      "before",
      "developers",
      "totango",
      "detect",
      "initialization",
      "recognizable",
      "bootstrap",
      "based",
      "statedgoals",
      "chrome",
      "organization",
      "because",
      "boolean",
      "alleviate",
      "identitystitching",
      "initial",
      "outgoing",
      "plugina",
      "fully",
      "library",
      "other",
      "called",
      "growth",
      "limited",
      "googleanalyticsintegration",
      "assemblage",
      "naming",
      "defaults",
      "chance",
      "previous",
      "final",
      "enterprise",
      "require",
      "innovative",
      "devices",
      "available",
      "usnavy",
      "search",
      "aliasing",
      "deliverystrategy",
      "campaign",
      "could",
      "through",
      "client",
      "customization",
      "blocks",
      "sensitive",
      "example",
      "ready",
      "decision",
      "return",
      "handler",
      "catalog",
      "offer",
      "deeply",
      "experience",
      "request",
      "requests",
      "process",
      "helps",
      "links",
      "sends",
      "config",
      "delete",
      "export",
      "segment",
      "cloudflare",
      "hello",
      "effectiveness",
      "platoon",
      "conditions",
      "groupid",
      "second",
      "confirm",
      "reset",
      "unstable",
      "loads",
      "undefined",
      "remains",
      "functions",
      "receive",
      "technology",
      "parse",
      "queue",
      "maximum",
      "invoke",
      "contact",
      "continues",
      "managing",
      "identities",
      "important",
      "console",
      "abort",
      "learn",
      "combines",
      "price",
      "ajs_group_properties",
      "blockers",
      "including",
      "payload",
      "those",
      "executed",
      "userconsentstobeingtracked",
      "implement",
      "highlighted",
      "clicked",
      "elements",
      "these",
      "something",
      "choosing",
      "location",
      "current",
      "started",
      "handle",
      "attempts",
      "outside",
      "unfortunately",
      "namespace",
      "occurred",
      "large",
      "slightly",
      "selector",
      "throughout",
      "processing",
      "corporate",
      "workarounds",
      "settings",
      "revenue",
      "length",
      "utm_source",
      "having",
      "zendesk",
      "instead",
      "cases",
      "visitors",
      "logout",
      "enqueued",
      "description",
      "values",
      "accuracy",
      "calls",
      "signal",
      "segmentio",
      "utm_campaign",
      "their",
      "passed",
      "impact",
      "jquery",
      "strings",
      "ability",
      "throws",
      "created",
      "await",
      "represent",
      "version",
      "industry",
      "support",
      "manage",
      "dictionary",
      "staging",
      "domains",
      "plugins",
      "tracking",
      "purchase",
      "begin",
      "action",
      "instrumented",
      "outbound",
      "conversion",
      "corporation",
      "usage",
      "default",
      "instances",
      "shows",
      "asynchronously",
      "subset",
      "science",
      "reference",
      "described",
      "polling",
      "actions",
      "above",
      "general",
      "active",
      "intro",
      "deliver",
      "delivers",
      "callbacks",
      "comes",
      "internal",
      "found",
      "global",
      "verify",
      "frameworks",
      "connections",
      "principles",
      "reduces",
      "tells",
      "intercom",
      "questions",
      "adjust",
      "explains",
      "parameters",
      "collect",
      "users",
      "overridden",
      "developer",
      "several",
      "granular",
      "your_write_key",
      "stack",
      "nested",
      "fails",
      "production",
      "overrides",
      "details"
    ],
    "howto_steps": [
      "or maybe shares a link with a friend, who shares it with another friend. All those links would then point back to the same test utm_source as the initial referrer for any purchase. Segment doesn’t validate UTM parameter names. This design supports the flexibility to track both standard parameters (for example, utm_source, utm_medium) and custom parameters defined by users. As a result, all parameters present in the URL collected as is, and are added to the context field without checks for naming conventions or validity. If you want to ensure that only standard UTM parameters (such as, utm_source, utm_medium, utm_campaign, utm_content, utm_term) are included in the context.campaign object, you can implement Source middleware in your Analytics.js setup. For example: window . analytics . addSourceMiddleware (({ payload , next }) => { if ( payload . obj . context ?. campaign ) { const allowedFields = [ \" source \" , \" medium \" , \" term \" , \" campaign \" , \" content \" ]; const campaign = payload . obj . context . campaign ; Object . keys ( campaign ). forEach ( key => { if ( ! allowedFields . includes ( key )) { delete campaign [ key ]; } }); } next ( payload ); }); This middleware filters out any non",
      "!function(){var i=\"analytics\", ...\n  + !function(){var i=\"custom_key\", ... Add destinations from npm Bundle the destinations you want loaded from npm instead of having them loaded from a remote CDN. This enables you to have fewer network requests when adding destinations. To add actions"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "intermediate"
    }
  },
  {
    "url": "https://segment.com/docs/connections/sources/catalog/libraries/website/javascript/quickstart/#step-4-track-actions",
    "title": " Quickstart: Analytics.js | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Sources / Catalog / Libraries / Website / Javascript / Quickstart: Analytics.js Quickstart: Analytics.js On this page Step 1: Create a source in the Segment app Step 2: Install Segment to your site Step 3: Identify users Step 4: Track actions What’s next? This tutorial gets you started sending data from your website to Segment and any of Segment’s destinations, using Segment’s Analytics.js library. Want to learn more? Check out the Analytics.js reference . Step 1: Create a source in the Segment app Before you begin, you need a Workspace (which is a container that holds all of the Sources and Destinations that are billed together for an organization). You can sign up for a free Segment account and create a workspace. To create an Analytics.js source source in the Segment app: Click Add Source . From the source catalog page, click JavaScript . Click Add Source again from the informational panel that appears to the right. Give the source a display name, and enter the URL the source will collect data from. When you create a source in the Segment web app, it tells the Segment servers that you’ll be sending data from a specific source type. When you create (or change) a source in the Segment app, Segment generates a new write key for that source. You use the write key in your website code to tell Segment servers where the data is coming from, so Segment can route it to your Destinations and other tools. Step 2: Install Segment to your site You can choose to install Segment to your site in 1 of 2 ways: a. Add the Segment snippet to your app b. Install Segment as a NPM package Step 2a: Add the Segment Snippet You can find the latest version of the Segment snippet in the Overview tab of your Javascript source. To add the Segment snippet to your app: Paste the snippet into the <head> tag of your site to install Segment. Minified Non-minified <script> ! function (){ var i = \" analytics \" , analytics = window [ i ] = window [ i ] || []; if ( ! analytics . initialize ) if ( analytics . invoked ) window . console && console . error && console . error ( \" Segment snippet included twice. \" ); else { analytics . invoked =! 0 ; analytics . methods = [ \" trackSubmit \" , \" trackClick \" , \" trackLink \" , \" trackForm \" , \" pageview \" , \" identify \" , \" reset \" , \" group \" , \" track \" , \" ready \" , \" alias \" , \" debug \" , \" page \" , \" screen \" , \" once \" , \" off \" , \" on \" , \" addSourceMiddleware \" , \" addIntegrationMiddleware \" , \" setAnonymousId \" , \" addDestinationMiddleware \" , \" register \" ]; analytics . factory = function ( e ){ return function (){ if ( window [ i ]. initialized ) return window [ i ][ e ]. apply ( window [ i ], arguments ); var n = Array . prototype . slice . call ( arguments ); if ([ \" track \" , \" screen \" , \" alias \" , \" group \" , \" page \" , \" identify \" ]. indexOf ( e ) >- 1 ){ var c = document . querySelector ( \" link[rel='canonical'] \" ); n . push ({ __t : \" bpc \" , c : c && c . getAttribute ( \" href \" ) || void 0 , p : location . pathname , u : location . href , s : location . search , t : document . title , r : document . referrer })} n . unshift ( e ); analytics . push ( n ); return analytics }}; for ( var n = 0 ; n < analytics . methods . length ; n ++ ){ var key = analytics . methods [ n ]; analytics [ key ] = analytics . factory ( key )} analytics . load = function ( key , n ){ var t = document . createElement ( \" script \" ); t . type = \" text/javascript \" ; t . async =! 0 ; t . setAttribute ( \" data-global-segment-analytics-key \" , i ); t . src = \" https://cdn.segment.com/analytics.js/v1/ \" + key + \" /analytics.min.js \" ; var r = document . getElementsByTagName ( \" script \" )[ 0 ]; r . parentNode . insertBefore ( t , r ); analytics . _loadOptions = n }; analytics . _writeKey = \" YOUR_WRITE_KEY \" ;; analytics . SNIPPET_VERSION = \" 5.2.1 \" ; analytics . load ( \" YOUR_WRITE_KEY \" ); analytics . page (); }}(); </script> <script type= \"text/javascript\" > ( function () { // define the key where the global analytics object will be accessible // customers can safely set this to be something else if need be var globalAnalyticsKey = \" analytics \" // Create a queue, but don't obliterate an existing one! var analytics = window [ globalAnalyticsKey ] = window [ globalAnalyticsKey ] || []; // If the real analytics.js is already on the page return. if ( analytics . initialize ) return ; // If the snippet was invoked already show an error. if ( analytics . invoked ) { if ( window . console && console . error ) { console . error ( \" Segment snippet included twice. \" ); } return ; } // Invoked flag, to make sure the snippet // is never invoked twice. analytics . invoked = true ; // A list of the methods in Analytics.js to stub. analytics . methods = [ \" trackSubmit \" , \" trackClick \" , \" trackLink \" , \" trackForm \" , \" pageview \" , \" identify \" , \" reset \" , \" group \" , \" track \" , \" ready \" , \" alias \" , \" debug \" , \" page \" , \" screen \" , \" once \" , \" off \" , \" on \" , \" addSourceMiddleware \" , \" addIntegrationMiddleware \" , \" setAnonymousId \" , \" addDestinationMiddleware \" , \" register \" ]; // Define a factory to create stubs. These are placeholders // for methods in Analytics.js so that you never have to wait // for it to load to actually record data. The `method` is // stored as the first argument, so we can replay the data. analytics . factory = function ( e ) { return function () { if ( window [ globalAnalyticsKey ]. initialized ) { // Sometimes users assigned analytics to a variable before analytics is done loading, resulting in a stale reference. // If so, proxy any calls to the 'real' analytics instance. return window [ globalAnalyticsKey ][ e ]. apply ( window [ globalAnalyticsKey ], arguments ); } var args = Array . prototype . slice . call ( arguments ); // Add buffered page context object so page information is always up-to-date if ([ \" track \" , \" screen \" , \" alias \" , \" group \" , \" page \" , \" identify \" ]. indexOf ( e ) > - 1 ) { var c = document . querySelector ( \" link[rel='canonical'] \" ); args . push ({ __t : \" bpc \" , c : c && c . getAttribute ( \" href \" ) || undefined , p : location . pathname , u : location . href , s : location . search , t : document . title , r : document . referrer }); } args . unshift ( e ); analytics . push ( args ); return analytics ; }; }; // For each of our methods, generate a queueing stub. for ( var i = 0 ; i < analytics . methods . length ; i ++ ) { var key = analytics . methods [ i ]; analytics [ key ] = analytics . factory ( key ); } // Define a method to load Analytics.js from our CDN, // and that will be sure to only ever load it once. analytics . load = function ( key , options ) { // Create an async script element based on your key. var t = document . createElement ( \" script \" ); t . type = \" text/javascript \" ; t . async = true ; t . setAttribute ( \" data-global-segment-analytics-key \" , globalAnalyticsKey ) t . src = \" https://cdn.segment.com/analytics.js/v1/ \" + key + \" /analytics.min.js \" ; // Insert our script next to the first script element. var first = document . getElementsByTagName ( \" script \" )[ 0 ]; first . parentNode . insertBefore ( t , first ); analytics . _loadOptions = options ; }; analytics . _writeKey = \" YOUR_WRITE_KEY \" ; // Add a version to keep track of what's in the wild. analytics . SNIPPET_VERSION = \" 5.2.1 \" ; // Load Analytics.js with your key, which will automatically // load the tools you've enabled for your account. Boosh! analytics . load ( \" YOUR_WRITE_KEY \" ); // Make the first page call to load the integrations. If // you'd like to manually name or tag the page, edit or // move this call however you'd like. analytics . page (); })(); </script> Replace YOUR_WRITE_KEY in the snippet you pasted with your Segment project’s Write Key . Find the write key in your project set up guide or in the source’s settings. When you use Analytics.js in device-mode, the source’s Write Key is public, because it runs in a user’s browser and can be accessed using the browser’s developer tools. If this is not acceptable to your organization, you can explore other Segment Sources which collect data from a server-based installation, and which are not accessible to the user. That snippet loads Analytics.js onto the page asynchronously , so it won’t affect your page load speed. Once the snippet is running on your site, you can turn on destinations from the destinations page in your workspace and they start loading on your site automatically. Note that you should remove other native third-party destination code that you might have on your site. For example, if you’re using Segment to send data to Google Analytics, make sure you remove the Google Analytics snippet from your site source code to prevent sending the data twice. If you only want the most basic Google Analytics setup, there’s no need to continue with the setup. Just toggle on Google Analytics in the Segment interface. A lot of analytics and marketing tools need to record who each user is on your site. If you want to use any tool that deals with the identity of your users, read on about the Identify method. Step 2b: Install Segment as a npm package To install Segment as a npm package: Install the analytics package. # npm npm install @segment/analytics-next # yarn yarn add @segment/analytics-next # pnpm pnpm add @segment/analytics-next Import and initialize the analytics. import { AnalyticsBrowser } from ' @segment/analytics-next ' export const analytics = AnalyticsBrowser . load ({ writeKey : ' YOUR_WRITE_KEY ' }) // or export const analytics = new AnalyticsBrowser () analytics . load ({ writeKey : ' YOUR_WRITE_KEY ' }) For more initialization patterns and general information on @segment/analytics-next , see the repository’s README . Step 3: Identify users For any of the different methods described in this quickstart, you can replace the properties and traits in the code samples with variables that represent the data collected. The Identify method is how you tell Segment who the current user is. It includes a unique User ID, and any optional traits you know about them. You can read more about it in the identify method reference . You don’t need to call Identify for anonymous visitors to your site. Segment automatically assigns them an anonymousId , so just calling page and track works just fine without Identify. Here’s what a basic call to Identify might look like: analytics . identify ( ' f4ca124298 ' , { name : ' Michael Brown ' , email : ' mbrown@example.com ' }); This identifies Michael by his unique User ID (in this case, f4ca124298 , which is what you know him by in your database) and labels him with name and email traits. When you actually put that code on your site, you need to replace those hard-coded trait values with the variables that represent the details of the currently logged-in user. To do that, Segment recommends that you use a backend template to inject an Identify call into the footer of every page of your site where the user is logged in. That way, no matter what page the user first lands on, they will always be identified. You don’t need to call Identify if your unique identifier ( userId ) is not known. Depending on your templating language, your actual Identify call might look something like this: analytics . identify ( ' {{user.id}} ' , { name : ' {{user.fullname}} ' , email : ' {{user.email}} ' }); With that call in your page footer, you successfully identify every user that visits your site. If you only want to use a basic CRM setup, you can stop here. Just enable Salesforce, Intercom, or any other CRM system from your Segment workspace, and Segment starts sending all of your user data to it. A lot of analytics tools record more than just identities as they record the actions each user performs too. If you’re looking for a complete event tracking analytics setup, keep reading… Step 4: Track actions The Track method is how you tell Segment about the actions your users are performing on your site. Every action triggers what’s called an “event”, which can also have associated properties. You can read more about Track in the track method reference . Here’s what a call to a Track call might look like when a user signs up: analytics . track ( ' Signed Up ' , { plan : ' Enterprise ' }); That tells Segment that your user triggered the Signed Up event, and chose your hypothetical 'Enterprise' plan. Properties can be anything you want to record, for example: analytics . track ( ' Article Bookmarked ' , { title : ' Snow Fall ' , subtitle : ' The Avalanche at Tunnel Creek ' , author : ' John Branch ' }); If you’re just getting started, some of the events you should track are events that indicate the success of your site, like Signed Up , Item Purchased or Article Bookmarked . To get started, Segment recommends that you track just a few important events. You can always add more later. After you add a few Track calls, you successfully installed Analytics.js tracking. Now you’re ready to turn on any destination you like from the Segment interface. What’s next? You might want to check out the full Analytics.js reference to see what else is possible, or read about the Tracking API methods to get a sense for the bigger picture. If you’re running an ecommerce site or app you should also check out Segment’s ecommerce API reference to make sure your products and checkout experience are instrumented properly. This page was last modified: 29 Feb 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Step 1: Create a source in the Segment app Step 2: Install Segment to your site Step 3: Identify users Step 4: Track actions What’s next? Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "website",
      "canonical",
      "group",
      "javascript",
      "labels",
      "performing",
      "source",
      "snippet_version",
      "interface",
      "error",
      "database",
      "appears",
      "project",
      "array",
      "author",
      "title",
      "easiest",
      "addsourcemiddleware",
      "options",
      "identity",
      "sometimes",
      "stubs",
      "customers",
      "triggered",
      "indexof",
      "anonymous",
      "define",
      "documentation",
      "quickstart",
      "server",
      "billed",
      "templating",
      "triggers",
      "which",
      "buffered",
      "queryselector",
      "improve",
      "variable",
      "alias",
      "latest",
      "calling",
      "tunnel",
      "obliterate",
      "setanonymousid",
      "function",
      "const",
      "mbrown",
      "parentnode",
      "identified",
      "every",
      "choose",
      "bookmarked",
      "helpful",
      "collected",
      "where",
      "destinations",
      "actual",
      "email",
      "recommends",
      "article",
      "window",
      "explore",
      "toggle",
      "works",
      "track",
      "fullname",
      "install",
      "document",
      "initialized",
      "context",
      "automatically",
      "continue",
      "successfully",
      "initialize",
      "indicate",
      "package",
      "should",
      "first",
      "f4ca124298",
      "create",
      "existing",
      "feedback",
      "marketing",
      "enter",
      "write",
      "event",
      "setattribute",
      "deals",
      "actually",
      "samples",
      "getting",
      "record",
      "apply",
      "traits",
      "affect",
      "creek",
      "might",
      "analytics",
      "change",
      "system",
      "properly",
      "unshift",
      "signed",
      "replay",
      "together",
      "bigger",
      "writekey",
      "checkout",
      "integrate",
      "using",
      "screen",
      "sources",
      "basic",
      "websites",
      "modified",
      "prototype",
      "already",
      "information",
      "servers",
      "referrer",
      "arguments",
      "trackclick",
      "avalanche",
      "data",
      "libraries",
      "element",
      "assigns",
      "later",
      "complete",
      "import",
      "identifies",
      "assistance",
      "proxy",
      "matter",
      "snippet",
      "createelement",
      "known",
      "accessed",
      "looking",
      "account",
      "object",
      "pathname",
      "acceptable",
      "debug",
      "method",
      "depending",
      "stale",
      "products",
      "guide",
      "invoked",
      "running",
      "analyticsbrowser",
      "repository",
      "public",
      "identify",
      "safely",
      "subtitle",
      "getelementsbytagname",
      "logged",
      "globalanalyticskey",
      "properties",
      "api",
      "picture",
      "tools",
      "manually",
      "patterns",
      "register",
      "replace",
      "prevent",
      "remove",
      "assigned",
      "async",
      "click",
      "visit",
      "holds",
      "starts",
      "methods",
      "insertbefore",
      "identifier",
      "there",
      "about",
      "queueing",
      "integrations",
      "signs",
      "problems",
      "placeholders",
      "possible",
      "tracklink",
      "boosh",
      "michael",
      "variables",
      "hypothetical",
      "loading",
      "speed",
      "pasted",
      "specific",
      "however",
      "accessible",
      "coded",
      "different",
      "events",
      "without",
      "native",
      "never",
      "inject",
      "currently",
      "installed",
      "pageview",
      "destination",
      "included",
      "lands",
      "browser",
      "visits",
      "twice",
      "third",
      "optional",
      "enable",
      "trackform",
      "_loadoptions",
      "enabled",
      "sending",
      "setup",
      "language",
      "device",
      "includes",
      "party",
      "unique",
      "informational",
      "workspace",
      "salesforce",
      "after",
      "https",
      "thanks",
      "google",
      "anonymousid",
      "mobile",
      "stored",
      "ecommerce",
      "readme",
      "argument",
      "chose",
      "resulting",
      "performs",
      "userid",
      "start",
      "footer",
      "_writekey",
      "brown",
      "instance",
      "installation",
      "getattribute",
      "script",
      "generate",
      "check",
      "tracksubmit",
      "before",
      "reading",
      "minified",
      "initialization",
      "based",
      "organization",
      "because",
      "sense",
      "tutorial",
      "slice",
      "other",
      "library",
      "called",
      "growth",
      "route",
      "associated",
      "generates",
      "enterprise",
      "adddestinationmiddleware",
      "search",
      "ready",
      "example",
      "return",
      "catalog",
      "factory",
      "experience",
      "request",
      "trait",
      "overview",
      "export",
      "segment",
      "addintegrationmiddleware",
      "insert",
      "right",
      "reset",
      "loads",
      "undefined",
      "queue",
      "coming",
      "success",
      "contact",
      "purchased",
      "identities",
      "important",
      "console",
      "learn",
      "those",
      "location",
      "current",
      "something",
      "these",
      "started",
      "container",
      "length",
      "settings",
      "visitors",
      "branch",
      "always",
      "values",
      "calls",
      "panel",
      "represent",
      "version",
      "support",
      "tracking",
      "backend",
      "begin",
      "action",
      "instrumented",
      "again",
      "asynchronously",
      "reference",
      "described",
      "actions",
      "general",
      "display",
      "global",
      "connections",
      "tells",
      "intercom",
      "questions",
      "template",
      "collect",
      "users",
      "developer",
      "your_write_key",
      "anything",
      "paste",
      "details"
    ],
    "howto_steps": [
      "1 ){ var c = document . querySelector ( \" link[rel='canonical'] \" ); n . push ({ __t : \" bpc \" , c : c && c . getAttribute ( \" href \" ) || void 0 , p : location . pathname , u : location . href , s : location . search , t : document . title , r : document . referrer })} n . unshift ( e ); analytics . push ( n ); return analytics }}; for ( var n = 0 ; n < analytics . methods . length ; n ++ ){ var key = analytics . methods [ n ]; analytics [ key ] = analytics . factory ( key )} analytics . load = function ( key , n ){ var t = document . createElement ( \" script \" ); t . type = \" text/javascript \" ; t . async =! 0 ; t . setAttribute ( \" data",
      "1 ) { var c = document . querySelector ( \" link[rel='canonical'] \" ); args . push ({ __t : \" bpc \" , c : c && c . getAttribute ( \" href \" ) || undefined , p : location . pathname , u : location . href , s : location . search , t : document . title , r : document . referrer }); } args . unshift ( e ); analytics . push ( args ); return analytics ; }; }; // For each of our methods, generate a queueing stub. for ( var i = 0 ; i < analytics . methods . length ; i ++ ) { var key = analytics . methods [ i ]; analytics [ key ] = analytics . factory ( key ); } // Define a method to load Analytics.js from our CDN, // and that will be sure to only ever load it once. analytics . load = function ( key , options ) { // Create an async script element based on your key. var t = document . createElement ( \" script \" ); t . type = \" text/javascript \" ; t . async = true ; t . setAttribute ( \" data"
    ],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/connections/spec/identify",
    "title": " Spec: Identify | Segment Documentation",
    "platform": "segment",
    "content": "Home / Connections / Spec / Spec: Identify Spec: Identify On this page Example Identities Custom traits The Segment Identify call lets you tie a user to their actions and record traits about them.  It includes a unique User ID and any optional traits you know about the user, like their email, name, and more. Segment University: The Identify Method Check out our high-level overview of the Identify method in Segment University. (Must be logged in to access.) Segment recommends that you make an Identify call: After a user first registers After a user logs in When a user updates their info (for example, they change or add a new address) The first three examples are pretty self-explanatory, but many might ask: why you would call Identify on every page load if you’re storing the userId in the cookie/local storage? Calling Identify in one of Segment’s libraries is one of the first steps to getting started with Segment. Refer to library-specific documentation for more details. Here’s the payload of a typical Identify call with most common fields removed: { \"type\" : \"identify\" , \"traits\" : { \"name\" : \"Peter Gibbons\" , \"email\" : \"peter@example.com\" , \"plan\" : \"premium\" , \"logins\" : 5 }, \"userId\" : \"97980cfea0067\" } And here’s the corresponding JavaScript event that would generate the above payload: analytics . identify ( \" 97980cfea0067 \" , { name : \" Peter Gibbons \" , email : \" peter@example.com \" , plan : \" premium \" , logins : 5 }); Based on the library you use, the syntax in the examples might be different. You can find library-specific documentation on the Sources Overview page. Beyond the common fields, an Identify call has the following fields: Field Type Description traits optional Object Free-form dictionary of traits of the user, like email or name .\n\n  See the Traits field docs for a list of reserved trait names. userId required; optional if anonymousID is set instead String Unique identifier for the user in your database.\n\n  A userId or an anonymousId is required.\n\n  See the Identities docs for more details. Note that these traits coming in from your source events are called custom traits . Example Here’s a complete example of an Identify call: { \"anonymousId\" : \"507f191e810c19729de860ea\" , \"channel\" : \"browser\" , \"context\" : { \"ip\" : \"8.8.8.8\" , \"userAgent\" : \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/40.0.2214.115 Safari/537.36\" }, \"integrations\" : { \"All\" : false , \"Mixpanel\" : true , \"Salesforce\" : true }, \"messageId\" : \"022bb90c-bbac-11e4-8dfc-aa07a5b093db\" , \"receivedAt\" : \"2015-02-23T22:28:55.387Z\" , \"sentAt\" : \"2015-02-23T22:28:55.111Z\" , \"timestamp\" : \"2015-02-23T22:28:55.111Z\" , \"traits\" : { \"name\" : \"Peter Gibbons\" , \"email\" : \"peter@example.com\" , \"plan\" : \"premium\" , \"logins\" : 5 , \"address\" : { \"street\" : \"6th St\" , \"city\" : \"San Francisco\" , \"state\" : \"CA\" , \"postalCode\" : \"94103\" , \"country\" : \"USA\" } }, \"type\" : \"identify\" , \"userId\" : \"97980cfea0067\" , \"version\" : \"1.1\" } Create your own Identify call Use the following interactive code pen to see what your Identify calls would look like with user-provided information: Sample Identify Name: Please enter your name. Email: Please enter a valid email address. Plan: Please enter a valid Plan name. Logins: Please enter only numbers in the 'Logins' field. Street: Please enter a valid street address, including the street name and number. City: Please enter a valid city name in the 'City' field. State: Please enter a valid two-letter state code in all caps, like 'CA' for California. Zip Code: Please enter a valid five-digit zip code. Country: Please enter a two-letter country code in all caps, like 'US' for United States. Sample Identify Call Sample output goes here! Identities The Identify call specifies a customer identity that you can reference across the customer’s whole lifetime. Every Identify call must have a User ID or an Anonymous ID , depending on how much you know about the user in question. Anonymous ID There are certain cases where you don’t actually know who the user is according to your database, but you still want to be able to tie them to traits, events, or page views. For example, you may not know who a user is when tracking newsletter signups or anonymous page views. In these cases, you should use an Anonymous ID. The Anonymous ID can be any pseudo-unique identifier. For example, on your servers you can use a session id. If you don’t have any readily available identifier, you can always generate a new random one — Segment recommends UUIDv4 format . Segment’s browser and mobile libraries automatically use Anonymous IDs to keep track of users as they navigate around your website or app, so you don’t need to worry about them when using those libraries. Here’s an example of a JavaScript event for an anonymous user: analytics . identify ({ subscriptionStatus : ' inactive ' }); User ID User IDs are a more permanent and robust identifier, like a database ID. Since these IDs are consistent across a customer’s lifetime, Identify calls should include a User ID as often as possible. A User ID is usually the unique identifier that you recognize a user by in your own database. For example, if you’re using MongoDB, User IDs might look something like this: 507f191e810c19729de860ea . Segment recommends using database IDs, in uuidv4 format , instead of email addresses or usernames because database IDs never change. That guarantees that even if the user changes their email address, you can still recognize them as the same person in all of your analytics tools, and you’ll be able to correlate analytics data with your own internal database. Instead of using an email address or a username as a User ID, send them along as custom traits . Custom traits Custom traits are pieces of information you know about a user that are included in an Identify call. These could be demographics like age or gender , account-specific like plan , or even things like whether a user has seen a particular A/B test variation. Segment has reserved some custom traits that have semantic meanings for users, and will handle them in special ways. For example, Segment always expects email to be a string of the user’s email address. Segment sends this on to destinations like Mailchimp that require an email address for their tracking. Only use reserved traits for their intended meaning. Reserved custom traits Segment has standardized: Trait Type Description address Object Street address of a user optionally containing: city , country , postalCode , state , or street age Number Age of a user avatar String URL to an avatar image for the user birthday Date User’s birthday company Object Company the user represents, optionally containing: name (String), id (String or Number), industry (String), employee_count (Number) or plan (String) createdAt Date Date the user’s account was first created. Segment recommends using ISO-8601 date strings. description String Description of the user email String Email address of a user firstName String First name of a user gender String Gender of a user id String Unique ID in your database for a user lastName String Last name of a user name String Full name of a user. If you only pass a first and last name Segment automatically fills in the full name for you. phone String Phone number of a user title String Title of a user, usually related to their position at a specific company. Example: “VP of Engineering” username String User’s username. This should be unique to each user, like the usernames of Twitter or GitHub. website String Website of a user You might be used to some destinations recognizing special traits by slightly different names. For example, Mixpanel recognizes a $created trait when the user’s account was first created, while Intercom recognizes the same trait as created_at instead. Segment attempts to handle all the destination-specific conversions for you automatically. If you need help understanding if a specific field will be converted to a destination, take a look at Segment’s open source integration code , view the destination’s documentation, or contact Segment support . You can pass these reserved traits using camelCase or snake_case , so in JavaScript you can match the rest of your camelCase code by sending firstName , while in Ruby you can match your snake-case code by sending first_name . That way the API never seems alien to your code base. Keep in mind that not all destinations support these reserved traits, so sending these traits in camelCase and snake_case can result in two sets of traits in other destinations. This page was last modified: 23 Apr 2024 Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account Edit this page Request docs change On this page Example Identities Custom traits Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback!",
    "type": "general",
    "keywords": [
      "getting",
      "signups",
      "website",
      "birthday",
      "match",
      "applewebkit",
      "access",
      "pretty",
      "lifetime",
      "javascript",
      "record",
      "assistance",
      "robust",
      "typical",
      "updates",
      "visit",
      "traits",
      "generate",
      "check",
      "custom",
      "meaning",
      "firstname",
      "fields",
      "source",
      "might",
      "names",
      "database",
      "messageid",
      "based",
      "analytics",
      "twitter",
      "subscriptionstatus",
      "following",
      "identifier",
      "change",
      "chrome",
      "customer",
      "there",
      "created_at",
      "around",
      "because",
      "removed",
      "97980cfea0067",
      "about",
      "false",
      "pseudo",
      "title",
      "507f191e810c19729de860ea",
      "integrations",
      "easiest",
      "websites",
      "other",
      "library",
      "called",
      "identity",
      "session",
      "mozilla",
      "growth",
      "interactive",
      "addresses",
      "uuidv4",
      "meanings",
      "states",
      "problems",
      "permanent",
      "three",
      "intel",
      "require",
      "converted",
      "possible",
      "available",
      "things",
      "anonymous",
      "documentation",
      "navigate",
      "could",
      "position",
      "valid",
      "example",
      "integrate",
      "specific",
      "state",
      "gecko",
      "sources",
      "postalcode",
      "number",
      "using",
      "macintosh",
      "snake_case",
      "improve",
      "request",
      "trait",
      "guarantees",
      "specifies",
      "related",
      "storage",
      "overview",
      "modified",
      "sentat",
      "sends",
      "calling",
      "segment",
      "steps",
      "information",
      "username",
      "servers",
      "recognizing",
      "california",
      "different",
      "events",
      "include",
      "94103",
      "storing",
      "cookie",
      "numbers",
      "premium",
      "never",
      "data",
      "coming",
      "receivedat",
      "intended",
      "libraries",
      "contact",
      "first_name",
      "usernames",
      "street",
      "identities",
      "common",
      "francisco",
      "certain",
      "github",
      "string",
      "useragent",
      "output",
      "destination",
      "complete",
      "10_9_5",
      "including",
      "included",
      "channel",
      "avatar",
      "payload",
      "those",
      "university",
      "whether",
      "handle",
      "explanatory",
      "address",
      "these",
      "every",
      "question",
      "started",
      "something",
      "random",
      "browser",
      "standardized",
      "engineering",
      "would",
      "attempts",
      "pieces",
      "slightly",
      "helpful",
      "where",
      "destinations",
      "optional",
      "reserved",
      "timestamp",
      "account",
      "conversions",
      "registers",
      "instead",
      "cases",
      "email",
      "inactive",
      "while",
      "object",
      "always",
      "mongodb",
      "description",
      "khtml",
      "recommends",
      "provided",
      "calls",
      "readily",
      "camelcase",
      "company",
      "beyond",
      "their",
      "snake",
      "method",
      "alien",
      "usually",
      "sending",
      "depending",
      "employee_count",
      "fills",
      "strings",
      "according",
      "local",
      "createdat",
      "created",
      "image",
      "refer",
      "includes",
      "field",
      "version",
      "please",
      "digit",
      "united",
      "letter",
      "whole",
      "demographics",
      "special",
      "industry",
      "unique",
      "gender",
      "dictionary",
      "phone",
      "recognizes",
      "optionally",
      "support",
      "track",
      "tracking",
      "identify",
      "salesforce",
      "after",
      "containing",
      "since",
      "peter",
      "represents",
      "thanks",
      "understanding",
      "anonymousid",
      "context",
      "automatically",
      "format",
      "mobile",
      "required",
      "lastname",
      "safari",
      "logins",
      "logged",
      "reference",
      "semantic",
      "actions",
      "above",
      "aa07a5b093db",
      "level",
      "changes",
      "across",
      "should",
      "along",
      "api",
      "internal",
      "integration",
      "views",
      "first",
      "connections",
      "result",
      "often",
      "newsletter",
      "gibbons",
      "intercom",
      "create",
      "questions",
      "mixpanel",
      "syntax",
      "23t22",
      "correlate",
      "person",
      "recognize",
      "tools",
      "seems",
      "feedback",
      "enter",
      "corresponding",
      "users",
      "userid",
      "event",
      "particular",
      "consistent",
      "actually",
      "examples",
      "still",
      "sample",
      "variation",
      "expects",
      "mailchimp",
      "country",
      "worry",
      "022bb90c",
      "details"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#keepalive",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  },
  {
    "url": "https://segment.com/docs/#step-4-track-actions",
    "title": " Segment Documentation | Segment Documentation",
    "platform": "segment",
    "content": "Segment Documentation Learn how to use Segment to collect, responsibly manage, and integrate your customer data with hundreds of tools. Getting started with Segment Learn about Segment, plan and work through a basic implementation, and explore features and extensions. How can Segment help you? Simplify data collection Integrate the tools you need for analytics, growth, marketing, and more. Protect data integrity Prevent data quality issues with a tracking schema and enforcement with Protocols. Personalize experiences Build audiences and journeys from real-time customer data to personalize experiences on every channel. Respect users' privacy Keep customer data private with Segment's data discovery and policy enforcement tools. Get Data into Segment The Segment Spec helps you identify, capture, and format meaningful data for use with Segment libraries and APIs as well as downstream tools. Segment calls Use Track, Page, Identify, and other Segment tracking calls. Common traits Save time by letting Segment calls collect information for you. Use case specs Use our business-case specs to ensure that your tools get the most from your data. Learning about Segment Segment for Developers The basics of your Segment implementation. How-To Guides Over a dozen how-to guides that help you accomplish common tasks. Connect your app to Segment JavaScript Swift All other Sources Additional Resources Totally new to Analytics? Segment's Analytics Academy walks you through the wide world of analytics, including best practices, an overview of the most popular tools, and case studies of how other developers have achieved success. Want more hands-on guidance? For a more hands-on tutorial of Segment, check out Segment University. It offers step-by-step instructions, starting with first steps and going through some of our more advanced features. Need support? Questions? Problems? Need more info? Contact Segment Support for assistance! Visit our Support page Help improve these docs! Edit this page Request docs change Was this page helpful? Yes No Thanks for your feedback! Can we improve this doc? Send us feedback! Get started with Segment Segment is the easiest way to integrate your websites & mobile apps data to over 300 analytics and growth tools. Request Demo or Create free account",
    "type": "general",
    "keywords": [
      "getting",
      "issues",
      "visit",
      "javascript",
      "basics",
      "traits",
      "check",
      "specs",
      "features",
      "developers",
      "analytics",
      "change",
      "customer",
      "about",
      "tutorial",
      "easiest",
      "instructions",
      "starting",
      "other",
      "experiences",
      "growth",
      "problems",
      "letting",
      "documentation",
      "guidance",
      "through",
      "discovery",
      "integrate",
      "websites",
      "basic",
      "sources",
      "improve",
      "additional",
      "helps",
      "request",
      "overview",
      "respect",
      "practices",
      "steps",
      "segment",
      "information",
      "journeys",
      "implementation",
      "capture",
      "data",
      "success",
      "extensions",
      "libraries",
      "contact",
      "achieved",
      "common",
      "learn",
      "including",
      "channel",
      "policy",
      "connect",
      "responsibly",
      "privacy",
      "university",
      "these",
      "private",
      "assistance",
      "every",
      "started",
      "popular",
      "helpful",
      "resources",
      "downstream",
      "swift",
      "build",
      "account",
      "learning",
      "collection",
      "calls",
      "hands",
      "guides",
      "explore",
      "protect",
      "ensure",
      "simplify",
      "manage",
      "support",
      "track",
      "tracking",
      "identify",
      "thanks",
      "hundreds",
      "format",
      "mobile",
      "quality",
      "academy",
      "advanced",
      "schema",
      "meaningful",
      "studies",
      "personalize",
      "first",
      "enforcement",
      "going",
      "questions",
      "create",
      "totally",
      "world",
      "accomplish",
      "feedback",
      "tools",
      "marketing",
      "dozen",
      "collect",
      "users",
      "protocols",
      "integrity",
      "business",
      "tasks",
      "walks",
      "prevent",
      "audiences",
      "offers"
    ],
    "howto_steps": [],
    "metadata": {
      "last_updated": null,
      "category": "setup",
      "difficulty_level": "beginner"
    }
  }
]